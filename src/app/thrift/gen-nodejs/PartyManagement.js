//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('woody_js/dist/thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');
var domain_ttypes = require('./domain_types');
var user_interaction_ttypes = require('./user_interaction_types');


var ttypes = require('./payment_processing_types');
//HELPER FUNCTIONS AND STRUCTURES

var PartyManagement_Create_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.params = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.PartyParams(args.params);
    }
  }
};
PartyManagement_Create_args.prototype = {};
PartyManagement_Create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.PartyParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Create_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Create_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 3);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Create_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyExists) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
PartyManagement_Create_result.prototype = {};
PartyManagement_Create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyExists();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Create_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Create_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Get_args = function(args) {
  this.user = null;
  this.party_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
  }
};
PartyManagement_Get_args.prototype = {};
PartyManagement_Get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Get_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Get_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Get_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.Party(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
PartyManagement_Get_result.prototype = {};
PartyManagement_Get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.Party();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Get_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Checkout_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.revision = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = new ttypes.PartyRevisionParam(args.revision);
    }
  }
};
PartyManagement_Checkout_args.prototype = {};
PartyManagement_Checkout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.revision = new ttypes.PartyRevisionParam();
        this.revision.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Checkout_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Checkout_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.STRUCT, 3);
    this.revision.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Checkout_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyRevision) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.Party(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_Checkout_result.prototype = {};
PartyManagement_Checkout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.Party();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidPartyRevision();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Checkout_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Checkout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Suspend_args = function(args) {
  this.user = null;
  this.party_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
  }
};
PartyManagement_Suspend_args.prototype = {};
PartyManagement_Suspend_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Suspend_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Suspend_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Suspend_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_Suspend_result.prototype = {};
PartyManagement_Suspend_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidPartyStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Suspend_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Suspend_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Activate_args = function(args) {
  this.user = null;
  this.party_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
  }
};
PartyManagement_Activate_args.prototype = {};
PartyManagement_Activate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Activate_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Activate_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Activate_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_Activate_result.prototype = {};
PartyManagement_Activate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidPartyStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Activate_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Activate_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Block_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.reason = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
PartyManagement_Block_args.prototype = {};
PartyManagement_Block_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Block_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Block_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Block_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_Block_result.prototype = {};
PartyManagement_Block_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidPartyStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Block_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Block_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Unblock_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.reason = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
PartyManagement_Unblock_args.prototype = {};
PartyManagement_Unblock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Unblock_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Unblock_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_Unblock_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_Unblock_result.prototype = {};
PartyManagement_Unblock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidPartyStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_Unblock_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_Unblock_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetMeta_args = function(args) {
  this.user = null;
  this.party_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
  }
};
PartyManagement_GetMeta_args.prototype = {};
PartyManagement_GetMeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetMeta_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetMeta_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetMeta_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
PartyManagement_GetMeta_result.prototype = {};
PartyManagement_GetMeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size152 = 0;
        var _rtmp3156;
        this.success = new Map();
        var _ktype153 = 0;
        var _vtype154 = 0;
        _rtmp3156 = input.readMapBegin();
        _ktype153 = _rtmp3156.ktype;
        _vtype154 = _rtmp3156.vtype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var key158 = null;
          var val159 = null;
          key158 = input.readString();
          val159 = new msgpack_ttypes.Value();
          val159.read(input);
          this.success.set(key158, val159);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetMeta_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetMeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, this.success.size);
    var func162 = function(viter161, kiter160) {
      output.writeString(kiter160);
      viter161.write(output);
    };
    this.success.forEach(func162);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetMetaData_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.ns = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
PartyManagement_GetMetaData_args.prototype = {};
PartyManagement_GetMetaData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetMetaData_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetMetaData_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 3);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetMetaData_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.PartyMetaNamespaceNotFound) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgpack_ttypes.Value(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_GetMetaData_result.prototype = {};
PartyManagement_GetMetaData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgpack_ttypes.Value();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.PartyMetaNamespaceNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetMetaData_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetMetaData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_SetMetaData_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.ns = null;
  this.data = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new msgpack_ttypes.Value(args.data);
    }
  }
};
PartyManagement_SetMetaData_args.prototype = {};
PartyManagement_SetMetaData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new msgpack_ttypes.Value();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_SetMetaData_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_SetMetaData_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 3);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 4);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_SetMetaData_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
PartyManagement_SetMetaData_result.prototype = {};
PartyManagement_SetMetaData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_SetMetaData_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_SetMetaData_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_RemoveMetaData_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.ns = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
PartyManagement_RemoveMetaData_args.prototype = {};
PartyManagement_RemoveMetaData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_RemoveMetaData_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_RemoveMetaData_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 3);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_RemoveMetaData_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.PartyMetaNamespaceNotFound) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_RemoveMetaData_result.prototype = {};
PartyManagement_RemoveMetaData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.PartyMetaNamespaceNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_RemoveMetaData_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_RemoveMetaData_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetContract_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.contract_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.contract_id !== undefined && args.contract_id !== null) {
      this.contract_id = args.contract_id;
    }
  }
};
PartyManagement_GetContract_args.prototype = {};
PartyManagement_GetContract_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contract_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetContract_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetContract_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.contract_id !== null && this.contract_id !== undefined) {
    output.writeFieldBegin('contract_id', Thrift.Type.STRING, 3);
    output.writeString(this.contract_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetContract_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ContractNotFound) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.Contract(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_GetContract_result.prototype = {};
PartyManagement_GetContract_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.Contract();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ContractNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetContract_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetContract_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_ComputeContractTerms_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  this.timestamp = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
PartyManagement_ComputeContractTerms_args.prototype = {};
PartyManagement_ComputeContractTerms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_ComputeContractTerms_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_ComputeContractTerms_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_ComputeContractTerms_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotExistsYet) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.ContractNotFound) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.TermSet(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
PartyManagement_ComputeContractTerms_result.prototype = {};
PartyManagement_ComputeContractTerms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.TermSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.PartyNotExistsYet();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.ContractNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_ComputeContractTerms_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_ComputeContractTerms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetShop_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
PartyManagement_GetShop_args.prototype = {};
PartyManagement_GetShop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetShop_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetShop_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetShop_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ShopNotFound) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.Shop(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_GetShop_result.prototype = {};
PartyManagement_GetShop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.Shop();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ShopNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetShop_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetShop_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_SuspendShop_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
PartyManagement_SuspendShop_args.prototype = {};
PartyManagement_SuspendShop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_SuspendShop_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_SuspendShop_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_SuspendShop_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ShopNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
PartyManagement_SuspendShop_result.prototype = {};
PartyManagement_SuspendShop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ShopNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidShopStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_SuspendShop_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_SuspendShop_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_ActivateShop_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
PartyManagement_ActivateShop_args.prototype = {};
PartyManagement_ActivateShop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_ActivateShop_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_ActivateShop_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_ActivateShop_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ShopNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
PartyManagement_ActivateShop_result.prototype = {};
PartyManagement_ActivateShop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ShopNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidShopStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_ActivateShop_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_ActivateShop_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_BlockShop_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  this.reason = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
PartyManagement_BlockShop_args.prototype = {};
PartyManagement_BlockShop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_BlockShop_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_BlockShop_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 4);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_BlockShop_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ShopNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
PartyManagement_BlockShop_result.prototype = {};
PartyManagement_BlockShop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ShopNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidShopStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_BlockShop_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_BlockShop_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_UnblockShop_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  this.reason = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
PartyManagement_UnblockShop_args.prototype = {};
PartyManagement_UnblockShop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_UnblockShop_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_UnblockShop_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 4);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_UnblockShop_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ShopNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
PartyManagement_UnblockShop_result.prototype = {};
PartyManagement_UnblockShop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ShopNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidShopStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_UnblockShop_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_UnblockShop_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_ComputeShopTerms_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  this.timestamp = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
PartyManagement_ComputeShopTerms_args.prototype = {};
PartyManagement_ComputeShopTerms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_ComputeShopTerms_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_ComputeShopTerms_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_ComputeShopTerms_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotExistsYet) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.ShopNotFound) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.TermSet(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
PartyManagement_ComputeShopTerms_result.prototype = {};
PartyManagement_ComputeShopTerms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.TermSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.PartyNotExistsYet();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.ShopNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_ComputeShopTerms_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_ComputeShopTerms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_CreateClaim_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.changeset = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.changeset !== undefined && args.changeset !== null) {
      this.changeset = Thrift.copyList(args.changeset, [ttypes.PartyModification]);
    }
  }
};
PartyManagement_CreateClaim_args.prototype = {};
PartyManagement_CreateClaim_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size163 = 0;
        var _rtmp3167;
        this.changeset = [];
        var _etype166 = 0;
        _rtmp3167 = input.readListBegin();
        _etype166 = _rtmp3167.etype;
        _size163 = _rtmp3167.size;
        for (var _i168 = 0; _i168 < _size163; ++_i168)
        {
          var elem169 = null;
          elem169 = new ttypes.PartyModification();
          elem169.read(input);
          this.changeset.push(elem169);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_CreateClaim_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_CreateClaim_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.changeset !== null && this.changeset !== undefined) {
    output.writeFieldBegin('changeset', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.changeset.length);
    for (var iter170 in this.changeset)
    {
      if (this.changeset.hasOwnProperty(iter170))
      {
        iter170 = this.changeset[iter170];
        iter170.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_CreateClaim_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.ChangesetConflict) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidChangeset) {
    this.ex5 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex6 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Claim(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
  }
};
PartyManagement_CreateClaim_result.prototype = {};
PartyManagement_CreateClaim_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Claim();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidPartyStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.ChangesetConflict();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidChangeset();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new base_ttypes.InvalidRequest();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_CreateClaim_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_CreateClaim_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetClaim_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
PartyManagement_GetClaim_args.prototype = {};
PartyManagement_GetClaim_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetClaim_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetClaim_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 3);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetClaim_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ClaimNotFound) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Claim(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_GetClaim_result.prototype = {};
PartyManagement_GetClaim_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Claim();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ClaimNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetClaim_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetClaim_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetClaims_args = function(args) {
  this.user = null;
  this.party_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
  }
};
PartyManagement_GetClaims_args.prototype = {};
PartyManagement_GetClaims_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetClaims_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetClaims_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetClaims_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Claim]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
PartyManagement_GetClaims_result.prototype = {};
PartyManagement_GetClaims_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size171 = 0;
        var _rtmp3175;
        this.success = [];
        var _etype174 = 0;
        _rtmp3175 = input.readListBegin();
        _etype174 = _rtmp3175.etype;
        _size171 = _rtmp3175.size;
        for (var _i176 = 0; _i176 < _size171; ++_i176)
        {
          var elem177 = null;
          elem177 = new ttypes.Claim();
          elem177.read(input);
          this.success.push(elem177);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetClaims_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetClaims_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter178 in this.success)
    {
      if (this.success.hasOwnProperty(iter178))
      {
        iter178 = this.success[iter178];
        iter178.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_AcceptClaim_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  this.revision = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
PartyManagement_AcceptClaim_args.prototype = {};
PartyManagement_AcceptClaim_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.revision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_AcceptClaim_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_AcceptClaim_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 3);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I32, 4);
    output.writeI32(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_AcceptClaim_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ClaimNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidClaimStatus) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidClaimRevision) {
    this.ex5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidChangeset) {
    this.ex6 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
  }
};
PartyManagement_AcceptClaim_result.prototype = {};
PartyManagement_AcceptClaim_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ClaimNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidClaimStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidClaimRevision();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.InvalidChangeset();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_AcceptClaim_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_AcceptClaim_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_UpdateClaim_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  this.revision = null;
  this.changeset = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.changeset !== undefined && args.changeset !== null) {
      this.changeset = Thrift.copyList(args.changeset, [ttypes.PartyModification]);
    }
  }
};
PartyManagement_UpdateClaim_args.prototype = {};
PartyManagement_UpdateClaim_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.revision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size179 = 0;
        var _rtmp3183;
        this.changeset = [];
        var _etype182 = 0;
        _rtmp3183 = input.readListBegin();
        _etype182 = _rtmp3183.etype;
        _size179 = _rtmp3183.size;
        for (var _i184 = 0; _i184 < _size179; ++_i184)
        {
          var elem185 = null;
          elem185 = new ttypes.PartyModification();
          elem185.read(input);
          this.changeset.push(elem185);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_UpdateClaim_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_UpdateClaim_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 3);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I32, 4);
    output.writeI32(this.revision);
    output.writeFieldEnd();
  }
  if (this.changeset !== null && this.changeset !== undefined) {
    output.writeFieldBegin('changeset', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.changeset.length);
    for (var iter186 in this.changeset)
    {
      if (this.changeset.hasOwnProperty(iter186))
      {
        iter186 = this.changeset[iter186];
        iter186.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_UpdateClaim_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  this.ex7 = null;
  this.ex8 = null;
  this.ex9 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.ClaimNotFound) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidClaimStatus) {
    this.ex5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidClaimRevision) {
    this.ex6 = args;
    return;
  }
  if (args instanceof ttypes.ChangesetConflict) {
    this.ex7 = args;
    return;
  }
  if (args instanceof ttypes.InvalidChangeset) {
    this.ex8 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex9 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
    if (args.ex7 !== undefined && args.ex7 !== null) {
      this.ex7 = args.ex7;
    }
    if (args.ex8 !== undefined && args.ex8 !== null) {
      this.ex8 = args.ex8;
    }
    if (args.ex9 !== undefined && args.ex9 !== null) {
      this.ex9 = args.ex9;
    }
  }
};
PartyManagement_UpdateClaim_result.prototype = {};
PartyManagement_UpdateClaim_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidPartyStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.ClaimNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidClaimStatus();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.InvalidClaimRevision();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex7 = new ttypes.ChangesetConflict();
        this.ex7.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex8 = new ttypes.InvalidChangeset();
        this.ex8.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex9 = new base_ttypes.InvalidRequest();
        this.ex9.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_UpdateClaim_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_UpdateClaim_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  if (this.ex7 !== null && this.ex7 !== undefined) {
    output.writeFieldBegin('ex7', Thrift.Type.STRUCT, 7);
    this.ex7.write(output);
    output.writeFieldEnd();
  }
  if (this.ex8 !== null && this.ex8 !== undefined) {
    output.writeFieldBegin('ex8', Thrift.Type.STRUCT, 8);
    this.ex8.write(output);
    output.writeFieldEnd();
  }
  if (this.ex9 !== null && this.ex9 !== undefined) {
    output.writeFieldBegin('ex9', Thrift.Type.STRUCT, 9);
    this.ex9.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_DenyClaim_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  this.revision = null;
  this.reason = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
PartyManagement_DenyClaim_args.prototype = {};
PartyManagement_DenyClaim_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.revision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_DenyClaim_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_DenyClaim_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 3);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I32, 4);
    output.writeI32(this.revision);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 5);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_DenyClaim_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ClaimNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidClaimStatus) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidClaimRevision) {
    this.ex5 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
  }
};
PartyManagement_DenyClaim_result.prototype = {};
PartyManagement_DenyClaim_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ClaimNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidClaimStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidClaimRevision();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_DenyClaim_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_DenyClaim_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_RevokeClaim_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.id = null;
  this.revision = null;
  this.reason = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
PartyManagement_RevokeClaim_args.prototype = {};
PartyManagement_RevokeClaim_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.revision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_RevokeClaim_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_RevokeClaim_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 3);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I32, 4);
    output.writeI32(this.revision);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 5);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_RevokeClaim_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.ClaimNotFound) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidClaimStatus) {
    this.ex5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidClaimRevision) {
    this.ex6 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
  }
};
PartyManagement_RevokeClaim_result.prototype = {};
PartyManagement_RevokeClaim_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidPartyStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.ClaimNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidClaimStatus();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.InvalidClaimRevision();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_RevokeClaim_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_RevokeClaim_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetEvents_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.range = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.range !== undefined && args.range !== null) {
      this.range = new ttypes.EventRange(args.range);
    }
  }
};
PartyManagement_GetEvents_args.prototype = {};
PartyManagement_GetEvents_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.EventRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetEvents_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetEvents_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 3);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetEvents_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.EventNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
PartyManagement_GetEvents_result.prototype = {};
PartyManagement_GetEvents_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size187 = 0;
        var _rtmp3191;
        this.success = [];
        var _etype190 = 0;
        _rtmp3191 = input.readListBegin();
        _etype190 = _rtmp3191.etype;
        _size187 = _rtmp3191.size;
        for (var _i192 = 0; _i192 < _size187; ++_i192)
        {
          var elem193 = null;
          elem193 = new ttypes.Event();
          elem193.read(input);
          this.success.push(elem193);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.EventNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new base_ttypes.InvalidRequest();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetEvents_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetEvents_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter194 in this.success)
    {
      if (this.success.hasOwnProperty(iter194))
      {
        iter194 = this.success[iter194];
        iter194.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetShopAccount_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.shop_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    }
  }
};
PartyManagement_GetShopAccount_args.prototype = {};
PartyManagement_GetShopAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetShopAccount_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetShopAccount_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 3);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetShopAccount_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ShopNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.ShopAccountNotFound) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.ShopAccount(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
PartyManagement_GetShopAccount_result.prototype = {};
PartyManagement_GetShopAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.ShopAccount();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ShopNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.ShopAccountNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetShopAccount_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetShopAccount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetAccountState_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.account_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.account_id !== undefined && args.account_id !== null) {
      this.account_id = args.account_id;
    }
  }
};
PartyManagement_GetAccountState_args.prototype = {};
PartyManagement_GetAccountState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.account_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetAccountState_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetAccountState_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.account_id !== null && this.account_id !== undefined) {
    output.writeFieldBegin('account_id', Thrift.Type.I64, 3);
    output.writeI64(this.account_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_GetAccountState_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.AccountNotFound) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AccountState(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_GetAccountState_result.prototype = {};
PartyManagement_GetAccountState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AccountState();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.AccountNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_GetAccountState_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_GetAccountState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_ComputePaymentInstitutionTerms_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.ref = null;
  this.varset = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new domain_ttypes.PaymentInstitutionRef(args.ref);
    }
    if (args.varset !== undefined && args.varset !== null) {
      this.varset = new ttypes.Varset(args.varset);
    }
  }
};
PartyManagement_ComputePaymentInstitutionTerms_args.prototype = {};
PartyManagement_ComputePaymentInstitutionTerms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new domain_ttypes.PaymentInstitutionRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.varset = new ttypes.Varset();
        this.varset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_ComputePaymentInstitutionTerms_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_ComputePaymentInstitutionTerms_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 3);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.varset !== null && this.varset !== undefined) {
    output.writeFieldBegin('varset', Thrift.Type.STRUCT, 4);
    this.varset.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_ComputePaymentInstitutionTerms_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.PaymentInstitutionNotFound) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.TermSet(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
PartyManagement_ComputePaymentInstitutionTerms_result.prototype = {};
PartyManagement_ComputePaymentInstitutionTerms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.TermSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.PaymentInstitutionNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_ComputePaymentInstitutionTerms_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_ComputePaymentInstitutionTerms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_ComputePayoutCashFlow_args = function(args) {
  this.user = null;
  this.party_id = null;
  this.params = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.PayoutParams(args.params);
    }
  }
};
PartyManagement_ComputePayoutCashFlow_args.prototype = {};
PartyManagement_ComputePayoutCashFlow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.PayoutParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_ComputePayoutCashFlow_args.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_ComputePayoutCashFlow_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 3);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagement_ComputePayoutCashFlow_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotExistsYet) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.ShopNotFound) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.OperationNotPermitted) {
    this.ex5 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
  }
};
PartyManagement_ComputePayoutCashFlow_result.prototype = {};
PartyManagement_ComputePayoutCashFlow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size195 = 0;
        var _rtmp3199;
        this.success = [];
        var _etype198 = 0;
        _rtmp3199 = input.readListBegin();
        _etype198 = _rtmp3199.etype;
        _size195 = _rtmp3199.size;
        for (var _i200 = 0; _i200 < _size195; ++_i200)
        {
          var elem201 = null;
          elem201 = new domain_ttypes.FinalCashFlowPosting();
          elem201.read(input);
          this.success.push(elem201);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.PartyNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.PartyNotExistsYet();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.ShopNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.OperationNotPermitted();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyManagement_ComputePayoutCashFlow_result.prototype.write = function(output) {
  output.writeStructBegin('PartyManagement_ComputePayoutCashFlow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter202 in this.success)
    {
      if (this.success.hasOwnProperty(iter202))
      {
        iter202 = this.success[iter202];
        iter202.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyManagementClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
PartyManagementClient.prototype = {};
PartyManagementClient.prototype.seqid = function() { return this._seqid; }
PartyManagementClient.prototype.new_seqid = function() { return this._seqid += 1; }
PartyManagementClient.prototype.Create = function(user, party_id, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Create(user, party_id, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Create(user, party_id, params);
  }
};

PartyManagementClient.prototype.send_Create = function(user, party_id, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Create', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_Create_args();
  args.user = user;
  args.party_id = party_id;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_Create = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_Create_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null)
};
PartyManagementClient.prototype.Get = function(user, party_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Get(user, party_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Get(user, party_id);
  }
};

PartyManagementClient.prototype.send_Get = function(user, party_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Get', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_Get_args();
  args.user = user;
  args.party_id = party_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_Get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_Get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Get failed: unknown result');
};
PartyManagementClient.prototype.Checkout = function(user, party_id, revision, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Checkout(user, party_id, revision);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Checkout(user, party_id, revision);
  }
};

PartyManagementClient.prototype.send_Checkout = function(user, party_id, revision) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Checkout', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_Checkout_args();
  args.user = user;
  args.party_id = party_id;
  args.revision = revision;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_Checkout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_Checkout_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Checkout failed: unknown result');
};
PartyManagementClient.prototype.Suspend = function(user, party_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Suspend(user, party_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Suspend(user, party_id);
  }
};

PartyManagementClient.prototype.send_Suspend = function(user, party_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Suspend', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_Suspend_args();
  args.user = user;
  args.party_id = party_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_Suspend = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_Suspend_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  callback(null)
};
PartyManagementClient.prototype.Activate = function(user, party_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Activate(user, party_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Activate(user, party_id);
  }
};

PartyManagementClient.prototype.send_Activate = function(user, party_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Activate', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_Activate_args();
  args.user = user;
  args.party_id = party_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_Activate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_Activate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  callback(null)
};
PartyManagementClient.prototype.Block = function(user, party_id, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Block(user, party_id, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Block(user, party_id, reason);
  }
};

PartyManagementClient.prototype.send_Block = function(user, party_id, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Block', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_Block_args();
  args.user = user;
  args.party_id = party_id;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_Block = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_Block_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  callback(null)
};
PartyManagementClient.prototype.Unblock = function(user, party_id, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Unblock(user, party_id, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Unblock(user, party_id, reason);
  }
};

PartyManagementClient.prototype.send_Unblock = function(user, party_id, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Unblock', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_Unblock_args();
  args.user = user;
  args.party_id = party_id;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_Unblock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_Unblock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  callback(null)
};
PartyManagementClient.prototype.GetMeta = function(user, party_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetMeta(user, party_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetMeta(user, party_id);
  }
};

PartyManagementClient.prototype.send_GetMeta = function(user, party_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetMeta', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_GetMeta_args();
  args.user = user;
  args.party_id = party_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_GetMeta = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_GetMeta_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetMeta failed: unknown result');
};
PartyManagementClient.prototype.GetMetaData = function(user, party_id, ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetMetaData(user, party_id, ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetMetaData(user, party_id, ns);
  }
};

PartyManagementClient.prototype.send_GetMetaData = function(user, party_id, ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetMetaData', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_GetMetaData_args();
  args.user = user;
  args.party_id = party_id;
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_GetMetaData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_GetMetaData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetMetaData failed: unknown result');
};
PartyManagementClient.prototype.SetMetaData = function(user, party_id, ns, data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SetMetaData(user, party_id, ns, data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SetMetaData(user, party_id, ns, data);
  }
};

PartyManagementClient.prototype.send_SetMetaData = function(user, party_id, ns, data) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('SetMetaData', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_SetMetaData_args();
  args.user = user;
  args.party_id = party_id;
  args.ns = ns;
  args.data = data;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_SetMetaData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_SetMetaData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  callback(null)
};
PartyManagementClient.prototype.RemoveMetaData = function(user, party_id, ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RemoveMetaData(user, party_id, ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RemoveMetaData(user, party_id, ns);
  }
};

PartyManagementClient.prototype.send_RemoveMetaData = function(user, party_id, ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RemoveMetaData', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_RemoveMetaData_args();
  args.user = user;
  args.party_id = party_id;
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_RemoveMetaData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_RemoveMetaData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  callback(null)
};
PartyManagementClient.prototype.GetContract = function(user, party_id, contract_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetContract(user, party_id, contract_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetContract(user, party_id, contract_id);
  }
};

PartyManagementClient.prototype.send_GetContract = function(user, party_id, contract_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetContract', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_GetContract_args();
  args.user = user;
  args.party_id = party_id;
  args.contract_id = contract_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_GetContract = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_GetContract_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetContract failed: unknown result');
};
PartyManagementClient.prototype.ComputeContractTerms = function(user, party_id, id, timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ComputeContractTerms(user, party_id, id, timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ComputeContractTerms(user, party_id, id, timestamp);
  }
};

PartyManagementClient.prototype.send_ComputeContractTerms = function(user, party_id, id, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ComputeContractTerms', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_ComputeContractTerms_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_ComputeContractTerms = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_ComputeContractTerms_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ComputeContractTerms failed: unknown result');
};
PartyManagementClient.prototype.GetShop = function(user, party_id, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetShop(user, party_id, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetShop(user, party_id, id);
  }
};

PartyManagementClient.prototype.send_GetShop = function(user, party_id, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetShop', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_GetShop_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_GetShop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_GetShop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetShop failed: unknown result');
};
PartyManagementClient.prototype.SuspendShop = function(user, party_id, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SuspendShop(user, party_id, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SuspendShop(user, party_id, id);
  }
};

PartyManagementClient.prototype.send_SuspendShop = function(user, party_id, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('SuspendShop', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_SuspendShop_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_SuspendShop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_SuspendShop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  callback(null)
};
PartyManagementClient.prototype.ActivateShop = function(user, party_id, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ActivateShop(user, party_id, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ActivateShop(user, party_id, id);
  }
};

PartyManagementClient.prototype.send_ActivateShop = function(user, party_id, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ActivateShop', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_ActivateShop_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_ActivateShop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_ActivateShop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  callback(null)
};
PartyManagementClient.prototype.BlockShop = function(user, party_id, id, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_BlockShop(user, party_id, id, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_BlockShop(user, party_id, id, reason);
  }
};

PartyManagementClient.prototype.send_BlockShop = function(user, party_id, id, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('BlockShop', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_BlockShop_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_BlockShop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_BlockShop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  callback(null)
};
PartyManagementClient.prototype.UnblockShop = function(user, party_id, id, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_UnblockShop(user, party_id, id, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_UnblockShop(user, party_id, id, reason);
  }
};

PartyManagementClient.prototype.send_UnblockShop = function(user, party_id, id, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('UnblockShop', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_UnblockShop_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_UnblockShop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_UnblockShop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  callback(null)
};
PartyManagementClient.prototype.ComputeShopTerms = function(user, party_id, id, timestamp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ComputeShopTerms(user, party_id, id, timestamp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ComputeShopTerms(user, party_id, id, timestamp);
  }
};

PartyManagementClient.prototype.send_ComputeShopTerms = function(user, party_id, id, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ComputeShopTerms', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_ComputeShopTerms_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_ComputeShopTerms = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_ComputeShopTerms_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ComputeShopTerms failed: unknown result');
};
PartyManagementClient.prototype.CreateClaim = function(user, party_id, changeset, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateClaim(user, party_id, changeset);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateClaim(user, party_id, changeset);
  }
};

PartyManagementClient.prototype.send_CreateClaim = function(user, party_id, changeset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CreateClaim', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_CreateClaim_args();
  args.user = user;
  args.party_id = party_id;
  args.changeset = changeset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_CreateClaim = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_CreateClaim_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateClaim failed: unknown result');
};
PartyManagementClient.prototype.GetClaim = function(user, party_id, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetClaim(user, party_id, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetClaim(user, party_id, id);
  }
};

PartyManagementClient.prototype.send_GetClaim = function(user, party_id, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetClaim', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_GetClaim_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_GetClaim = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_GetClaim_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetClaim failed: unknown result');
};
PartyManagementClient.prototype.GetClaims = function(user, party_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetClaims(user, party_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetClaims(user, party_id);
  }
};

PartyManagementClient.prototype.send_GetClaims = function(user, party_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetClaims', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_GetClaims_args();
  args.user = user;
  args.party_id = party_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_GetClaims = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_GetClaims_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetClaims failed: unknown result');
};
PartyManagementClient.prototype.AcceptClaim = function(user, party_id, id, revision, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AcceptClaim(user, party_id, id, revision);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AcceptClaim(user, party_id, id, revision);
  }
};

PartyManagementClient.prototype.send_AcceptClaim = function(user, party_id, id, revision) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('AcceptClaim', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_AcceptClaim_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.revision = revision;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_AcceptClaim = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_AcceptClaim_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  callback(null)
};
PartyManagementClient.prototype.UpdateClaim = function(user, party_id, id, revision, changeset, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_UpdateClaim(user, party_id, id, revision, changeset);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_UpdateClaim(user, party_id, id, revision, changeset);
  }
};

PartyManagementClient.prototype.send_UpdateClaim = function(user, party_id, id, revision, changeset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('UpdateClaim', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_UpdateClaim_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.revision = revision;
  args.changeset = changeset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_UpdateClaim = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_UpdateClaim_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  if (null !== result.ex7) {
    return callback(result.ex7);
  }
  if (null !== result.ex8) {
    return callback(result.ex8);
  }
  if (null !== result.ex9) {
    return callback(result.ex9);
  }
  callback(null)
};
PartyManagementClient.prototype.DenyClaim = function(user, party_id, id, revision, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_DenyClaim(user, party_id, id, revision, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_DenyClaim(user, party_id, id, revision, reason);
  }
};

PartyManagementClient.prototype.send_DenyClaim = function(user, party_id, id, revision, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('DenyClaim', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_DenyClaim_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.revision = revision;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_DenyClaim = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_DenyClaim_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  callback(null)
};
PartyManagementClient.prototype.RevokeClaim = function(user, party_id, id, revision, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RevokeClaim(user, party_id, id, revision, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RevokeClaim(user, party_id, id, revision, reason);
  }
};

PartyManagementClient.prototype.send_RevokeClaim = function(user, party_id, id, revision, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RevokeClaim', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_RevokeClaim_args();
  args.user = user;
  args.party_id = party_id;
  args.id = id;
  args.revision = revision;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_RevokeClaim = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_RevokeClaim_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  callback(null)
};
PartyManagementClient.prototype.GetEvents = function(user, party_id, range, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEvents(user, party_id, range);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEvents(user, party_id, range);
  }
};

PartyManagementClient.prototype.send_GetEvents = function(user, party_id, range) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEvents', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_GetEvents_args();
  args.user = user;
  args.party_id = party_id;
  args.range = range;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_GetEvents = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_GetEvents_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEvents failed: unknown result');
};
PartyManagementClient.prototype.GetShopAccount = function(user, party_id, shop_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetShopAccount(user, party_id, shop_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetShopAccount(user, party_id, shop_id);
  }
};

PartyManagementClient.prototype.send_GetShopAccount = function(user, party_id, shop_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetShopAccount', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_GetShopAccount_args();
  args.user = user;
  args.party_id = party_id;
  args.shop_id = shop_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_GetShopAccount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_GetShopAccount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetShopAccount failed: unknown result');
};
PartyManagementClient.prototype.GetAccountState = function(user, party_id, account_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetAccountState(user, party_id, account_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetAccountState(user, party_id, account_id);
  }
};

PartyManagementClient.prototype.send_GetAccountState = function(user, party_id, account_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetAccountState', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_GetAccountState_args();
  args.user = user;
  args.party_id = party_id;
  args.account_id = account_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_GetAccountState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_GetAccountState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetAccountState failed: unknown result');
};
PartyManagementClient.prototype.ComputePaymentInstitutionTerms = function(user, party_id, ref, varset, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ComputePaymentInstitutionTerms(user, party_id, ref, varset);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ComputePaymentInstitutionTerms(user, party_id, ref, varset);
  }
};

PartyManagementClient.prototype.send_ComputePaymentInstitutionTerms = function(user, party_id, ref, varset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ComputePaymentInstitutionTerms', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_ComputePaymentInstitutionTerms_args();
  args.user = user;
  args.party_id = party_id;
  args.ref = ref;
  args.varset = varset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_ComputePaymentInstitutionTerms = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_ComputePaymentInstitutionTerms_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ComputePaymentInstitutionTerms failed: unknown result');
};
PartyManagementClient.prototype.ComputePayoutCashFlow = function(user, party_id, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ComputePayoutCashFlow(user, party_id, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ComputePayoutCashFlow(user, party_id, params);
  }
};

PartyManagementClient.prototype.send_ComputePayoutCashFlow = function(user, party_id, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ComputePayoutCashFlow', Thrift.MessageType.CALL, this.seqid());
  var args = new PartyManagement_ComputePayoutCashFlow_args();
  args.user = user;
  args.party_id = party_id;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PartyManagementClient.prototype.recv_ComputePayoutCashFlow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PartyManagement_ComputePayoutCashFlow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ComputePayoutCashFlow failed: unknown result');
};
var PartyManagementProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
PartyManagementProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

PartyManagementProcessor.prototype.process_Create = function(seqid, input, output) {
  var args = new PartyManagement_Create_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Create.length === 3) {
    Q.fcall(this._handler.Create, args.user, args.party_id, args.params)
      .then(function(result) {
        var result = new PartyManagement_Create_result({success: result});
        output.writeMessageBegin("Create", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyExists) {
          var result = new PartyManagement_Create_result(err);
          output.writeMessageBegin("Create", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Create", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Create(args.user, args.party_id, args.params, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyExists) {
        var result = new PartyManagement_Create_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Create", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Create", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_Get = function(seqid, input, output) {
  var args = new PartyManagement_Get_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Get.length === 2) {
    Q.fcall(this._handler.Get, args.user, args.party_id)
      .then(function(result) {
        var result = new PartyManagement_Get_result({success: result});
        output.writeMessageBegin("Get", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound) {
          var result = new PartyManagement_Get_result(err);
          output.writeMessageBegin("Get", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Get", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Get(args.user, args.party_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound) {
        var result = new PartyManagement_Get_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Get", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_Checkout = function(seqid, input, output) {
  var args = new PartyManagement_Checkout_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Checkout.length === 3) {
    Q.fcall(this._handler.Checkout, args.user, args.party_id, args.revision)
      .then(function(result) {
        var result = new PartyManagement_Checkout_result({success: result});
        output.writeMessageBegin("Checkout", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyRevision) {
          var result = new PartyManagement_Checkout_result(err);
          output.writeMessageBegin("Checkout", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Checkout", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Checkout(args.user, args.party_id, args.revision, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyRevision) {
        var result = new PartyManagement_Checkout_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Checkout", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Checkout", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_Suspend = function(seqid, input, output) {
  var args = new PartyManagement_Suspend_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Suspend.length === 2) {
    Q.fcall(this._handler.Suspend, args.user, args.party_id)
      .then(function(result) {
        var result = new PartyManagement_Suspend_result({success: result});
        output.writeMessageBegin("Suspend", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus) {
          var result = new PartyManagement_Suspend_result(err);
          output.writeMessageBegin("Suspend", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Suspend", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Suspend(args.user, args.party_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus) {
        var result = new PartyManagement_Suspend_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Suspend", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Suspend", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_Activate = function(seqid, input, output) {
  var args = new PartyManagement_Activate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Activate.length === 2) {
    Q.fcall(this._handler.Activate, args.user, args.party_id)
      .then(function(result) {
        var result = new PartyManagement_Activate_result({success: result});
        output.writeMessageBegin("Activate", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus) {
          var result = new PartyManagement_Activate_result(err);
          output.writeMessageBegin("Activate", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Activate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Activate(args.user, args.party_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus) {
        var result = new PartyManagement_Activate_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Activate", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Activate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_Block = function(seqid, input, output) {
  var args = new PartyManagement_Block_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Block.length === 3) {
    Q.fcall(this._handler.Block, args.user, args.party_id, args.reason)
      .then(function(result) {
        var result = new PartyManagement_Block_result({success: result});
        output.writeMessageBegin("Block", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus) {
          var result = new PartyManagement_Block_result(err);
          output.writeMessageBegin("Block", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Block", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Block(args.user, args.party_id, args.reason, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus) {
        var result = new PartyManagement_Block_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Block", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Block", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_Unblock = function(seqid, input, output) {
  var args = new PartyManagement_Unblock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Unblock.length === 3) {
    Q.fcall(this._handler.Unblock, args.user, args.party_id, args.reason)
      .then(function(result) {
        var result = new PartyManagement_Unblock_result({success: result});
        output.writeMessageBegin("Unblock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus) {
          var result = new PartyManagement_Unblock_result(err);
          output.writeMessageBegin("Unblock", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Unblock", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Unblock(args.user, args.party_id, args.reason, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus) {
        var result = new PartyManagement_Unblock_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Unblock", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Unblock", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_GetMeta = function(seqid, input, output) {
  var args = new PartyManagement_GetMeta_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetMeta.length === 2) {
    Q.fcall(this._handler.GetMeta, args.user, args.party_id)
      .then(function(result) {
        var result = new PartyManagement_GetMeta_result({success: result});
        output.writeMessageBegin("GetMeta", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound) {
          var result = new PartyManagement_GetMeta_result(err);
          output.writeMessageBegin("GetMeta", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetMeta", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetMeta(args.user, args.party_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound) {
        var result = new PartyManagement_GetMeta_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetMeta", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetMeta", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_GetMetaData = function(seqid, input, output) {
  var args = new PartyManagement_GetMetaData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetMetaData.length === 3) {
    Q.fcall(this._handler.GetMetaData, args.user, args.party_id, args.ns)
      .then(function(result) {
        var result = new PartyManagement_GetMetaData_result({success: result});
        output.writeMessageBegin("GetMetaData", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PartyMetaNamespaceNotFound) {
          var result = new PartyManagement_GetMetaData_result(err);
          output.writeMessageBegin("GetMetaData", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetMetaData", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetMetaData(args.user, args.party_id, args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PartyMetaNamespaceNotFound) {
        var result = new PartyManagement_GetMetaData_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetMetaData", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetMetaData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_SetMetaData = function(seqid, input, output) {
  var args = new PartyManagement_SetMetaData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SetMetaData.length === 4) {
    Q.fcall(this._handler.SetMetaData, args.user, args.party_id, args.ns, args.data)
      .then(function(result) {
        var result = new PartyManagement_SetMetaData_result({success: result});
        output.writeMessageBegin("SetMetaData", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound) {
          var result = new PartyManagement_SetMetaData_result(err);
          output.writeMessageBegin("SetMetaData", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("SetMetaData", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.SetMetaData(args.user, args.party_id, args.ns, args.data, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound) {
        var result = new PartyManagement_SetMetaData_result((err != null ? err : {success: result}));
        output.writeMessageBegin("SetMetaData", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SetMetaData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_RemoveMetaData = function(seqid, input, output) {
  var args = new PartyManagement_RemoveMetaData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RemoveMetaData.length === 3) {
    Q.fcall(this._handler.RemoveMetaData, args.user, args.party_id, args.ns)
      .then(function(result) {
        var result = new PartyManagement_RemoveMetaData_result({success: result});
        output.writeMessageBegin("RemoveMetaData", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PartyMetaNamespaceNotFound) {
          var result = new PartyManagement_RemoveMetaData_result(err);
          output.writeMessageBegin("RemoveMetaData", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("RemoveMetaData", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.RemoveMetaData(args.user, args.party_id, args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PartyMetaNamespaceNotFound) {
        var result = new PartyManagement_RemoveMetaData_result((err != null ? err : {success: result}));
        output.writeMessageBegin("RemoveMetaData", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveMetaData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_GetContract = function(seqid, input, output) {
  var args = new PartyManagement_GetContract_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetContract.length === 3) {
    Q.fcall(this._handler.GetContract, args.user, args.party_id, args.contract_id)
      .then(function(result) {
        var result = new PartyManagement_GetContract_result({success: result});
        output.writeMessageBegin("GetContract", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ContractNotFound) {
          var result = new PartyManagement_GetContract_result(err);
          output.writeMessageBegin("GetContract", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetContract", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetContract(args.user, args.party_id, args.contract_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ContractNotFound) {
        var result = new PartyManagement_GetContract_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetContract", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetContract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_ComputeContractTerms = function(seqid, input, output) {
  var args = new PartyManagement_ComputeContractTerms_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ComputeContractTerms.length === 4) {
    Q.fcall(this._handler.ComputeContractTerms, args.user, args.party_id, args.id, args.timestamp)
      .then(function(result) {
        var result = new PartyManagement_ComputeContractTerms_result({success: result});
        output.writeMessageBegin("ComputeContractTerms", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PartyNotExistsYet || err instanceof ttypes.ContractNotFound) {
          var result = new PartyManagement_ComputeContractTerms_result(err);
          output.writeMessageBegin("ComputeContractTerms", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ComputeContractTerms", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ComputeContractTerms(args.user, args.party_id, args.id, args.timestamp, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PartyNotExistsYet || err instanceof ttypes.ContractNotFound) {
        var result = new PartyManagement_ComputeContractTerms_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ComputeContractTerms", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ComputeContractTerms", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_GetShop = function(seqid, input, output) {
  var args = new PartyManagement_GetShop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetShop.length === 3) {
    Q.fcall(this._handler.GetShop, args.user, args.party_id, args.id)
      .then(function(result) {
        var result = new PartyManagement_GetShop_result({success: result});
        output.writeMessageBegin("GetShop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound) {
          var result = new PartyManagement_GetShop_result(err);
          output.writeMessageBegin("GetShop", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetShop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetShop(args.user, args.party_id, args.id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound) {
        var result = new PartyManagement_GetShop_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetShop", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetShop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_SuspendShop = function(seqid, input, output) {
  var args = new PartyManagement_SuspendShop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SuspendShop.length === 3) {
    Q.fcall(this._handler.SuspendShop, args.user, args.party_id, args.id)
      .then(function(result) {
        var result = new PartyManagement_SuspendShop_result({success: result});
        output.writeMessageBegin("SuspendShop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.InvalidShopStatus) {
          var result = new PartyManagement_SuspendShop_result(err);
          output.writeMessageBegin("SuspendShop", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("SuspendShop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.SuspendShop(args.user, args.party_id, args.id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.InvalidShopStatus) {
        var result = new PartyManagement_SuspendShop_result((err != null ? err : {success: result}));
        output.writeMessageBegin("SuspendShop", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SuspendShop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_ActivateShop = function(seqid, input, output) {
  var args = new PartyManagement_ActivateShop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ActivateShop.length === 3) {
    Q.fcall(this._handler.ActivateShop, args.user, args.party_id, args.id)
      .then(function(result) {
        var result = new PartyManagement_ActivateShop_result({success: result});
        output.writeMessageBegin("ActivateShop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.InvalidShopStatus) {
          var result = new PartyManagement_ActivateShop_result(err);
          output.writeMessageBegin("ActivateShop", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ActivateShop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ActivateShop(args.user, args.party_id, args.id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.InvalidShopStatus) {
        var result = new PartyManagement_ActivateShop_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ActivateShop", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ActivateShop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_BlockShop = function(seqid, input, output) {
  var args = new PartyManagement_BlockShop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.BlockShop.length === 4) {
    Q.fcall(this._handler.BlockShop, args.user, args.party_id, args.id, args.reason)
      .then(function(result) {
        var result = new PartyManagement_BlockShop_result({success: result});
        output.writeMessageBegin("BlockShop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.InvalidShopStatus) {
          var result = new PartyManagement_BlockShop_result(err);
          output.writeMessageBegin("BlockShop", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("BlockShop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.BlockShop(args.user, args.party_id, args.id, args.reason, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.InvalidShopStatus) {
        var result = new PartyManagement_BlockShop_result((err != null ? err : {success: result}));
        output.writeMessageBegin("BlockShop", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BlockShop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_UnblockShop = function(seqid, input, output) {
  var args = new PartyManagement_UnblockShop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.UnblockShop.length === 4) {
    Q.fcall(this._handler.UnblockShop, args.user, args.party_id, args.id, args.reason)
      .then(function(result) {
        var result = new PartyManagement_UnblockShop_result({success: result});
        output.writeMessageBegin("UnblockShop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.InvalidShopStatus) {
          var result = new PartyManagement_UnblockShop_result(err);
          output.writeMessageBegin("UnblockShop", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("UnblockShop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.UnblockShop(args.user, args.party_id, args.id, args.reason, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.InvalidShopStatus) {
        var result = new PartyManagement_UnblockShop_result((err != null ? err : {success: result}));
        output.writeMessageBegin("UnblockShop", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("UnblockShop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_ComputeShopTerms = function(seqid, input, output) {
  var args = new PartyManagement_ComputeShopTerms_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ComputeShopTerms.length === 4) {
    Q.fcall(this._handler.ComputeShopTerms, args.user, args.party_id, args.id, args.timestamp)
      .then(function(result) {
        var result = new PartyManagement_ComputeShopTerms_result({success: result});
        output.writeMessageBegin("ComputeShopTerms", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PartyNotExistsYet || err instanceof ttypes.ShopNotFound) {
          var result = new PartyManagement_ComputeShopTerms_result(err);
          output.writeMessageBegin("ComputeShopTerms", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ComputeShopTerms", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ComputeShopTerms(args.user, args.party_id, args.id, args.timestamp, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PartyNotExistsYet || err instanceof ttypes.ShopNotFound) {
        var result = new PartyManagement_ComputeShopTerms_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ComputeShopTerms", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ComputeShopTerms", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_CreateClaim = function(seqid, input, output) {
  var args = new PartyManagement_CreateClaim_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateClaim.length === 3) {
    Q.fcall(this._handler.CreateClaim, args.user, args.party_id, args.changeset)
      .then(function(result) {
        var result = new PartyManagement_CreateClaim_result({success: result});
        output.writeMessageBegin("CreateClaim", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.ChangesetConflict || err instanceof ttypes.InvalidChangeset || err instanceof base_ttypes.InvalidRequest) {
          var result = new PartyManagement_CreateClaim_result(err);
          output.writeMessageBegin("CreateClaim", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CreateClaim", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CreateClaim(args.user, args.party_id, args.changeset, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.ChangesetConflict || err instanceof ttypes.InvalidChangeset || err instanceof base_ttypes.InvalidRequest) {
        var result = new PartyManagement_CreateClaim_result((err != null ? err : {success: result}));
        output.writeMessageBegin("CreateClaim", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateClaim", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_GetClaim = function(seqid, input, output) {
  var args = new PartyManagement_GetClaim_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetClaim.length === 3) {
    Q.fcall(this._handler.GetClaim, args.user, args.party_id, args.id)
      .then(function(result) {
        var result = new PartyManagement_GetClaim_result({success: result});
        output.writeMessageBegin("GetClaim", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ClaimNotFound) {
          var result = new PartyManagement_GetClaim_result(err);
          output.writeMessageBegin("GetClaim", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetClaim", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetClaim(args.user, args.party_id, args.id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ClaimNotFound) {
        var result = new PartyManagement_GetClaim_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetClaim", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetClaim", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_GetClaims = function(seqid, input, output) {
  var args = new PartyManagement_GetClaims_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetClaims.length === 2) {
    Q.fcall(this._handler.GetClaims, args.user, args.party_id)
      .then(function(result) {
        var result = new PartyManagement_GetClaims_result({success: result});
        output.writeMessageBegin("GetClaims", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound) {
          var result = new PartyManagement_GetClaims_result(err);
          output.writeMessageBegin("GetClaims", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetClaims", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetClaims(args.user, args.party_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound) {
        var result = new PartyManagement_GetClaims_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetClaims", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetClaims", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_AcceptClaim = function(seqid, input, output) {
  var args = new PartyManagement_AcceptClaim_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AcceptClaim.length === 4) {
    Q.fcall(this._handler.AcceptClaim, args.user, args.party_id, args.id, args.revision)
      .then(function(result) {
        var result = new PartyManagement_AcceptClaim_result({success: result});
        output.writeMessageBegin("AcceptClaim", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ClaimNotFound || err instanceof ttypes.InvalidClaimStatus || err instanceof ttypes.InvalidClaimRevision || err instanceof ttypes.InvalidChangeset) {
          var result = new PartyManagement_AcceptClaim_result(err);
          output.writeMessageBegin("AcceptClaim", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("AcceptClaim", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.AcceptClaim(args.user, args.party_id, args.id, args.revision, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ClaimNotFound || err instanceof ttypes.InvalidClaimStatus || err instanceof ttypes.InvalidClaimRevision || err instanceof ttypes.InvalidChangeset) {
        var result = new PartyManagement_AcceptClaim_result((err != null ? err : {success: result}));
        output.writeMessageBegin("AcceptClaim", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AcceptClaim", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_UpdateClaim = function(seqid, input, output) {
  var args = new PartyManagement_UpdateClaim_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.UpdateClaim.length === 5) {
    Q.fcall(this._handler.UpdateClaim, args.user, args.party_id, args.id, args.revision, args.changeset)
      .then(function(result) {
        var result = new PartyManagement_UpdateClaim_result({success: result});
        output.writeMessageBegin("UpdateClaim", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.ClaimNotFound || err instanceof ttypes.InvalidClaimStatus || err instanceof ttypes.InvalidClaimRevision || err instanceof ttypes.ChangesetConflict || err instanceof ttypes.InvalidChangeset || err instanceof base_ttypes.InvalidRequest) {
          var result = new PartyManagement_UpdateClaim_result(err);
          output.writeMessageBegin("UpdateClaim", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("UpdateClaim", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.UpdateClaim(args.user, args.party_id, args.id, args.revision, args.changeset, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.ClaimNotFound || err instanceof ttypes.InvalidClaimStatus || err instanceof ttypes.InvalidClaimRevision || err instanceof ttypes.ChangesetConflict || err instanceof ttypes.InvalidChangeset || err instanceof base_ttypes.InvalidRequest) {
        var result = new PartyManagement_UpdateClaim_result((err != null ? err : {success: result}));
        output.writeMessageBegin("UpdateClaim", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("UpdateClaim", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_DenyClaim = function(seqid, input, output) {
  var args = new PartyManagement_DenyClaim_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.DenyClaim.length === 5) {
    Q.fcall(this._handler.DenyClaim, args.user, args.party_id, args.id, args.revision, args.reason)
      .then(function(result) {
        var result = new PartyManagement_DenyClaim_result({success: result});
        output.writeMessageBegin("DenyClaim", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ClaimNotFound || err instanceof ttypes.InvalidClaimStatus || err instanceof ttypes.InvalidClaimRevision) {
          var result = new PartyManagement_DenyClaim_result(err);
          output.writeMessageBegin("DenyClaim", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("DenyClaim", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.DenyClaim(args.user, args.party_id, args.id, args.revision, args.reason, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ClaimNotFound || err instanceof ttypes.InvalidClaimStatus || err instanceof ttypes.InvalidClaimRevision) {
        var result = new PartyManagement_DenyClaim_result((err != null ? err : {success: result}));
        output.writeMessageBegin("DenyClaim", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("DenyClaim", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_RevokeClaim = function(seqid, input, output) {
  var args = new PartyManagement_RevokeClaim_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RevokeClaim.length === 5) {
    Q.fcall(this._handler.RevokeClaim, args.user, args.party_id, args.id, args.revision, args.reason)
      .then(function(result) {
        var result = new PartyManagement_RevokeClaim_result({success: result});
        output.writeMessageBegin("RevokeClaim", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.ClaimNotFound || err instanceof ttypes.InvalidClaimStatus || err instanceof ttypes.InvalidClaimRevision) {
          var result = new PartyManagement_RevokeClaim_result(err);
          output.writeMessageBegin("RevokeClaim", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("RevokeClaim", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.RevokeClaim(args.user, args.party_id, args.id, args.revision, args.reason, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.ClaimNotFound || err instanceof ttypes.InvalidClaimStatus || err instanceof ttypes.InvalidClaimRevision) {
        var result = new PartyManagement_RevokeClaim_result((err != null ? err : {success: result}));
        output.writeMessageBegin("RevokeClaim", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RevokeClaim", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_GetEvents = function(seqid, input, output) {
  var args = new PartyManagement_GetEvents_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEvents.length === 3) {
    Q.fcall(this._handler.GetEvents, args.user, args.party_id, args.range)
      .then(function(result) {
        var result = new PartyManagement_GetEvents_result({success: result});
        output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.EventNotFound || err instanceof base_ttypes.InvalidRequest) {
          var result = new PartyManagement_GetEvents_result(err);
          output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetEvents", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEvents(args.user, args.party_id, args.range, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.EventNotFound || err instanceof base_ttypes.InvalidRequest) {
        var result = new PartyManagement_GetEvents_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEvents", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_GetShopAccount = function(seqid, input, output) {
  var args = new PartyManagement_GetShopAccount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetShopAccount.length === 3) {
    Q.fcall(this._handler.GetShopAccount, args.user, args.party_id, args.shop_id)
      .then(function(result) {
        var result = new PartyManagement_GetShopAccount_result({success: result});
        output.writeMessageBegin("GetShopAccount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.ShopAccountNotFound) {
          var result = new PartyManagement_GetShopAccount_result(err);
          output.writeMessageBegin("GetShopAccount", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetShopAccount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetShopAccount(args.user, args.party_id, args.shop_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.ShopAccountNotFound) {
        var result = new PartyManagement_GetShopAccount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetShopAccount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetShopAccount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_GetAccountState = function(seqid, input, output) {
  var args = new PartyManagement_GetAccountState_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetAccountState.length === 3) {
    Q.fcall(this._handler.GetAccountState, args.user, args.party_id, args.account_id)
      .then(function(result) {
        var result = new PartyManagement_GetAccountState_result({success: result});
        output.writeMessageBegin("GetAccountState", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.AccountNotFound) {
          var result = new PartyManagement_GetAccountState_result(err);
          output.writeMessageBegin("GetAccountState", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetAccountState", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetAccountState(args.user, args.party_id, args.account_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.AccountNotFound) {
        var result = new PartyManagement_GetAccountState_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetAccountState", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetAccountState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_ComputePaymentInstitutionTerms = function(seqid, input, output) {
  var args = new PartyManagement_ComputePaymentInstitutionTerms_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ComputePaymentInstitutionTerms.length === 4) {
    Q.fcall(this._handler.ComputePaymentInstitutionTerms, args.user, args.party_id, args.ref, args.varset)
      .then(function(result) {
        var result = new PartyManagement_ComputePaymentInstitutionTerms_result({success: result});
        output.writeMessageBegin("ComputePaymentInstitutionTerms", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PaymentInstitutionNotFound) {
          var result = new PartyManagement_ComputePaymentInstitutionTerms_result(err);
          output.writeMessageBegin("ComputePaymentInstitutionTerms", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ComputePaymentInstitutionTerms", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ComputePaymentInstitutionTerms(args.user, args.party_id, args.ref, args.varset, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PaymentInstitutionNotFound) {
        var result = new PartyManagement_ComputePaymentInstitutionTerms_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ComputePaymentInstitutionTerms", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ComputePaymentInstitutionTerms", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

PartyManagementProcessor.prototype.process_ComputePayoutCashFlow = function(seqid, input, output) {
  var args = new PartyManagement_ComputePayoutCashFlow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ComputePayoutCashFlow.length === 3) {
    Q.fcall(this._handler.ComputePayoutCashFlow, args.user, args.party_id, args.params)
      .then(function(result) {
        var result = new PartyManagement_ComputePayoutCashFlow_result({success: result});
        output.writeMessageBegin("ComputePayoutCashFlow", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PartyNotExistsYet || err instanceof ttypes.ShopNotFound || err instanceof ttypes.OperationNotPermitted) {
          var result = new PartyManagement_ComputePayoutCashFlow_result(err);
          output.writeMessageBegin("ComputePayoutCashFlow", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ComputePayoutCashFlow", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ComputePayoutCashFlow(args.user, args.party_id, args.params, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.PartyNotFound || err instanceof ttypes.PartyNotExistsYet || err instanceof ttypes.ShopNotFound || err instanceof ttypes.OperationNotPermitted) {
        var result = new PartyManagement_ComputePayoutCashFlow_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ComputePayoutCashFlow", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ComputePayoutCashFlow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

