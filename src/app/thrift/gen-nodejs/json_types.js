//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('woody_js/dist/thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var Value = module.exports.Value = function(args) {
  this.nl = null;
  this.b = null;
  this.i = null;
  this.flt = null;
  this.str = null;
  this.obj = null;
  this.arr = null;
  if (args) {
    if (args.nl !== undefined && args.nl !== null) {
      this.nl = new ttypes.Null(args.nl);
    }
    if (args.b !== undefined && args.b !== null) {
      this.b = args.b;
    }
    if (args.i !== undefined && args.i !== null) {
      this.i = args.i;
    }
    if (args.flt !== undefined && args.flt !== null) {
      this.flt = args.flt;
    }
    if (args.str !== undefined && args.str !== null) {
      this.str = args.str;
    }
    if (args.obj !== undefined && args.obj !== null) {
      this.obj = Thrift.copyMap(args.obj, [ttypes.Value]);
    }
    if (args.arr !== undefined && args.arr !== null) {
      this.arr = Thrift.copyList(args.arr, [ttypes.Value]);
    }
  }
};
Value.prototype = {};
Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nl = new ttypes.Null();
        this.nl.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.b = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.i = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.flt = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.str = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.obj = new Map();
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = new ttypes.Value();
          val7.read(input);
          this.obj.set(key6, val7);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.arr = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Value();
          elem14.read(input);
          this.arr.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Value.prototype.write = function(output) {
  output.writeStructBegin('Value');
  if (this.nl !== null && this.nl !== undefined) {
    output.writeFieldBegin('nl', Thrift.Type.STRUCT, 1);
    this.nl.write(output);
    output.writeFieldEnd();
  }
  if (this.b !== null && this.b !== undefined) {
    output.writeFieldBegin('b', Thrift.Type.BOOL, 2);
    output.writeBool(this.b);
    output.writeFieldEnd();
  }
  if (this.i !== null && this.i !== undefined) {
    output.writeFieldBegin('i', Thrift.Type.I32, 3);
    output.writeI32(this.i);
    output.writeFieldEnd();
  }
  if (this.flt !== null && this.flt !== undefined) {
    output.writeFieldBegin('flt', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.flt);
    output.writeFieldEnd();
  }
  if (this.str !== null && this.str !== undefined) {
    output.writeFieldBegin('str', Thrift.Type.STRING, 5);
    output.writeString(this.str);
    output.writeFieldEnd();
  }
  if (this.obj !== null && this.obj !== undefined) {
    output.writeFieldBegin('obj', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, this.obj.size);
    var func17 = function(viter16, kiter15) {
      output.writeString(kiter15);
      viter16.write(output);
    };
    this.obj.forEach(func17);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.arr !== null && this.arr !== undefined) {
    output.writeFieldBegin('arr', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.arr.length);
    for (var iter18 in this.arr)
    {
      if (this.arr.hasOwnProperty(iter18))
      {
        iter18 = this.arr[iter18];
        iter18.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Null = module.exports.Null = function(args) {
};
Null.prototype = {};
Null.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Null.prototype.write = function(output) {
  output.writeStructBegin('Null');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

