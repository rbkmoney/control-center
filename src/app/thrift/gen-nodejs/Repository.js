//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('woody_js/src/client/gen');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var domain_ttypes = require('./domain_types');


var ttypes = require('./domain_config_types');
//HELPER FUNCTIONS AND STRUCTURES

var Repository_Commit_args = function(args) {
  this.version = null;
  this.commit = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.commit !== undefined && args.commit !== null) {
      this.commit = new ttypes.Commit(args.commit);
    }
  }
};
Repository_Commit_args.prototype = {};
Repository_Commit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.commit = new ttypes.Commit();
        this.commit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Repository_Commit_args.prototype.write = function(output) {
  output.writeStructBegin('Repository_Commit_args');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 1);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.commit !== null && this.commit !== undefined) {
    output.writeFieldBegin('commit', Thrift.Type.STRUCT, 2);
    this.commit.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Repository_Commit_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.VersionNotFound) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.OperationConflict) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.ObsoleteCommitVersion) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
Repository_Commit_result.prototype = {};
Repository_Commit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.VersionNotFound();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.OperationConflict();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.ObsoleteCommitVersion();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Repository_Commit_result.prototype.write = function(output) {
  output.writeStructBegin('Repository_Commit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Repository_Checkout_args = function(args) {
  this.reference = null;
  if (args) {
    if (args.reference !== undefined && args.reference !== null) {
      this.reference = new ttypes.Reference(args.reference);
    }
  }
};
Repository_Checkout_args.prototype = {};
Repository_Checkout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference = new ttypes.Reference();
        this.reference.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Repository_Checkout_args.prototype.write = function(output) {
  output.writeStructBegin('Repository_Checkout_args');
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRUCT, 1);
    this.reference.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Repository_Checkout_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.VersionNotFound) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Snapshot(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
Repository_Checkout_result.prototype = {};
Repository_Checkout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Snapshot();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.VersionNotFound();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Repository_Checkout_result.prototype.write = function(output) {
  output.writeStructBegin('Repository_Checkout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Repository_Pull_args = function(args) {
  this.version = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
Repository_Pull_args.prototype = {};
Repository_Pull_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Repository_Pull_args.prototype.write = function(output) {
  output.writeStructBegin('Repository_Pull_args');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 1);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Repository_Pull_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.VersionNotFound) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [ttypes.Commit]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
Repository_Pull_result.prototype = {};
Repository_Pull_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size35 = 0;
        var _rtmp339;
        this.success = new Map();
        var _ktype36 = 0;
        var _vtype37 = 0;
        _rtmp339 = input.readMapBegin();
        _ktype36 = _rtmp339.ktype;
        _vtype37 = _rtmp339.vtype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var key41 = null;
          var val42 = null;
          key41 = input.readI64();
          val42 = new ttypes.Commit();
          val42.read(input);
          this.success.set(key41, val42);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.VersionNotFound();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Repository_Pull_result.prototype.write = function(output) {
  output.writeStructBegin('Repository_Pull_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, this.success.size);
    var func45 = function(viter44, kiter43) {
      output.writeI64(kiter43);
      viter44.write(output);
    };
    this.success.forEach(func45);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RepositoryClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
RepositoryClient.prototype = {};
RepositoryClient.prototype.seqid = function() { return this._seqid; }
RepositoryClient.prototype.new_seqid = function() { return this._seqid += 1; }
RepositoryClient.prototype.Commit = function(version, commit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Commit(version, commit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Commit(version, commit);
  }
};

RepositoryClient.prototype.send_Commit = function(version, commit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Commit', Thrift.MessageType.CALL, this.seqid());
  var args = new Repository_Commit_args();
  args.version = version;
  args.commit = commit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RepositoryClient.prototype.recv_Commit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Repository_Commit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Commit failed: unknown result');
};
RepositoryClient.prototype.Checkout = function(reference, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Checkout(reference);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Checkout(reference);
  }
};

RepositoryClient.prototype.send_Checkout = function(reference) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Checkout', Thrift.MessageType.CALL, this.seqid());
  var args = new Repository_Checkout_args();
  args.reference = reference;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RepositoryClient.prototype.recv_Checkout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Repository_Checkout_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Checkout failed: unknown result');
};
RepositoryClient.prototype.Pull = function(version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Pull(version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Pull(version);
  }
};

RepositoryClient.prototype.send_Pull = function(version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Pull', Thrift.MessageType.CALL, this.seqid());
  var args = new Repository_Pull_args();
  args.version = version;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

RepositoryClient.prototype.recv_Pull = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Repository_Pull_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Pull failed: unknown result');
};
var RepositoryProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
RepositoryProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

RepositoryProcessor.prototype.process_Commit = function(seqid, input, output) {
  var args = new Repository_Commit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Commit.length === 2) {
    Q.fcall(this._handler.Commit, args.version, args.commit)
      .then(function(result) {
        var result = new Repository_Commit_result({success: result});
        output.writeMessageBegin("Commit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.VersionNotFound || err instanceof ttypes.OperationConflict || err instanceof ttypes.ObsoleteCommitVersion) {
          var result = new Repository_Commit_result(err);
          output.writeMessageBegin("Commit", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Commit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Commit(args.version, args.commit, function (err, result) {
      if (err == null || err instanceof ttypes.VersionNotFound || err instanceof ttypes.OperationConflict || err instanceof ttypes.ObsoleteCommitVersion) {
        var result = new Repository_Commit_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Commit", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Commit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RepositoryProcessor.prototype.process_Checkout = function(seqid, input, output) {
  var args = new Repository_Checkout_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Checkout.length === 1) {
    Q.fcall(this._handler.Checkout, args.reference)
      .then(function(result) {
        var result = new Repository_Checkout_result({success: result});
        output.writeMessageBegin("Checkout", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.VersionNotFound) {
          var result = new Repository_Checkout_result(err);
          output.writeMessageBegin("Checkout", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Checkout", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Checkout(args.reference, function (err, result) {
      if (err == null || err instanceof ttypes.VersionNotFound) {
        var result = new Repository_Checkout_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Checkout", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Checkout", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

RepositoryProcessor.prototype.process_Pull = function(seqid, input, output) {
  var args = new Repository_Pull_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Pull.length === 1) {
    Q.fcall(this._handler.Pull, args.version)
      .then(function(result) {
        var result = new Repository_Pull_result({success: result});
        output.writeMessageBegin("Pull", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.VersionNotFound) {
          var result = new Repository_Pull_result(err);
          output.writeMessageBegin("Pull", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Pull", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Pull(args.version, function (err, result) {
      if (err == null || err instanceof ttypes.VersionNotFound) {
        var result = new Repository_Pull_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Pull", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Pull", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

