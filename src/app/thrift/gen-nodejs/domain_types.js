//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('woody_js/dist/thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');
var msgpack_ttypes = require('./msgpack_types');
var json_ttypes = require('./json_types');


var ttypes = module.exports = {};
ttypes.OnHoldExpiration = {
  'cancel' : 0,
  'capture' : 1
};
ttypes.RiskScore = {
  'low' : 1,
  'high' : 100,
  'fatal' : 9999
};
ttypes.CategoryType = {
  'test' : 0,
  'live' : 1
};
ttypes.PayoutMethod = {
  'russian_bank_account' : 0,
  'international_bank_account' : 1
};
ttypes.Residence = {
  'ABH' : 0,
  'AUS' : 1,
  'AUT' : 2,
  'AZE' : 3,
  'ALB' : 4,
  'DZA' : 5,
  'ASM' : 6,
  'AIA' : 7,
  'AGO' : 8,
  'AND' : 9,
  'ATA' : 10,
  'ATG' : 11,
  'ARG' : 12,
  'ARM' : 13,
  'ABW' : 14,
  'AFG' : 15,
  'BHS' : 16,
  'BGD' : 17,
  'BRB' : 18,
  'BHR' : 19,
  'BLR' : 20,
  'BLZ' : 21,
  'BEL' : 22,
  'BEN' : 23,
  'BMU' : 24,
  'BGR' : 25,
  'BOL' : 26,
  'BES' : 27,
  'BIH' : 28,
  'BWA' : 29,
  'BRA' : 30,
  'IOT' : 31,
  'BRN' : 32,
  'BFA' : 33,
  'BDI' : 34,
  'BTN' : 35,
  'VUT' : 36,
  'HUN' : 37,
  'VEN' : 38,
  'VGB' : 39,
  'VIR' : 40,
  'VNM' : 41,
  'GAB' : 42,
  'HTI' : 43,
  'GUY' : 44,
  'GMB' : 45,
  'GHA' : 46,
  'GLP' : 47,
  'GTM' : 48,
  'GIN' : 49,
  'GNB' : 50,
  'DEU' : 51,
  'GGY' : 52,
  'GIB' : 53,
  'HND' : 54,
  'HKG' : 55,
  'GRD' : 56,
  'GRL' : 57,
  'GRC' : 58,
  'GEO' : 59,
  'GUM' : 60,
  'DNK' : 61,
  'JEY' : 62,
  'DJI' : 63,
  'DMA' : 64,
  'DOM' : 65,
  'EGY' : 66,
  'ZMB' : 67,
  'ESH' : 68,
  'ZWE' : 69,
  'ISR' : 70,
  'IND' : 71,
  'IDN' : 72,
  'JOR' : 73,
  'IRQ' : 74,
  'IRN' : 75,
  'IRL' : 76,
  'ISL' : 77,
  'ESP' : 78,
  'ITA' : 79,
  'YEM' : 80,
  'CPV' : 81,
  'KAZ' : 82,
  'KHM' : 83,
  'CMR' : 84,
  'CAN' : 85,
  'QAT' : 86,
  'KEN' : 87,
  'CYP' : 88,
  'KGZ' : 89,
  'KIR' : 90,
  'CHN' : 91,
  'CCK' : 92,
  'COL' : 93,
  'COM' : 94,
  'COG' : 95,
  'COD' : 96,
  'PRK' : 97,
  'KOR' : 98,
  'CRI' : 99,
  'CIV' : 100,
  'CUB' : 101,
  'KWT' : 102,
  'CUW' : 103,
  'LAO' : 104,
  'LVA' : 105,
  'LSO' : 106,
  'LBN' : 107,
  'LBY' : 108,
  'LBR' : 109,
  'LIE' : 110,
  'LTU' : 111,
  'LUX' : 112,
  'MUS' : 113,
  'MRT' : 114,
  'MDG' : 115,
  'MYT' : 116,
  'MAC' : 117,
  'MWI' : 118,
  'MYS' : 119,
  'MLI' : 120,
  'UMI' : 121,
  'MDV' : 122,
  'MLT' : 123,
  'MAR' : 124,
  'MTQ' : 125,
  'MHL' : 126,
  'MEX' : 127,
  'FSM' : 128,
  'MOZ' : 129,
  'MDA' : 130,
  'MCO' : 131,
  'MNG' : 132,
  'MSR' : 133,
  'MMR' : 134,
  'NAM' : 135,
  'NRU' : 136,
  'NPL' : 137,
  'NER' : 138,
  'NGA' : 139,
  'NLD' : 140,
  'NIC' : 141,
  'NIU' : 142,
  'NZL' : 143,
  'NCL' : 144,
  'NOR' : 145,
  'ARE' : 146,
  'OMN' : 147,
  'BVT' : 148,
  'IMN' : 149,
  'NFK' : 150,
  'CXR' : 151,
  'HMD' : 152,
  'CYM' : 153,
  'COK' : 154,
  'TCA' : 155,
  'PAK' : 156,
  'PLW' : 157,
  'PSE' : 158,
  'PAN' : 159,
  'VAT' : 160,
  'PNG' : 161,
  'PRY' : 162,
  'PER' : 163,
  'PCN' : 164,
  'POL' : 165,
  'PRT' : 166,
  'PRI' : 167,
  'MKD' : 168,
  'REU' : 169,
  'RUS' : 170,
  'RWA' : 171,
  'ROU' : 172,
  'WSM' : 173,
  'SMR' : 174,
  'STP' : 175,
  'SAU' : 176,
  'SWZ' : 177,
  'SHN' : 178,
  'MNP' : 179,
  'BLM' : 180,
  'MAF' : 181,
  'SEN' : 182,
  'VCT' : 183,
  'KNA' : 184,
  'LCA' : 185,
  'SPM' : 186,
  'SRB' : 187,
  'SYC' : 188,
  'SGP' : 189,
  'SXM' : 190,
  'SYR' : 191,
  'SVK' : 192,
  'SVN' : 193,
  'GBR' : 194,
  'USA' : 195,
  'SLB' : 196,
  'SOM' : 197,
  'SDN' : 198,
  'SUR' : 199,
  'SLE' : 200,
  'TJK' : 201,
  'THA' : 202,
  'TWN' : 203,
  'TZA' : 204,
  'TLS' : 205,
  'TGO' : 206,
  'TKL' : 207,
  'TON' : 208,
  'TTO' : 209,
  'TUV' : 210,
  'TUN' : 211,
  'TKM' : 212,
  'TUR' : 213,
  'UGA' : 214,
  'UZB' : 215,
  'UKR' : 216,
  'WLF' : 217,
  'URY' : 218,
  'FRO' : 219,
  'FJI' : 220,
  'PHL' : 221,
  'FIN' : 222,
  'FLK' : 223,
  'FRA' : 224,
  'GUF' : 225,
  'PYF' : 226,
  'ATF' : 227,
  'HRV' : 228,
  'CAF' : 229,
  'TCD' : 230,
  'MNE' : 231,
  'CZE' : 232,
  'CHL' : 233,
  'CHE' : 234,
  'SWE' : 235,
  'SJM' : 236,
  'LKA' : 237,
  'ECU' : 238,
  'GNQ' : 239,
  'ALA' : 240,
  'SLV' : 241,
  'ERI' : 242,
  'EST' : 243,
  'ETH' : 244,
  'ZAF' : 245,
  'SGS' : 246,
  'OST' : 247,
  'SSD' : 248,
  'JAM' : 249,
  'JPN' : 250
};
ttypes.BankCardPaymentSystem = {
  'visa' : 0,
  'mastercard' : 1,
  'visaelectron' : 2,
  'maestro' : 3,
  'forbrugsforeningen' : 4,
  'dankort' : 5,
  'amex' : 6,
  'dinersclub' : 7,
  'discover' : 8,
  'unionpay' : 9,
  'jcb' : 10,
  'nspkmir' : 11
};
ttypes.BankCardTokenProvider = {
  'applepay' : 0,
  'googlepay' : 1,
  'samsungpay' : 2
};
ttypes.TerminalPaymentProvider = {
  'euroset' : 0
};
ttypes.DigitalWalletProvider = {
  'qiwi' : 0
};
ttypes.MerchantCashFlowAccount = {
  'settlement' : 0,
  'guarantee' : 1,
  'payout' : 2
};
ttypes.ProviderCashFlowAccount = {
  'settlement' : 0
};
ttypes.SystemCashFlowAccount = {
  'settlement' : 0
};
ttypes.ExternalCashFlowAccount = {
  'income' : 0,
  'outcome' : 1
};
ttypes.CashFlowConstant = {
  'operation_amount' : 1
};
ttypes.RoundingMethod = {
  'round_half_towards_zero' : 0,
  'round_half_away_from_zero' : 1
};
ttypes.PaymentInstitutionRealm = {
  'test' : 0,
  'live' : 1
};
var ContactInfo = module.exports.ContactInfo = function(args) {
  this.phone_number = null;
  this.email = null;
  if (args) {
    if (args.phone_number !== undefined && args.phone_number !== null) {
      this.phone_number = args.phone_number;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
ContactInfo.prototype = {};
ContactInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.phone_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactInfo.prototype.write = function(output) {
  output.writeStructBegin('ContactInfo');
  if (this.phone_number !== null && this.phone_number !== undefined) {
    output.writeFieldBegin('phone_number', Thrift.Type.STRING, 1);
    output.writeString(this.phone_number);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OperationFailure = module.exports.OperationFailure = function(args) {
  this.operation_timeout = null;
  this.failure = null;
  if (args) {
    if (args.operation_timeout !== undefined && args.operation_timeout !== null) {
      this.operation_timeout = new ttypes.OperationTimeout(args.operation_timeout);
    }
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = new ttypes.Failure(args.failure);
    }
  }
};
OperationFailure.prototype = {};
OperationFailure.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_timeout = new ttypes.OperationTimeout();
        this.operation_timeout.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.Failure();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationFailure.prototype.write = function(output) {
  output.writeStructBegin('OperationFailure');
  if (this.operation_timeout !== null && this.operation_timeout !== undefined) {
    output.writeFieldBegin('operation_timeout', Thrift.Type.STRUCT, 1);
    this.operation_timeout.write(output);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 2);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OperationTimeout = module.exports.OperationTimeout = function(args) {
};
OperationTimeout.prototype = {};
OperationTimeout.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationTimeout.prototype.write = function(output) {
  output.writeStructBegin('OperationTimeout');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Failure = module.exports.Failure = function(args) {
  this.code = null;
  this.reason = null;
  this.sub = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.sub !== undefined && args.sub !== null) {
      this.sub = new ttypes.SubFailure(args.sub);
    }
  }
};
Failure.prototype = {};
Failure.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sub = new ttypes.SubFailure();
        this.sub.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Failure.prototype.write = function(output) {
  output.writeStructBegin('Failure');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.sub !== null && this.sub !== undefined) {
    output.writeFieldBegin('sub', Thrift.Type.STRUCT, 3);
    this.sub.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SubFailure = module.exports.SubFailure = function(args) {
  this.code = null;
  this.sub = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.sub !== undefined && args.sub !== null) {
      this.sub = new ttypes.SubFailure(args.sub);
    }
  }
};
SubFailure.prototype = {};
SubFailure.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sub = new ttypes.SubFailure();
        this.sub.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SubFailure.prototype.write = function(output) {
  output.writeStructBegin('SubFailure');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.sub !== null && this.sub !== undefined) {
    output.writeFieldBegin('sub', Thrift.Type.STRUCT, 2);
    this.sub.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Cash = module.exports.Cash = function(args) {
  this.amount = null;
  this.currency = null;
  if (args) {
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field amount is unset!');
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = new ttypes.CurrencyRef(args.currency);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currency is unset!');
    }
  }
};
Cash.prototype = {};
Cash.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.amount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.currency = new ttypes.CurrencyRef();
        this.currency.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cash.prototype.write = function(output) {
  output.writeStructBegin('Cash');
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I64, 1);
    output.writeI64(this.amount);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRUCT, 2);
    this.currency.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransactionInfo = module.exports.TransactionInfo = function(args) {
  this.id = null;
  this.timestamp = null;
  this.extra = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = Thrift.copyMap(args.extra, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field extra is unset!');
    }
  }
};
TransactionInfo.prototype = {};
TransactionInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.extra = new Map();
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.extra.set(key6, val7);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionInfo.prototype.write = function(output) {
  output.writeStructBegin('TransactionInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, this.extra.size);
    var func10 = function(viter9, kiter8) {
      output.writeString(kiter8);
      output.writeString(viter9);
    };
    this.extra.forEach(func10);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoice = module.exports.Invoice = function(args) {
  this.id = null;
  this.owner_id = null;
  this.party_revision = null;
  this.shop_id = null;
  this.created_at = null;
  this.status = null;
  this.details = null;
  this.due = null;
  this.cost = null;
  this.context = null;
  this.template_id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field owner_id is unset!');
    }
    if (args.party_revision !== undefined && args.party_revision !== null) {
      this.party_revision = args.party_revision;
    }
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.InvoiceStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new ttypes.InvoiceDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
    if (args.due !== undefined && args.due !== null) {
      this.due = args.due;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field due is unset!');
    }
    if (args.cost !== undefined && args.cost !== null) {
      this.cost = new ttypes.Cash(args.cost);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cost is unset!');
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new base_ttypes.Content(args.context);
    }
    if (args.template_id !== undefined && args.template_id !== null) {
      this.template_id = args.template_id;
    }
  }
};
Invoice.prototype = {};
Invoice.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.owner_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.party_revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.InvoiceStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.InvoiceDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.due = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.cost = new ttypes.Cash();
        this.cost.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new base_ttypes.Content();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.template_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoice.prototype.write = function(output) {
  output.writeStructBegin('Invoice');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.STRING, 2);
    output.writeString(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.party_revision !== null && this.party_revision !== undefined) {
    output.writeFieldBegin('party_revision', Thrift.Type.I64, 13);
    output.writeI64(this.party_revision);
    output.writeFieldEnd();
  }
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 3);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 4);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 6);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 7);
    this.details.write(output);
    output.writeFieldEnd();
  }
  if (this.due !== null && this.due !== undefined) {
    output.writeFieldBegin('due', Thrift.Type.STRING, 8);
    output.writeString(this.due);
    output.writeFieldEnd();
  }
  if (this.cost !== null && this.cost !== undefined) {
    output.writeFieldBegin('cost', Thrift.Type.STRUCT, 10);
    this.cost.write(output);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 11);
    this.context.write(output);
    output.writeFieldEnd();
  }
  if (this.template_id !== null && this.template_id !== undefined) {
    output.writeFieldBegin('template_id', Thrift.Type.STRING, 12);
    output.writeString(this.template_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceDetails = module.exports.InvoiceDetails = function(args) {
  this.product = null;
  this.description = null;
  this.cart = null;
  if (args) {
    if (args.product !== undefined && args.product !== null) {
      this.product = args.product;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field product is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.cart !== undefined && args.cart !== null) {
      this.cart = new ttypes.InvoiceCart(args.cart);
    }
  }
};
InvoiceDetails.prototype = {};
InvoiceDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.product = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cart = new ttypes.InvoiceCart();
        this.cart.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceDetails.prototype.write = function(output) {
  output.writeStructBegin('InvoiceDetails');
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRING, 1);
    output.writeString(this.product);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.cart !== null && this.cart !== undefined) {
    output.writeFieldBegin('cart', Thrift.Type.STRUCT, 3);
    this.cart.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceCart = module.exports.InvoiceCart = function(args) {
  this.lines = null;
  if (args) {
    if (args.lines !== undefined && args.lines !== null) {
      this.lines = Thrift.copyList(args.lines, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lines is unset!');
    }
  }
};
InvoiceCart.prototype = {};
InvoiceCart.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size11 = 0;
        var _rtmp315;
        this.lines = [];
        var _etype14 = 0;
        _rtmp315 = input.readListBegin();
        _etype14 = _rtmp315.etype;
        _size11 = _rtmp315.size;
        for (var _i16 = 0; _i16 < _size11; ++_i16)
        {
          var elem17 = null;
          elem17 = new ttypes.InvoiceLine();
          elem17.read(input);
          this.lines.push(elem17);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceCart.prototype.write = function(output) {
  output.writeStructBegin('InvoiceCart');
  if (this.lines !== null && this.lines !== undefined) {
    output.writeFieldBegin('lines', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.lines.length);
    for (var iter18 in this.lines)
    {
      if (this.lines.hasOwnProperty(iter18))
      {
        iter18 = this.lines[iter18];
        iter18.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceLine = module.exports.InvoiceLine = function(args) {
  this.product = null;
  this.quantity = null;
  this.price = null;
  this.metadata = null;
  if (args) {
    if (args.product !== undefined && args.product !== null) {
      this.product = args.product;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field product is unset!');
    }
    if (args.quantity !== undefined && args.quantity !== null) {
      this.quantity = args.quantity;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field quantity is unset!');
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = new ttypes.Cash(args.price);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field price is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = Thrift.copyMap(args.metadata, [msgpack_ttypes.Value]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
  }
};
InvoiceLine.prototype = {};
InvoiceLine.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.product = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.quantity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.price = new ttypes.Cash();
        this.price.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size19 = 0;
        var _rtmp323;
        this.metadata = new Map();
        var _ktype20 = 0;
        var _vtype21 = 0;
        _rtmp323 = input.readMapBegin();
        _ktype20 = _rtmp323.ktype;
        _vtype21 = _rtmp323.vtype;
        _size19 = _rtmp323.size;
        for (var _i24 = 0; _i24 < _size19; ++_i24)
        {
          var key25 = null;
          var val26 = null;
          key25 = input.readString();
          val26 = new msgpack_ttypes.Value();
          val26.read(input);
          this.metadata.set(key25, val26);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceLine.prototype.write = function(output) {
  output.writeStructBegin('InvoiceLine');
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRING, 1);
    output.writeString(this.product);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.I32, 2);
    output.writeI32(this.quantity);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRUCT, 3);
    this.price.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, this.metadata.size);
    var func29 = function(viter28, kiter27) {
      output.writeString(kiter27);
      viter28.write(output);
    };
    this.metadata.forEach(func29);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceUnpaid = module.exports.InvoiceUnpaid = function(args) {
};
InvoiceUnpaid.prototype = {};
InvoiceUnpaid.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceUnpaid.prototype.write = function(output) {
  output.writeStructBegin('InvoiceUnpaid');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaid = module.exports.InvoicePaid = function(args) {
};
InvoicePaid.prototype = {};
InvoicePaid.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaid.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaid');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceCancelled = module.exports.InvoiceCancelled = function(args) {
  this.details = null;
  if (args) {
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
InvoiceCancelled.prototype = {};
InvoiceCancelled.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceCancelled.prototype.write = function(output) {
  output.writeStructBegin('InvoiceCancelled');
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 1);
    output.writeString(this.details);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceFulfilled = module.exports.InvoiceFulfilled = function(args) {
  this.details = null;
  if (args) {
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
  }
};
InvoiceFulfilled.prototype = {};
InvoiceFulfilled.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceFulfilled.prototype.write = function(output) {
  output.writeStructBegin('InvoiceFulfilled');
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 1);
    output.writeString(this.details);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceStatus = module.exports.InvoiceStatus = function(args) {
  this.unpaid = null;
  this.paid = null;
  this.cancelled = null;
  this.fulfilled = null;
  if (args) {
    if (args.unpaid !== undefined && args.unpaid !== null) {
      this.unpaid = new ttypes.InvoiceUnpaid(args.unpaid);
    }
    if (args.paid !== undefined && args.paid !== null) {
      this.paid = new ttypes.InvoicePaid(args.paid);
    }
    if (args.cancelled !== undefined && args.cancelled !== null) {
      this.cancelled = new ttypes.InvoiceCancelled(args.cancelled);
    }
    if (args.fulfilled !== undefined && args.fulfilled !== null) {
      this.fulfilled = new ttypes.InvoiceFulfilled(args.fulfilled);
    }
  }
};
InvoiceStatus.prototype = {};
InvoiceStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.unpaid = new ttypes.InvoiceUnpaid();
        this.unpaid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paid = new ttypes.InvoicePaid();
        this.paid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cancelled = new ttypes.InvoiceCancelled();
        this.cancelled.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.fulfilled = new ttypes.InvoiceFulfilled();
        this.fulfilled.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceStatus.prototype.write = function(output) {
  output.writeStructBegin('InvoiceStatus');
  if (this.unpaid !== null && this.unpaid !== undefined) {
    output.writeFieldBegin('unpaid', Thrift.Type.STRUCT, 1);
    this.unpaid.write(output);
    output.writeFieldEnd();
  }
  if (this.paid !== null && this.paid !== undefined) {
    output.writeFieldBegin('paid', Thrift.Type.STRUCT, 2);
    this.paid.write(output);
    output.writeFieldEnd();
  }
  if (this.cancelled !== null && this.cancelled !== undefined) {
    output.writeFieldBegin('cancelled', Thrift.Type.STRUCT, 3);
    this.cancelled.write(output);
    output.writeFieldEnd();
  }
  if (this.fulfilled !== null && this.fulfilled !== undefined) {
    output.writeFieldBegin('fulfilled', Thrift.Type.STRUCT, 4);
    this.fulfilled.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePayment = module.exports.InvoicePayment = function(args) {
  this.id = null;
  this.created_at = null;
  this.domain_revision = null;
  this.party_revision = null;
  this.status = null;
  this.payer = null;
  this.cost = null;
  this.flow = null;
  this.context = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.domain_revision !== undefined && args.domain_revision !== null) {
      this.domain_revision = args.domain_revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field domain_revision is unset!');
    }
    if (args.party_revision !== undefined && args.party_revision !== null) {
      this.party_revision = args.party_revision;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.InvoicePaymentStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.payer !== undefined && args.payer !== null) {
      this.payer = new ttypes.Payer(args.payer);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payer is unset!');
    }
    if (args.cost !== undefined && args.cost !== null) {
      this.cost = new ttypes.Cash(args.cost);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cost is unset!');
    }
    if (args.flow !== undefined && args.flow !== null) {
      this.flow = new ttypes.InvoicePaymentFlow(args.flow);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field flow is unset!');
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new base_ttypes.Content(args.context);
    }
  }
};
InvoicePayment.prototype = {};
InvoicePayment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.domain_revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.party_revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.InvoicePaymentStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.payer = new ttypes.Payer();
        this.payer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.cost = new ttypes.Cash();
        this.cost.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.flow = new ttypes.InvoicePaymentFlow();
        this.flow.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new base_ttypes.Content();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePayment.prototype.write = function(output) {
  output.writeStructBegin('InvoicePayment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 2);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.domain_revision !== null && this.domain_revision !== undefined) {
    output.writeFieldBegin('domain_revision', Thrift.Type.I64, 10);
    output.writeI64(this.domain_revision);
    output.writeFieldEnd();
  }
  if (this.party_revision !== null && this.party_revision !== undefined) {
    output.writeFieldBegin('party_revision', Thrift.Type.I64, 15);
    output.writeI64(this.party_revision);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 3);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.payer !== null && this.payer !== undefined) {
    output.writeFieldBegin('payer', Thrift.Type.STRUCT, 14);
    this.payer.write(output);
    output.writeFieldEnd();
  }
  if (this.cost !== null && this.cost !== undefined) {
    output.writeFieldBegin('cost', Thrift.Type.STRUCT, 8);
    this.cost.write(output);
    output.writeFieldEnd();
  }
  if (this.flow !== null && this.flow !== undefined) {
    output.writeFieldBegin('flow', Thrift.Type.STRUCT, 13);
    this.flow.write(output);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 6);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentPending = module.exports.InvoicePaymentPending = function(args) {
};
InvoicePaymentPending.prototype = {};
InvoicePaymentPending.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentPending.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentPending');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentProcessed = module.exports.InvoicePaymentProcessed = function(args) {
};
InvoicePaymentProcessed.prototype = {};
InvoicePaymentProcessed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentProcessed.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentProcessed');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentCaptured = module.exports.InvoicePaymentCaptured = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
InvoicePaymentCaptured.prototype = {};
InvoicePaymentCaptured.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentCaptured.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentCaptured');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentCancelled = module.exports.InvoicePaymentCancelled = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
InvoicePaymentCancelled.prototype = {};
InvoicePaymentCancelled.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentCancelled.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentCancelled');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefunded = module.exports.InvoicePaymentRefunded = function(args) {
};
InvoicePaymentRefunded.prototype = {};
InvoicePaymentRefunded.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefunded.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefunded');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentFailed = module.exports.InvoicePaymentFailed = function(args) {
  this.failure = null;
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = new ttypes.OperationFailure(args.failure);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field failure is unset!');
    }
  }
};
InvoicePaymentFailed.prototype = {};
InvoicePaymentFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.OperationFailure();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentFailed.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentFailed');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplate = module.exports.InvoiceTemplate = function(args) {
  this.id = null;
  this.owner_id = null;
  this.shop_id = null;
  this.invoice_lifetime = null;
  this.product = null;
  this.description = null;
  this.details = null;
  this.context = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field owner_id is unset!');
    }
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.invoice_lifetime !== undefined && args.invoice_lifetime !== null) {
      this.invoice_lifetime = new ttypes.LifetimeInterval(args.invoice_lifetime);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field invoice_lifetime is unset!');
    }
    if (args.product !== undefined && args.product !== null) {
      this.product = args.product;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field product is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new ttypes.InvoiceTemplateDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new base_ttypes.Content(args.context);
    }
  }
};
InvoiceTemplate.prototype = {};
InvoiceTemplate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.owner_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_lifetime = new ttypes.LifetimeInterval();
        this.invoice_lifetime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.product = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.InvoiceTemplateDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new base_ttypes.Content();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplate.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplate');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.STRING, 2);
    output.writeString(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 3);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.invoice_lifetime !== null && this.invoice_lifetime !== undefined) {
    output.writeFieldBegin('invoice_lifetime', Thrift.Type.STRUCT, 5);
    this.invoice_lifetime.write(output);
    output.writeFieldEnd();
  }
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRING, 9);
    output.writeString(this.product);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 10);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 8);
    this.details.write(output);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 7);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateDetails = module.exports.InvoiceTemplateDetails = function(args) {
  this.cart = null;
  this.product = null;
  if (args) {
    if (args.cart !== undefined && args.cart !== null) {
      this.cart = new ttypes.InvoiceCart(args.cart);
    }
    if (args.product !== undefined && args.product !== null) {
      this.product = new ttypes.InvoiceTemplateProduct(args.product);
    }
  }
};
InvoiceTemplateDetails.prototype = {};
InvoiceTemplateDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cart = new ttypes.InvoiceCart();
        this.cart.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.product = new ttypes.InvoiceTemplateProduct();
        this.product.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateDetails.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateDetails');
  if (this.cart !== null && this.cart !== undefined) {
    output.writeFieldBegin('cart', Thrift.Type.STRUCT, 1);
    this.cart.write(output);
    output.writeFieldEnd();
  }
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRUCT, 2);
    this.product.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateProduct = module.exports.InvoiceTemplateProduct = function(args) {
  this.product = null;
  this.price = null;
  this.metadata = null;
  if (args) {
    if (args.product !== undefined && args.product !== null) {
      this.product = args.product;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field product is unset!');
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = new ttypes.InvoiceTemplateProductPrice(args.price);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field price is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = Thrift.copyMap(args.metadata, [msgpack_ttypes.Value]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
  }
};
InvoiceTemplateProduct.prototype = {};
InvoiceTemplateProduct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.product = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.price = new ttypes.InvoiceTemplateProductPrice();
        this.price.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size30 = 0;
        var _rtmp334;
        this.metadata = new Map();
        var _ktype31 = 0;
        var _vtype32 = 0;
        _rtmp334 = input.readMapBegin();
        _ktype31 = _rtmp334.ktype;
        _vtype32 = _rtmp334.vtype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var key36 = null;
          var val37 = null;
          key36 = input.readString();
          val37 = new msgpack_ttypes.Value();
          val37.read(input);
          this.metadata.set(key36, val37);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateProduct.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateProduct');
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRING, 1);
    output.writeString(this.product);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRUCT, 2);
    this.price.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, this.metadata.size);
    var func40 = function(viter39, kiter38) {
      output.writeString(kiter38);
      viter39.write(output);
    };
    this.metadata.forEach(func40);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateProductPrice = module.exports.InvoiceTemplateProductPrice = function(args) {
  this.fixed = null;
  this.range = null;
  this.unlim = null;
  if (args) {
    if (args.fixed !== undefined && args.fixed !== null) {
      this.fixed = new ttypes.Cash(args.fixed);
    }
    if (args.range !== undefined && args.range !== null) {
      this.range = new ttypes.CashRange(args.range);
    }
    if (args.unlim !== undefined && args.unlim !== null) {
      this.unlim = new ttypes.InvoiceTemplateCostUnlimited(args.unlim);
    }
  }
};
InvoiceTemplateProductPrice.prototype = {};
InvoiceTemplateProductPrice.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fixed = new ttypes.Cash();
        this.fixed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.CashRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.unlim = new ttypes.InvoiceTemplateCostUnlimited();
        this.unlim.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateProductPrice.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateProductPrice');
  if (this.fixed !== null && this.fixed !== undefined) {
    output.writeFieldBegin('fixed', Thrift.Type.STRUCT, 1);
    this.fixed.write(output);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 2);
    this.range.write(output);
    output.writeFieldEnd();
  }
  if (this.unlim !== null && this.unlim !== undefined) {
    output.writeFieldBegin('unlim', Thrift.Type.STRUCT, 3);
    this.unlim.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateCostUnlimited = module.exports.InvoiceTemplateCostUnlimited = function(args) {
};
InvoiceTemplateCostUnlimited.prototype = {};
InvoiceTemplateCostUnlimited.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateCostUnlimited.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateCostUnlimited');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentStatus = module.exports.InvoicePaymentStatus = function(args) {
  this.pending = null;
  this.processed = null;
  this.captured = null;
  this.cancelled = null;
  this.refunded = null;
  this.failed = null;
  if (args) {
    if (args.pending !== undefined && args.pending !== null) {
      this.pending = new ttypes.InvoicePaymentPending(args.pending);
    }
    if (args.processed !== undefined && args.processed !== null) {
      this.processed = new ttypes.InvoicePaymentProcessed(args.processed);
    }
    if (args.captured !== undefined && args.captured !== null) {
      this.captured = new ttypes.InvoicePaymentCaptured(args.captured);
    }
    if (args.cancelled !== undefined && args.cancelled !== null) {
      this.cancelled = new ttypes.InvoicePaymentCancelled(args.cancelled);
    }
    if (args.refunded !== undefined && args.refunded !== null) {
      this.refunded = new ttypes.InvoicePaymentRefunded(args.refunded);
    }
    if (args.failed !== undefined && args.failed !== null) {
      this.failed = new ttypes.InvoicePaymentFailed(args.failed);
    }
  }
};
InvoicePaymentStatus.prototype = {};
InvoicePaymentStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending = new ttypes.InvoicePaymentPending();
        this.pending.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.processed = new ttypes.InvoicePaymentProcessed();
        this.processed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.captured = new ttypes.InvoicePaymentCaptured();
        this.captured.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.cancelled = new ttypes.InvoicePaymentCancelled();
        this.cancelled.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.refunded = new ttypes.InvoicePaymentRefunded();
        this.refunded.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.failed = new ttypes.InvoicePaymentFailed();
        this.failed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentStatus.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentStatus');
  if (this.pending !== null && this.pending !== undefined) {
    output.writeFieldBegin('pending', Thrift.Type.STRUCT, 1);
    this.pending.write(output);
    output.writeFieldEnd();
  }
  if (this.processed !== null && this.processed !== undefined) {
    output.writeFieldBegin('processed', Thrift.Type.STRUCT, 4);
    this.processed.write(output);
    output.writeFieldEnd();
  }
  if (this.captured !== null && this.captured !== undefined) {
    output.writeFieldBegin('captured', Thrift.Type.STRUCT, 2);
    this.captured.write(output);
    output.writeFieldEnd();
  }
  if (this.cancelled !== null && this.cancelled !== undefined) {
    output.writeFieldBegin('cancelled', Thrift.Type.STRUCT, 5);
    this.cancelled.write(output);
    output.writeFieldEnd();
  }
  if (this.refunded !== null && this.refunded !== undefined) {
    output.writeFieldBegin('refunded', Thrift.Type.STRUCT, 6);
    this.refunded.write(output);
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.STRUCT, 3);
    this.failed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TargetInvoicePaymentStatus = module.exports.TargetInvoicePaymentStatus = function(args) {
  this.processed = null;
  this.captured = null;
  this.cancelled = null;
  this.refunded = null;
  if (args) {
    if (args.processed !== undefined && args.processed !== null) {
      this.processed = new ttypes.InvoicePaymentProcessed(args.processed);
    }
    if (args.captured !== undefined && args.captured !== null) {
      this.captured = new ttypes.InvoicePaymentCaptured(args.captured);
    }
    if (args.cancelled !== undefined && args.cancelled !== null) {
      this.cancelled = new ttypes.InvoicePaymentCancelled(args.cancelled);
    }
    if (args.refunded !== undefined && args.refunded !== null) {
      this.refunded = new ttypes.InvoicePaymentRefunded(args.refunded);
    }
  }
};
TargetInvoicePaymentStatus.prototype = {};
TargetInvoicePaymentStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.processed = new ttypes.InvoicePaymentProcessed();
        this.processed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.captured = new ttypes.InvoicePaymentCaptured();
        this.captured.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cancelled = new ttypes.InvoicePaymentCancelled();
        this.cancelled.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.refunded = new ttypes.InvoicePaymentRefunded();
        this.refunded.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TargetInvoicePaymentStatus.prototype.write = function(output) {
  output.writeStructBegin('TargetInvoicePaymentStatus');
  if (this.processed !== null && this.processed !== undefined) {
    output.writeFieldBegin('processed', Thrift.Type.STRUCT, 1);
    this.processed.write(output);
    output.writeFieldEnd();
  }
  if (this.captured !== null && this.captured !== undefined) {
    output.writeFieldBegin('captured', Thrift.Type.STRUCT, 2);
    this.captured.write(output);
    output.writeFieldEnd();
  }
  if (this.cancelled !== null && this.cancelled !== undefined) {
    output.writeFieldBegin('cancelled', Thrift.Type.STRUCT, 3);
    this.cancelled.write(output);
    output.writeFieldEnd();
  }
  if (this.refunded !== null && this.refunded !== undefined) {
    output.writeFieldBegin('refunded', Thrift.Type.STRUCT, 4);
    this.refunded.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Payer = module.exports.Payer = function(args) {
  this.payment_resource = null;
  this.customer = null;
  if (args) {
    if (args.payment_resource !== undefined && args.payment_resource !== null) {
      this.payment_resource = new ttypes.PaymentResourcePayer(args.payment_resource);
    }
    if (args.customer !== undefined && args.customer !== null) {
      this.customer = new ttypes.CustomerPayer(args.customer);
    }
  }
};
Payer.prototype = {};
Payer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_resource = new ttypes.PaymentResourcePayer();
        this.payment_resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer = new ttypes.CustomerPayer();
        this.customer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Payer.prototype.write = function(output) {
  output.writeStructBegin('Payer');
  if (this.payment_resource !== null && this.payment_resource !== undefined) {
    output.writeFieldBegin('payment_resource', Thrift.Type.STRUCT, 1);
    this.payment_resource.write(output);
    output.writeFieldEnd();
  }
  if (this.customer !== null && this.customer !== undefined) {
    output.writeFieldBegin('customer', Thrift.Type.STRUCT, 2);
    this.customer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentResourcePayer = module.exports.PaymentResourcePayer = function(args) {
  this.resource = null;
  this.contact_info = null;
  if (args) {
    if (args.resource !== undefined && args.resource !== null) {
      this.resource = new ttypes.DisposablePaymentResource(args.resource);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resource is unset!');
    }
    if (args.contact_info !== undefined && args.contact_info !== null) {
      this.contact_info = new ttypes.ContactInfo(args.contact_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contact_info is unset!');
    }
  }
};
PaymentResourcePayer.prototype = {};
PaymentResourcePayer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.resource = new ttypes.DisposablePaymentResource();
        this.resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact_info = new ttypes.ContactInfo();
        this.contact_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentResourcePayer.prototype.write = function(output) {
  output.writeStructBegin('PaymentResourcePayer');
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRUCT, 1);
    this.resource.write(output);
    output.writeFieldEnd();
  }
  if (this.contact_info !== null && this.contact_info !== undefined) {
    output.writeFieldBegin('contact_info', Thrift.Type.STRUCT, 2);
    this.contact_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerPayer = module.exports.CustomerPayer = function(args) {
  this.customer_id = null;
  this.customer_binding_id = null;
  this.rec_payment_tool_id = null;
  this.payment_tool = null;
  this.contact_info = null;
  if (args) {
    if (args.customer_id !== undefined && args.customer_id !== null) {
      this.customer_id = args.customer_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customer_id is unset!');
    }
    if (args.customer_binding_id !== undefined && args.customer_binding_id !== null) {
      this.customer_binding_id = args.customer_binding_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customer_binding_id is unset!');
    }
    if (args.rec_payment_tool_id !== undefined && args.rec_payment_tool_id !== null) {
      this.rec_payment_tool_id = args.rec_payment_tool_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rec_payment_tool_id is unset!');
    }
    if (args.payment_tool !== undefined && args.payment_tool !== null) {
      this.payment_tool = new ttypes.PaymentTool(args.payment_tool);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_tool is unset!');
    }
    if (args.contact_info !== undefined && args.contact_info !== null) {
      this.contact_info = new ttypes.ContactInfo(args.contact_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contact_info is unset!');
    }
  }
};
CustomerPayer.prototype = {};
CustomerPayer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customer_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.customer_binding_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rec_payment_tool_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_tool = new ttypes.PaymentTool();
        this.payment_tool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact_info = new ttypes.ContactInfo();
        this.contact_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerPayer.prototype.write = function(output) {
  output.writeStructBegin('CustomerPayer');
  if (this.customer_id !== null && this.customer_id !== undefined) {
    output.writeFieldBegin('customer_id', Thrift.Type.STRING, 1);
    output.writeString(this.customer_id);
    output.writeFieldEnd();
  }
  if (this.customer_binding_id !== null && this.customer_binding_id !== undefined) {
    output.writeFieldBegin('customer_binding_id', Thrift.Type.STRING, 2);
    output.writeString(this.customer_binding_id);
    output.writeFieldEnd();
  }
  if (this.rec_payment_tool_id !== null && this.rec_payment_tool_id !== undefined) {
    output.writeFieldBegin('rec_payment_tool_id', Thrift.Type.STRING, 3);
    output.writeString(this.rec_payment_tool_id);
    output.writeFieldEnd();
  }
  if (this.payment_tool !== null && this.payment_tool !== undefined) {
    output.writeFieldBegin('payment_tool', Thrift.Type.STRUCT, 4);
    this.payment_tool.write(output);
    output.writeFieldEnd();
  }
  if (this.contact_info !== null && this.contact_info !== undefined) {
    output.writeFieldBegin('contact_info', Thrift.Type.STRUCT, 5);
    this.contact_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientInfo = module.exports.ClientInfo = function(args) {
  this.ip_address = null;
  this.fingerprint = null;
  if (args) {
    if (args.ip_address !== undefined && args.ip_address !== null) {
      this.ip_address = args.ip_address;
    }
    if (args.fingerprint !== undefined && args.fingerprint !== null) {
      this.fingerprint = args.fingerprint;
    }
  }
};
ClientInfo.prototype = {};
ClientInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ip_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fingerprint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientInfo.prototype.write = function(output) {
  output.writeStructBegin('ClientInfo');
  if (this.ip_address !== null && this.ip_address !== undefined) {
    output.writeFieldBegin('ip_address', Thrift.Type.STRING, 1);
    output.writeString(this.ip_address);
    output.writeFieldEnd();
  }
  if (this.fingerprint !== null && this.fingerprint !== undefined) {
    output.writeFieldBegin('fingerprint', Thrift.Type.STRING, 2);
    output.writeString(this.fingerprint);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentRoute = module.exports.PaymentRoute = function(args) {
  this.provider = null;
  this.terminal = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = new ttypes.ProviderRef(args.provider);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field provider is unset!');
    }
    if (args.terminal !== undefined && args.terminal !== null) {
      this.terminal = new ttypes.TerminalRef(args.terminal);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field terminal is unset!');
    }
  }
};
PaymentRoute.prototype = {};
PaymentRoute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.provider = new ttypes.ProviderRef();
        this.provider.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.terminal = new ttypes.TerminalRef();
        this.terminal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentRoute.prototype.write = function(output) {
  output.writeStructBegin('PaymentRoute');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRUCT, 1);
    this.provider.write(output);
    output.writeFieldEnd();
  }
  if (this.terminal !== null && this.terminal !== undefined) {
    output.writeFieldBegin('terminal', Thrift.Type.STRUCT, 2);
    this.terminal.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustment = module.exports.InvoicePaymentAdjustment = function(args) {
  this.id = null;
  this.status = null;
  this.created_at = null;
  this.domain_revision = null;
  this.reason = null;
  this.new_cash_flow = null;
  this.old_cash_flow_inverse = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.InvoicePaymentAdjustmentStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.domain_revision !== undefined && args.domain_revision !== null) {
      this.domain_revision = args.domain_revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field domain_revision is unset!');
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
    if (args.new_cash_flow !== undefined && args.new_cash_flow !== null) {
      this.new_cash_flow = Thrift.copyList(args.new_cash_flow, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field new_cash_flow is unset!');
    }
    if (args.old_cash_flow_inverse !== undefined && args.old_cash_flow_inverse !== null) {
      this.old_cash_flow_inverse = Thrift.copyList(args.old_cash_flow_inverse, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field old_cash_flow_inverse is unset!');
    }
  }
};
InvoicePaymentAdjustment.prototype = {};
InvoicePaymentAdjustment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.InvoicePaymentAdjustmentStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.domain_revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size41 = 0;
        var _rtmp345;
        this.new_cash_flow = [];
        var _etype44 = 0;
        _rtmp345 = input.readListBegin();
        _etype44 = _rtmp345.etype;
        _size41 = _rtmp345.size;
        for (var _i46 = 0; _i46 < _size41; ++_i46)
        {
          var elem47 = null;
          elem47 = new ttypes.FinalCashFlowPosting();
          elem47.read(input);
          this.new_cash_flow.push(elem47);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.old_cash_flow_inverse = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.FinalCashFlowPosting();
          elem54.read(input);
          this.old_cash_flow_inverse.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustment.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 3);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.domain_revision !== null && this.domain_revision !== undefined) {
    output.writeFieldBegin('domain_revision', Thrift.Type.I64, 4);
    output.writeI64(this.domain_revision);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 5);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.new_cash_flow !== null && this.new_cash_flow !== undefined) {
    output.writeFieldBegin('new_cash_flow', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.new_cash_flow.length);
    for (var iter55 in this.new_cash_flow)
    {
      if (this.new_cash_flow.hasOwnProperty(iter55))
      {
        iter55 = this.new_cash_flow[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.old_cash_flow_inverse !== null && this.old_cash_flow_inverse !== undefined) {
    output.writeFieldBegin('old_cash_flow_inverse', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.old_cash_flow_inverse.length);
    for (var iter56 in this.old_cash_flow_inverse)
    {
      if (this.old_cash_flow_inverse.hasOwnProperty(iter56))
      {
        iter56 = this.old_cash_flow_inverse[iter56];
        iter56.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentPending = module.exports.InvoicePaymentAdjustmentPending = function(args) {
};
InvoicePaymentAdjustmentPending.prototype = {};
InvoicePaymentAdjustmentPending.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentPending.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentPending');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentCaptured = module.exports.InvoicePaymentAdjustmentCaptured = function(args) {
  this.at = null;
  if (args) {
    if (args.at !== undefined && args.at !== null) {
      this.at = args.at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field at is unset!');
    }
  }
};
InvoicePaymentAdjustmentCaptured.prototype = {};
InvoicePaymentAdjustmentCaptured.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentCaptured.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentCaptured');
  if (this.at !== null && this.at !== undefined) {
    output.writeFieldBegin('at', Thrift.Type.STRING, 1);
    output.writeString(this.at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentCancelled = module.exports.InvoicePaymentAdjustmentCancelled = function(args) {
  this.at = null;
  if (args) {
    if (args.at !== undefined && args.at !== null) {
      this.at = args.at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field at is unset!');
    }
  }
};
InvoicePaymentAdjustmentCancelled.prototype = {};
InvoicePaymentAdjustmentCancelled.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentCancelled.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentCancelled');
  if (this.at !== null && this.at !== undefined) {
    output.writeFieldBegin('at', Thrift.Type.STRING, 1);
    output.writeString(this.at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentStatus = module.exports.InvoicePaymentAdjustmentStatus = function(args) {
  this.pending = null;
  this.captured = null;
  this.cancelled = null;
  if (args) {
    if (args.pending !== undefined && args.pending !== null) {
      this.pending = new ttypes.InvoicePaymentAdjustmentPending(args.pending);
    }
    if (args.captured !== undefined && args.captured !== null) {
      this.captured = new ttypes.InvoicePaymentAdjustmentCaptured(args.captured);
    }
    if (args.cancelled !== undefined && args.cancelled !== null) {
      this.cancelled = new ttypes.InvoicePaymentAdjustmentCancelled(args.cancelled);
    }
  }
};
InvoicePaymentAdjustmentStatus.prototype = {};
InvoicePaymentAdjustmentStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending = new ttypes.InvoicePaymentAdjustmentPending();
        this.pending.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.captured = new ttypes.InvoicePaymentAdjustmentCaptured();
        this.captured.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cancelled = new ttypes.InvoicePaymentAdjustmentCancelled();
        this.cancelled.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentStatus.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentStatus');
  if (this.pending !== null && this.pending !== undefined) {
    output.writeFieldBegin('pending', Thrift.Type.STRUCT, 1);
    this.pending.write(output);
    output.writeFieldEnd();
  }
  if (this.captured !== null && this.captured !== undefined) {
    output.writeFieldBegin('captured', Thrift.Type.STRUCT, 2);
    this.captured.write(output);
    output.writeFieldEnd();
  }
  if (this.cancelled !== null && this.cancelled !== undefined) {
    output.writeFieldBegin('cancelled', Thrift.Type.STRUCT, 3);
    this.cancelled.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentFlow = module.exports.InvoicePaymentFlow = function(args) {
  this.instant = null;
  this.hold = null;
  if (args) {
    if (args.instant !== undefined && args.instant !== null) {
      this.instant = new ttypes.InvoicePaymentFlowInstant(args.instant);
    }
    if (args.hold !== undefined && args.hold !== null) {
      this.hold = new ttypes.InvoicePaymentFlowHold(args.hold);
    }
  }
};
InvoicePaymentFlow.prototype = {};
InvoicePaymentFlow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.instant = new ttypes.InvoicePaymentFlowInstant();
        this.instant.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.hold = new ttypes.InvoicePaymentFlowHold();
        this.hold.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentFlow.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentFlow');
  if (this.instant !== null && this.instant !== undefined) {
    output.writeFieldBegin('instant', Thrift.Type.STRUCT, 1);
    this.instant.write(output);
    output.writeFieldEnd();
  }
  if (this.hold !== null && this.hold !== undefined) {
    output.writeFieldBegin('hold', Thrift.Type.STRUCT, 2);
    this.hold.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentFlowInstant = module.exports.InvoicePaymentFlowInstant = function(args) {
};
InvoicePaymentFlowInstant.prototype = {};
InvoicePaymentFlowInstant.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentFlowInstant.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentFlowInstant');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentFlowHold = module.exports.InvoicePaymentFlowHold = function(args) {
  this.on_hold_expiration = null;
  this.held_until = null;
  if (args) {
    if (args.on_hold_expiration !== undefined && args.on_hold_expiration !== null) {
      this.on_hold_expiration = args.on_hold_expiration;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field on_hold_expiration is unset!');
    }
    if (args.held_until !== undefined && args.held_until !== null) {
      this.held_until = args.held_until;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field held_until is unset!');
    }
  }
};
InvoicePaymentFlowHold.prototype = {};
InvoicePaymentFlowHold.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.on_hold_expiration = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.held_until = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentFlowHold.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentFlowHold');
  if (this.on_hold_expiration !== null && this.on_hold_expiration !== undefined) {
    output.writeFieldBegin('on_hold_expiration', Thrift.Type.I32, 1);
    output.writeI32(this.on_hold_expiration);
    output.writeFieldEnd();
  }
  if (this.held_until !== null && this.held_until !== undefined) {
    output.writeFieldBegin('held_until', Thrift.Type.STRING, 2);
    output.writeString(this.held_until);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefund = module.exports.InvoicePaymentRefund = function(args) {
  this.id = null;
  this.status = null;
  this.created_at = null;
  this.domain_revision = null;
  this.cash = null;
  this.reason = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.InvoicePaymentRefundStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.domain_revision !== undefined && args.domain_revision !== null) {
      this.domain_revision = args.domain_revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field domain_revision is unset!');
    }
    if (args.cash !== undefined && args.cash !== null) {
      this.cash = new ttypes.Cash(args.cash);
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
InvoicePaymentRefund.prototype = {};
InvoicePaymentRefund.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.InvoicePaymentRefundStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.domain_revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash = new ttypes.Cash();
        this.cash.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefund.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefund');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 3);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.domain_revision !== null && this.domain_revision !== undefined) {
    output.writeFieldBegin('domain_revision', Thrift.Type.I64, 4);
    output.writeI64(this.domain_revision);
    output.writeFieldEnd();
  }
  if (this.cash !== null && this.cash !== undefined) {
    output.writeFieldBegin('cash', Thrift.Type.STRUCT, 6);
    this.cash.write(output);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 5);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundStatus = module.exports.InvoicePaymentRefundStatus = function(args) {
  this.pending = null;
  this.succeeded = null;
  this.failed = null;
  if (args) {
    if (args.pending !== undefined && args.pending !== null) {
      this.pending = new ttypes.InvoicePaymentRefundPending(args.pending);
    }
    if (args.succeeded !== undefined && args.succeeded !== null) {
      this.succeeded = new ttypes.InvoicePaymentRefundSucceeded(args.succeeded);
    }
    if (args.failed !== undefined && args.failed !== null) {
      this.failed = new ttypes.InvoicePaymentRefundFailed(args.failed);
    }
  }
};
InvoicePaymentRefundStatus.prototype = {};
InvoicePaymentRefundStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending = new ttypes.InvoicePaymentRefundPending();
        this.pending.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.succeeded = new ttypes.InvoicePaymentRefundSucceeded();
        this.succeeded.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.failed = new ttypes.InvoicePaymentRefundFailed();
        this.failed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundStatus.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundStatus');
  if (this.pending !== null && this.pending !== undefined) {
    output.writeFieldBegin('pending', Thrift.Type.STRUCT, 1);
    this.pending.write(output);
    output.writeFieldEnd();
  }
  if (this.succeeded !== null && this.succeeded !== undefined) {
    output.writeFieldBegin('succeeded', Thrift.Type.STRUCT, 2);
    this.succeeded.write(output);
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.STRUCT, 3);
    this.failed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundPending = module.exports.InvoicePaymentRefundPending = function(args) {
};
InvoicePaymentRefundPending.prototype = {};
InvoicePaymentRefundPending.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundPending.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundPending');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundSucceeded = module.exports.InvoicePaymentRefundSucceeded = function(args) {
};
InvoicePaymentRefundSucceeded.prototype = {};
InvoicePaymentRefundSucceeded.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundSucceeded.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundSucceeded');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundFailed = module.exports.InvoicePaymentRefundFailed = function(args) {
  this.failure = null;
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = new ttypes.OperationFailure(args.failure);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field failure is unset!');
    }
  }
};
InvoicePaymentRefundFailed.prototype = {};
InvoicePaymentRefundFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new ttypes.OperationFailure();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundFailed.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundFailed');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Blocking = module.exports.Blocking = function(args) {
  this.unblocked = null;
  this.blocked = null;
  if (args) {
    if (args.unblocked !== undefined && args.unblocked !== null) {
      this.unblocked = new ttypes.Unblocked(args.unblocked);
    }
    if (args.blocked !== undefined && args.blocked !== null) {
      this.blocked = new ttypes.Blocked(args.blocked);
    }
  }
};
Blocking.prototype = {};
Blocking.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.unblocked = new ttypes.Unblocked();
        this.unblocked.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.blocked = new ttypes.Blocked();
        this.blocked.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blocking.prototype.write = function(output) {
  output.writeStructBegin('Blocking');
  if (this.unblocked !== null && this.unblocked !== undefined) {
    output.writeFieldBegin('unblocked', Thrift.Type.STRUCT, 1);
    this.unblocked.write(output);
    output.writeFieldEnd();
  }
  if (this.blocked !== null && this.blocked !== undefined) {
    output.writeFieldBegin('blocked', Thrift.Type.STRUCT, 2);
    this.blocked.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Unblocked = module.exports.Unblocked = function(args) {
  this.reason = null;
  this.since = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
    if (args.since !== undefined && args.since !== null) {
      this.since = args.since;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field since is unset!');
    }
  }
};
Unblocked.prototype = {};
Unblocked.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.since = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Unblocked.prototype.write = function(output) {
  output.writeStructBegin('Unblocked');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.since !== null && this.since !== undefined) {
    output.writeFieldBegin('since', Thrift.Type.STRING, 2);
    output.writeString(this.since);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Blocked = module.exports.Blocked = function(args) {
  this.reason = null;
  this.since = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
    if (args.since !== undefined && args.since !== null) {
      this.since = args.since;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field since is unset!');
    }
  }
};
Blocked.prototype = {};
Blocked.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.since = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blocked.prototype.write = function(output) {
  output.writeStructBegin('Blocked');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.since !== null && this.since !== undefined) {
    output.writeFieldBegin('since', Thrift.Type.STRING, 2);
    output.writeString(this.since);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Suspension = module.exports.Suspension = function(args) {
  this.active = null;
  this.suspended = null;
  if (args) {
    if (args.active !== undefined && args.active !== null) {
      this.active = new ttypes.Active(args.active);
    }
    if (args.suspended !== undefined && args.suspended !== null) {
      this.suspended = new ttypes.Suspended(args.suspended);
    }
  }
};
Suspension.prototype = {};
Suspension.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.active = new ttypes.Active();
        this.active.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.suspended = new ttypes.Suspended();
        this.suspended.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Suspension.prototype.write = function(output) {
  output.writeStructBegin('Suspension');
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.STRUCT, 1);
    this.active.write(output);
    output.writeFieldEnd();
  }
  if (this.suspended !== null && this.suspended !== undefined) {
    output.writeFieldBegin('suspended', Thrift.Type.STRUCT, 2);
    this.suspended.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Active = module.exports.Active = function(args) {
  this.since = null;
  if (args) {
    if (args.since !== undefined && args.since !== null) {
      this.since = args.since;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field since is unset!');
    }
  }
};
Active.prototype = {};
Active.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.since = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Active.prototype.write = function(output) {
  output.writeStructBegin('Active');
  if (this.since !== null && this.since !== undefined) {
    output.writeFieldBegin('since', Thrift.Type.STRING, 1);
    output.writeString(this.since);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Suspended = module.exports.Suspended = function(args) {
  this.since = null;
  if (args) {
    if (args.since !== undefined && args.since !== null) {
      this.since = args.since;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field since is unset!');
    }
  }
};
Suspended.prototype = {};
Suspended.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.since = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Suspended.prototype.write = function(output) {
  output.writeStructBegin('Suspended');
  if (this.since !== null && this.since !== undefined) {
    output.writeFieldBegin('since', Thrift.Type.STRING, 1);
    output.writeString(this.since);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Party = module.exports.Party = function(args) {
  this.id = null;
  this.contact_info = null;
  this.created_at = null;
  this.blocking = null;
  this.suspension = null;
  this.contracts = null;
  this.shops = null;
  this.revision = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.contact_info !== undefined && args.contact_info !== null) {
      this.contact_info = new ttypes.PartyContactInfo(args.contact_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contact_info is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.blocking !== undefined && args.blocking !== null) {
      this.blocking = new ttypes.Blocking(args.blocking);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field blocking is unset!');
    }
    if (args.suspension !== undefined && args.suspension !== null) {
      this.suspension = new ttypes.Suspension(args.suspension);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field suspension is unset!');
    }
    if (args.contracts !== undefined && args.contracts !== null) {
      this.contracts = Thrift.copyMap(args.contracts, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contracts is unset!');
    }
    if (args.shops !== undefined && args.shops !== null) {
      this.shops = Thrift.copyMap(args.shops, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shops is unset!');
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field revision is unset!');
    }
  }
};
Party.prototype = {};
Party.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact_info = new ttypes.PartyContactInfo();
        this.contact_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.blocking = new ttypes.Blocking();
        this.blocking.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.suspension = new ttypes.Suspension();
        this.suspension.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size57 = 0;
        var _rtmp361;
        this.contracts = new Map();
        var _ktype58 = 0;
        var _vtype59 = 0;
        _rtmp361 = input.readMapBegin();
        _ktype58 = _rtmp361.ktype;
        _vtype59 = _rtmp361.vtype;
        _size57 = _rtmp361.size;
        for (var _i62 = 0; _i62 < _size57; ++_i62)
        {
          var key63 = null;
          var val64 = null;
          key63 = input.readString();
          val64 = new ttypes.Contract();
          val64.read(input);
          this.contracts.set(key63, val64);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size65 = 0;
        var _rtmp369;
        this.shops = new Map();
        var _ktype66 = 0;
        var _vtype67 = 0;
        _rtmp369 = input.readMapBegin();
        _ktype66 = _rtmp369.ktype;
        _vtype67 = _rtmp369.vtype;
        _size65 = _rtmp369.size;
        for (var _i70 = 0; _i70 < _size65; ++_i70)
        {
          var key71 = null;
          var val72 = null;
          key71 = input.readString();
          val72 = new ttypes.Shop();
          val72.read(input);
          this.shops.set(key71, val72);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Party.prototype.write = function(output) {
  output.writeStructBegin('Party');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.contact_info !== null && this.contact_info !== undefined) {
    output.writeFieldBegin('contact_info', Thrift.Type.STRUCT, 7);
    this.contact_info.write(output);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 8);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.blocking !== null && this.blocking !== undefined) {
    output.writeFieldBegin('blocking', Thrift.Type.STRUCT, 2);
    this.blocking.write(output);
    output.writeFieldEnd();
  }
  if (this.suspension !== null && this.suspension !== undefined) {
    output.writeFieldBegin('suspension', Thrift.Type.STRUCT, 3);
    this.suspension.write(output);
    output.writeFieldEnd();
  }
  if (this.contracts !== null && this.contracts !== undefined) {
    output.writeFieldBegin('contracts', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, this.contracts.size);
    var func75 = function(viter74, kiter73) {
      output.writeString(kiter73);
      viter74.write(output);
    };
    this.contracts.forEach(func75);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.shops !== null && this.shops !== undefined) {
    output.writeFieldBegin('shops', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, this.shops.size);
    var func78 = function(viter77, kiter76) {
      output.writeString(kiter76);
      viter77.write(output);
    };
    this.shops.forEach(func78);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 6);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyContactInfo = module.exports.PartyContactInfo = function(args) {
  this.email = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field email is unset!');
    }
  }
};
PartyContactInfo.prototype = {};
PartyContactInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyContactInfo.prototype.write = function(output) {
  output.writeStructBegin('PartyContactInfo');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Shop = module.exports.Shop = function(args) {
  this.id = null;
  this.created_at = null;
  this.blocking = null;
  this.suspension = null;
  this.details = null;
  this.location = null;
  this.category = null;
  this.account = null;
  this.contract_id = null;
  this.payout_tool_id = null;
  this.payout_schedule = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.blocking !== undefined && args.blocking !== null) {
      this.blocking = new ttypes.Blocking(args.blocking);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field blocking is unset!');
    }
    if (args.suspension !== undefined && args.suspension !== null) {
      this.suspension = new ttypes.Suspension(args.suspension);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field suspension is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new ttypes.ShopDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.ShopLocation(args.location);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field location is unset!');
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = new ttypes.CategoryRef(args.category);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field category is unset!');
    }
    if (args.account !== undefined && args.account !== null) {
      this.account = new ttypes.ShopAccount(args.account);
    }
    if (args.contract_id !== undefined && args.contract_id !== null) {
      this.contract_id = args.contract_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contract_id is unset!');
    }
    if (args.payout_tool_id !== undefined && args.payout_tool_id !== null) {
      this.payout_tool_id = args.payout_tool_id;
    }
    if (args.payout_schedule !== undefined && args.payout_schedule !== null) {
      this.payout_schedule = new ttypes.BusinessScheduleRef(args.payout_schedule);
    }
  }
};
Shop.prototype = {};
Shop.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.blocking = new ttypes.Blocking();
        this.blocking.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.suspension = new ttypes.Suspension();
        this.suspension.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new ttypes.ShopDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.ShopLocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.category = new ttypes.CategoryRef();
        this.category.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.ShopAccount();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.contract_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.payout_tool_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_schedule = new ttypes.BusinessScheduleRef();
        this.payout_schedule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Shop.prototype.write = function(output) {
  output.writeStructBegin('Shop');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 11);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.blocking !== null && this.blocking !== undefined) {
    output.writeFieldBegin('blocking', Thrift.Type.STRUCT, 2);
    this.blocking.write(output);
    output.writeFieldEnd();
  }
  if (this.suspension !== null && this.suspension !== undefined) {
    output.writeFieldBegin('suspension', Thrift.Type.STRUCT, 3);
    this.suspension.write(output);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 4);
    this.details.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 10);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRUCT, 5);
    this.category.write(output);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 6);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.contract_id !== null && this.contract_id !== undefined) {
    output.writeFieldBegin('contract_id', Thrift.Type.STRING, 7);
    output.writeString(this.contract_id);
    output.writeFieldEnd();
  }
  if (this.payout_tool_id !== null && this.payout_tool_id !== undefined) {
    output.writeFieldBegin('payout_tool_id', Thrift.Type.STRING, 8);
    output.writeString(this.payout_tool_id);
    output.writeFieldEnd();
  }
  if (this.payout_schedule !== null && this.payout_schedule !== undefined) {
    output.writeFieldBegin('payout_schedule', Thrift.Type.STRUCT, 12);
    this.payout_schedule.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopAccount = module.exports.ShopAccount = function(args) {
  this.currency = null;
  this.settlement = null;
  this.guarantee = null;
  this.payout = null;
  if (args) {
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = new ttypes.CurrencyRef(args.currency);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currency is unset!');
    }
    if (args.settlement !== undefined && args.settlement !== null) {
      this.settlement = args.settlement;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field settlement is unset!');
    }
    if (args.guarantee !== undefined && args.guarantee !== null) {
      this.guarantee = args.guarantee;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field guarantee is unset!');
    }
    if (args.payout !== undefined && args.payout !== null) {
      this.payout = args.payout;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payout is unset!');
    }
  }
};
ShopAccount.prototype = {};
ShopAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.currency = new ttypes.CurrencyRef();
        this.currency.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.settlement = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.guarantee = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.payout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopAccount.prototype.write = function(output) {
  output.writeStructBegin('ShopAccount');
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRUCT, 1);
    this.currency.write(output);
    output.writeFieldEnd();
  }
  if (this.settlement !== null && this.settlement !== undefined) {
    output.writeFieldBegin('settlement', Thrift.Type.I64, 2);
    output.writeI64(this.settlement);
    output.writeFieldEnd();
  }
  if (this.guarantee !== null && this.guarantee !== undefined) {
    output.writeFieldBegin('guarantee', Thrift.Type.I64, 3);
    output.writeI64(this.guarantee);
    output.writeFieldEnd();
  }
  if (this.payout !== null && this.payout !== undefined) {
    output.writeFieldBegin('payout', Thrift.Type.I64, 4);
    output.writeI64(this.payout);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopDetails = module.exports.ShopDetails = function(args) {
  this.name = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
ShopDetails.prototype = {};
ShopDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopDetails.prototype.write = function(output) {
  output.writeStructBegin('ShopDetails');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopLocation = module.exports.ShopLocation = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
ShopLocation.prototype = {};
ShopLocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopLocation.prototype.write = function(output) {
  output.writeStructBegin('ShopLocation');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractorRef = module.exports.ContractorRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
ContractorRef.prototype = {};
ContractorRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractorRef.prototype.write = function(output) {
  output.writeStructBegin('ContractorRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Contractor = module.exports.Contractor = function(args) {
  this.legal_entity = null;
  this.registered_user = null;
  if (args) {
    if (args.legal_entity !== undefined && args.legal_entity !== null) {
      this.legal_entity = new ttypes.LegalEntity(args.legal_entity);
    }
    if (args.registered_user !== undefined && args.registered_user !== null) {
      this.registered_user = new ttypes.RegisteredUser(args.registered_user);
    }
  }
};
Contractor.prototype = {};
Contractor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.legal_entity = new ttypes.LegalEntity();
        this.legal_entity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.registered_user = new ttypes.RegisteredUser();
        this.registered_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Contractor.prototype.write = function(output) {
  output.writeStructBegin('Contractor');
  if (this.legal_entity !== null && this.legal_entity !== undefined) {
    output.writeFieldBegin('legal_entity', Thrift.Type.STRUCT, 1);
    this.legal_entity.write(output);
    output.writeFieldEnd();
  }
  if (this.registered_user !== null && this.registered_user !== undefined) {
    output.writeFieldBegin('registered_user', Thrift.Type.STRUCT, 2);
    this.registered_user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisteredUser = module.exports.RegisteredUser = function(args) {
  this.email = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field email is unset!');
    }
  }
};
RegisteredUser.prototype = {};
RegisteredUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisteredUser.prototype.write = function(output) {
  output.writeStructBegin('RegisteredUser');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LegalEntity = module.exports.LegalEntity = function(args) {
  this.russian_legal_entity = null;
  this.international_legal_entity = null;
  if (args) {
    if (args.russian_legal_entity !== undefined && args.russian_legal_entity !== null) {
      this.russian_legal_entity = new ttypes.RussianLegalEntity(args.russian_legal_entity);
    }
    if (args.international_legal_entity !== undefined && args.international_legal_entity !== null) {
      this.international_legal_entity = new ttypes.InternationalLegalEntity(args.international_legal_entity);
    }
  }
};
LegalEntity.prototype = {};
LegalEntity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.russian_legal_entity = new ttypes.RussianLegalEntity();
        this.russian_legal_entity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.international_legal_entity = new ttypes.InternationalLegalEntity();
        this.international_legal_entity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LegalEntity.prototype.write = function(output) {
  output.writeStructBegin('LegalEntity');
  if (this.russian_legal_entity !== null && this.russian_legal_entity !== undefined) {
    output.writeFieldBegin('russian_legal_entity', Thrift.Type.STRUCT, 1);
    this.russian_legal_entity.write(output);
    output.writeFieldEnd();
  }
  if (this.international_legal_entity !== null && this.international_legal_entity !== undefined) {
    output.writeFieldBegin('international_legal_entity', Thrift.Type.STRUCT, 2);
    this.international_legal_entity.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RussianLegalEntity = module.exports.RussianLegalEntity = function(args) {
  this.registered_name = null;
  this.registered_number = null;
  this.inn = null;
  this.actual_address = null;
  this.post_address = null;
  this.representative_position = null;
  this.representative_full_name = null;
  this.representative_document = null;
  this.russian_bank_account = null;
  if (args) {
    if (args.registered_name !== undefined && args.registered_name !== null) {
      this.registered_name = args.registered_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field registered_name is unset!');
    }
    if (args.registered_number !== undefined && args.registered_number !== null) {
      this.registered_number = args.registered_number;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field registered_number is unset!');
    }
    if (args.inn !== undefined && args.inn !== null) {
      this.inn = args.inn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field inn is unset!');
    }
    if (args.actual_address !== undefined && args.actual_address !== null) {
      this.actual_address = args.actual_address;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actual_address is unset!');
    }
    if (args.post_address !== undefined && args.post_address !== null) {
      this.post_address = args.post_address;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field post_address is unset!');
    }
    if (args.representative_position !== undefined && args.representative_position !== null) {
      this.representative_position = args.representative_position;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field representative_position is unset!');
    }
    if (args.representative_full_name !== undefined && args.representative_full_name !== null) {
      this.representative_full_name = args.representative_full_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field representative_full_name is unset!');
    }
    if (args.representative_document !== undefined && args.representative_document !== null) {
      this.representative_document = args.representative_document;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field representative_document is unset!');
    }
    if (args.russian_bank_account !== undefined && args.russian_bank_account !== null) {
      this.russian_bank_account = new ttypes.RussianBankAccount(args.russian_bank_account);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field russian_bank_account is unset!');
    }
  }
};
RussianLegalEntity.prototype = {};
RussianLegalEntity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.registered_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.registered_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.inn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.actual_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.post_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.representative_position = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.representative_full_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.representative_document = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.russian_bank_account = new ttypes.RussianBankAccount();
        this.russian_bank_account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RussianLegalEntity.prototype.write = function(output) {
  output.writeStructBegin('RussianLegalEntity');
  if (this.registered_name !== null && this.registered_name !== undefined) {
    output.writeFieldBegin('registered_name', Thrift.Type.STRING, 1);
    output.writeString(this.registered_name);
    output.writeFieldEnd();
  }
  if (this.registered_number !== null && this.registered_number !== undefined) {
    output.writeFieldBegin('registered_number', Thrift.Type.STRING, 2);
    output.writeString(this.registered_number);
    output.writeFieldEnd();
  }
  if (this.inn !== null && this.inn !== undefined) {
    output.writeFieldBegin('inn', Thrift.Type.STRING, 3);
    output.writeString(this.inn);
    output.writeFieldEnd();
  }
  if (this.actual_address !== null && this.actual_address !== undefined) {
    output.writeFieldBegin('actual_address', Thrift.Type.STRING, 4);
    output.writeString(this.actual_address);
    output.writeFieldEnd();
  }
  if (this.post_address !== null && this.post_address !== undefined) {
    output.writeFieldBegin('post_address', Thrift.Type.STRING, 5);
    output.writeString(this.post_address);
    output.writeFieldEnd();
  }
  if (this.representative_position !== null && this.representative_position !== undefined) {
    output.writeFieldBegin('representative_position', Thrift.Type.STRING, 6);
    output.writeString(this.representative_position);
    output.writeFieldEnd();
  }
  if (this.representative_full_name !== null && this.representative_full_name !== undefined) {
    output.writeFieldBegin('representative_full_name', Thrift.Type.STRING, 7);
    output.writeString(this.representative_full_name);
    output.writeFieldEnd();
  }
  if (this.representative_document !== null && this.representative_document !== undefined) {
    output.writeFieldBegin('representative_document', Thrift.Type.STRING, 8);
    output.writeString(this.representative_document);
    output.writeFieldEnd();
  }
  if (this.russian_bank_account !== null && this.russian_bank_account !== undefined) {
    output.writeFieldBegin('russian_bank_account', Thrift.Type.STRUCT, 9);
    this.russian_bank_account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InternationalLegalEntity = module.exports.InternationalLegalEntity = function(args) {
  this.legal_name = null;
  this.trading_name = null;
  this.registered_address = null;
  this.actual_address = null;
  this.registered_number = null;
  if (args) {
    if (args.legal_name !== undefined && args.legal_name !== null) {
      this.legal_name = args.legal_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field legal_name is unset!');
    }
    if (args.trading_name !== undefined && args.trading_name !== null) {
      this.trading_name = args.trading_name;
    }
    if (args.registered_address !== undefined && args.registered_address !== null) {
      this.registered_address = args.registered_address;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field registered_address is unset!');
    }
    if (args.actual_address !== undefined && args.actual_address !== null) {
      this.actual_address = args.actual_address;
    }
    if (args.registered_number !== undefined && args.registered_number !== null) {
      this.registered_number = args.registered_number;
    }
  }
};
InternationalLegalEntity.prototype = {};
InternationalLegalEntity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.legal_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trading_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registered_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.actual_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registered_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InternationalLegalEntity.prototype.write = function(output) {
  output.writeStructBegin('InternationalLegalEntity');
  if (this.legal_name !== null && this.legal_name !== undefined) {
    output.writeFieldBegin('legal_name', Thrift.Type.STRING, 1);
    output.writeString(this.legal_name);
    output.writeFieldEnd();
  }
  if (this.trading_name !== null && this.trading_name !== undefined) {
    output.writeFieldBegin('trading_name', Thrift.Type.STRING, 2);
    output.writeString(this.trading_name);
    output.writeFieldEnd();
  }
  if (this.registered_address !== null && this.registered_address !== undefined) {
    output.writeFieldBegin('registered_address', Thrift.Type.STRING, 3);
    output.writeString(this.registered_address);
    output.writeFieldEnd();
  }
  if (this.actual_address !== null && this.actual_address !== undefined) {
    output.writeFieldBegin('actual_address', Thrift.Type.STRING, 4);
    output.writeString(this.actual_address);
    output.writeFieldEnd();
  }
  if (this.registered_number !== null && this.registered_number !== undefined) {
    output.writeFieldBegin('registered_number', Thrift.Type.STRING, 5);
    output.writeString(this.registered_number);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RussianBankAccount = module.exports.RussianBankAccount = function(args) {
  this.account = null;
  this.bank_name = null;
  this.bank_post_account = null;
  this.bank_bik = null;
  if (args) {
    if (args.account !== undefined && args.account !== null) {
      this.account = args.account;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field account is unset!');
    }
    if (args.bank_name !== undefined && args.bank_name !== null) {
      this.bank_name = args.bank_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bank_name is unset!');
    }
    if (args.bank_post_account !== undefined && args.bank_post_account !== null) {
      this.bank_post_account = args.bank_post_account;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bank_post_account is unset!');
    }
    if (args.bank_bik !== undefined && args.bank_bik !== null) {
      this.bank_bik = args.bank_bik;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bank_bik is unset!');
    }
  }
};
RussianBankAccount.prototype = {};
RussianBankAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.bank_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bank_post_account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.bank_bik = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RussianBankAccount.prototype.write = function(output) {
  output.writeStructBegin('RussianBankAccount');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.bank_name !== null && this.bank_name !== undefined) {
    output.writeFieldBegin('bank_name', Thrift.Type.STRING, 2);
    output.writeString(this.bank_name);
    output.writeFieldEnd();
  }
  if (this.bank_post_account !== null && this.bank_post_account !== undefined) {
    output.writeFieldBegin('bank_post_account', Thrift.Type.STRING, 3);
    output.writeString(this.bank_post_account);
    output.writeFieldEnd();
  }
  if (this.bank_bik !== null && this.bank_bik !== undefined) {
    output.writeFieldBegin('bank_bik', Thrift.Type.STRING, 4);
    output.writeString(this.bank_bik);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InternationalBankAccount = module.exports.InternationalBankAccount = function(args) {
  this.account_holder = null;
  this.bank_name = null;
  this.bank_address = null;
  this.iban = null;
  this.bic = null;
  this.local_bank_code = null;
  if (args) {
    if (args.account_holder !== undefined && args.account_holder !== null) {
      this.account_holder = args.account_holder;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field account_holder is unset!');
    }
    if (args.bank_name !== undefined && args.bank_name !== null) {
      this.bank_name = args.bank_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bank_name is unset!');
    }
    if (args.bank_address !== undefined && args.bank_address !== null) {
      this.bank_address = args.bank_address;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bank_address is unset!');
    }
    if (args.iban !== undefined && args.iban !== null) {
      this.iban = args.iban;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field iban is unset!');
    }
    if (args.bic !== undefined && args.bic !== null) {
      this.bic = args.bic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bic is unset!');
    }
    if (args.local_bank_code !== undefined && args.local_bank_code !== null) {
      this.local_bank_code = args.local_bank_code;
    }
  }
};
InternationalBankAccount.prototype = {};
InternationalBankAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account_holder = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.bank_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bank_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.iban = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.bic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.local_bank_code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InternationalBankAccount.prototype.write = function(output) {
  output.writeStructBegin('InternationalBankAccount');
  if (this.account_holder !== null && this.account_holder !== undefined) {
    output.writeFieldBegin('account_holder', Thrift.Type.STRING, 1);
    output.writeString(this.account_holder);
    output.writeFieldEnd();
  }
  if (this.bank_name !== null && this.bank_name !== undefined) {
    output.writeFieldBegin('bank_name', Thrift.Type.STRING, 2);
    output.writeString(this.bank_name);
    output.writeFieldEnd();
  }
  if (this.bank_address !== null && this.bank_address !== undefined) {
    output.writeFieldBegin('bank_address', Thrift.Type.STRING, 3);
    output.writeString(this.bank_address);
    output.writeFieldEnd();
  }
  if (this.iban !== null && this.iban !== undefined) {
    output.writeFieldBegin('iban', Thrift.Type.STRING, 4);
    output.writeString(this.iban);
    output.writeFieldEnd();
  }
  if (this.bic !== null && this.bic !== undefined) {
    output.writeFieldBegin('bic', Thrift.Type.STRING, 5);
    output.writeString(this.bic);
    output.writeFieldEnd();
  }
  if (this.local_bank_code !== null && this.local_bank_code !== undefined) {
    output.writeFieldBegin('local_bank_code', Thrift.Type.STRING, 6);
    output.writeString(this.local_bank_code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutTool = module.exports.PayoutTool = function(args) {
  this.id = null;
  this.created_at = null;
  this.currency = null;
  this.payout_tool_info = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = new ttypes.CurrencyRef(args.currency);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currency is unset!');
    }
    if (args.payout_tool_info !== undefined && args.payout_tool_info !== null) {
      this.payout_tool_info = new ttypes.PayoutToolInfo(args.payout_tool_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payout_tool_info is unset!');
    }
  }
};
PayoutTool.prototype = {};
PayoutTool.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.currency = new ttypes.CurrencyRef();
        this.currency.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_tool_info = new ttypes.PayoutToolInfo();
        this.payout_tool_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutTool.prototype.write = function(output) {
  output.writeStructBegin('PayoutTool');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 4);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRUCT, 2);
    this.currency.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_tool_info !== null && this.payout_tool_info !== undefined) {
    output.writeFieldBegin('payout_tool_info', Thrift.Type.STRUCT, 3);
    this.payout_tool_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutToolInfo = module.exports.PayoutToolInfo = function(args) {
  this.russian_bank_account = null;
  this.international_bank_account = null;
  if (args) {
    if (args.russian_bank_account !== undefined && args.russian_bank_account !== null) {
      this.russian_bank_account = new ttypes.RussianBankAccount(args.russian_bank_account);
    }
    if (args.international_bank_account !== undefined && args.international_bank_account !== null) {
      this.international_bank_account = new ttypes.InternationalBankAccount(args.international_bank_account);
    }
  }
};
PayoutToolInfo.prototype = {};
PayoutToolInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.russian_bank_account = new ttypes.RussianBankAccount();
        this.russian_bank_account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.international_bank_account = new ttypes.InternationalBankAccount();
        this.international_bank_account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutToolInfo.prototype.write = function(output) {
  output.writeStructBegin('PayoutToolInfo');
  if (this.russian_bank_account !== null && this.russian_bank_account !== undefined) {
    output.writeFieldBegin('russian_bank_account', Thrift.Type.STRUCT, 1);
    this.russian_bank_account.write(output);
    output.writeFieldEnd();
  }
  if (this.international_bank_account !== null && this.international_bank_account !== undefined) {
    output.writeFieldBegin('international_bank_account', Thrift.Type.STRUCT, 2);
    this.international_bank_account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Contract = module.exports.Contract = function(args) {
  this.id = null;
  this.contractor = null;
  this.payment_institution = null;
  this.created_at = null;
  this.valid_since = null;
  this.valid_until = null;
  this.status = null;
  this.terms = null;
  this.adjustments = null;
  this.payout_tools = null;
  this.legal_agreement = null;
  this.report_preferences = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.contractor !== undefined && args.contractor !== null) {
      this.contractor = new ttypes.Contractor(args.contractor);
    }
    if (args.payment_institution !== undefined && args.payment_institution !== null) {
      this.payment_institution = new ttypes.PaymentInstitutionRef(args.payment_institution);
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.valid_since !== undefined && args.valid_since !== null) {
      this.valid_since = args.valid_since;
    }
    if (args.valid_until !== undefined && args.valid_until !== null) {
      this.valid_until = args.valid_until;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.ContractStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.terms !== undefined && args.terms !== null) {
      this.terms = new ttypes.TermSetHierarchyRef(args.terms);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field terms is unset!');
    }
    if (args.adjustments !== undefined && args.adjustments !== null) {
      this.adjustments = Thrift.copyList(args.adjustments, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field adjustments is unset!');
    }
    if (args.payout_tools !== undefined && args.payout_tools !== null) {
      this.payout_tools = Thrift.copyList(args.payout_tools, [ttypes.PayoutTool]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payout_tools is unset!');
    }
    if (args.legal_agreement !== undefined && args.legal_agreement !== null) {
      this.legal_agreement = new ttypes.LegalAgreement(args.legal_agreement);
    }
    if (args.report_preferences !== undefined && args.report_preferences !== null) {
      this.report_preferences = new ttypes.ReportPreferences(args.report_preferences);
    }
  }
};
Contract.prototype = {};
Contract.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.contractor = new ttypes.Contractor();
        this.contractor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_institution = new ttypes.PaymentInstitutionRef();
        this.payment_institution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.valid_since = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.valid_until = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.ContractStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.terms = new ttypes.TermSetHierarchyRef();
        this.terms.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size79 = 0;
        var _rtmp383;
        this.adjustments = [];
        var _etype82 = 0;
        _rtmp383 = input.readListBegin();
        _etype82 = _rtmp383.etype;
        _size79 = _rtmp383.size;
        for (var _i84 = 0; _i84 < _size79; ++_i84)
        {
          var elem85 = null;
          elem85 = new ttypes.ContractAdjustment();
          elem85.read(input);
          this.adjustments.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.payout_tools = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = new ttypes.PayoutTool();
          elem92.read(input);
          this.payout_tools.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.legal_agreement = new ttypes.LegalAgreement();
        this.legal_agreement.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.report_preferences = new ttypes.ReportPreferences();
        this.report_preferences.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Contract.prototype.write = function(output) {
  output.writeStructBegin('Contract');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.contractor !== null && this.contractor !== undefined) {
    output.writeFieldBegin('contractor', Thrift.Type.STRUCT, 3);
    this.contractor.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_institution !== null && this.payment_institution !== undefined) {
    output.writeFieldBegin('payment_institution', Thrift.Type.STRUCT, 12);
    this.payment_institution.write(output);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 11);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.valid_since !== null && this.valid_since !== undefined) {
    output.writeFieldBegin('valid_since', Thrift.Type.STRING, 4);
    output.writeString(this.valid_since);
    output.writeFieldEnd();
  }
  if (this.valid_until !== null && this.valid_until !== undefined) {
    output.writeFieldBegin('valid_until', Thrift.Type.STRING, 5);
    output.writeString(this.valid_until);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 6);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.STRUCT, 7);
    this.terms.write(output);
    output.writeFieldEnd();
  }
  if (this.adjustments !== null && this.adjustments !== undefined) {
    output.writeFieldBegin('adjustments', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.adjustments.length);
    for (var iter93 in this.adjustments)
    {
      if (this.adjustments.hasOwnProperty(iter93))
      {
        iter93 = this.adjustments[iter93];
        iter93.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.payout_tools !== null && this.payout_tools !== undefined) {
    output.writeFieldBegin('payout_tools', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.payout_tools.length);
    for (var iter94 in this.payout_tools)
    {
      if (this.payout_tools.hasOwnProperty(iter94))
      {
        iter94 = this.payout_tools[iter94];
        iter94.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.legal_agreement !== null && this.legal_agreement !== undefined) {
    output.writeFieldBegin('legal_agreement', Thrift.Type.STRUCT, 10);
    this.legal_agreement.write(output);
    output.writeFieldEnd();
  }
  if (this.report_preferences !== null && this.report_preferences !== undefined) {
    output.writeFieldBegin('report_preferences', Thrift.Type.STRUCT, 13);
    this.report_preferences.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LegalAgreement = module.exports.LegalAgreement = function(args) {
  this.signed_at = null;
  this.legal_agreement_id = null;
  this.valid_until = null;
  if (args) {
    if (args.signed_at !== undefined && args.signed_at !== null) {
      this.signed_at = args.signed_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field signed_at is unset!');
    }
    if (args.legal_agreement_id !== undefined && args.legal_agreement_id !== null) {
      this.legal_agreement_id = args.legal_agreement_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field legal_agreement_id is unset!');
    }
    if (args.valid_until !== undefined && args.valid_until !== null) {
      this.valid_until = args.valid_until;
    }
  }
};
LegalAgreement.prototype = {};
LegalAgreement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.signed_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.legal_agreement_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.valid_until = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LegalAgreement.prototype.write = function(output) {
  output.writeStructBegin('LegalAgreement');
  if (this.signed_at !== null && this.signed_at !== undefined) {
    output.writeFieldBegin('signed_at', Thrift.Type.STRING, 1);
    output.writeString(this.signed_at);
    output.writeFieldEnd();
  }
  if (this.legal_agreement_id !== null && this.legal_agreement_id !== undefined) {
    output.writeFieldBegin('legal_agreement_id', Thrift.Type.STRING, 2);
    output.writeString(this.legal_agreement_id);
    output.writeFieldEnd();
  }
  if (this.valid_until !== null && this.valid_until !== undefined) {
    output.writeFieldBegin('valid_until', Thrift.Type.STRING, 3);
    output.writeString(this.valid_until);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReportPreferences = module.exports.ReportPreferences = function(args) {
  this.service_acceptance_act_preferences = null;
  if (args) {
    if (args.service_acceptance_act_preferences !== undefined && args.service_acceptance_act_preferences !== null) {
      this.service_acceptance_act_preferences = new ttypes.ServiceAcceptanceActPreferences(args.service_acceptance_act_preferences);
    }
  }
};
ReportPreferences.prototype = {};
ReportPreferences.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.service_acceptance_act_preferences = new ttypes.ServiceAcceptanceActPreferences();
        this.service_acceptance_act_preferences.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportPreferences.prototype.write = function(output) {
  output.writeStructBegin('ReportPreferences');
  if (this.service_acceptance_act_preferences !== null && this.service_acceptance_act_preferences !== undefined) {
    output.writeFieldBegin('service_acceptance_act_preferences', Thrift.Type.STRUCT, 1);
    this.service_acceptance_act_preferences.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServiceAcceptanceActPreferences = module.exports.ServiceAcceptanceActPreferences = function(args) {
  this.schedule = null;
  this.signer = null;
  if (args) {
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = new ttypes.BusinessScheduleRef(args.schedule);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field schedule is unset!');
    }
    if (args.signer !== undefined && args.signer !== null) {
      this.signer = new ttypes.Representative(args.signer);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field signer is unset!');
    }
  }
};
ServiceAcceptanceActPreferences.prototype = {};
ServiceAcceptanceActPreferences.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedule = new ttypes.BusinessScheduleRef();
        this.schedule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.signer = new ttypes.Representative();
        this.signer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceAcceptanceActPreferences.prototype.write = function(output) {
  output.writeStructBegin('ServiceAcceptanceActPreferences');
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRUCT, 1);
    this.schedule.write(output);
    output.writeFieldEnd();
  }
  if (this.signer !== null && this.signer !== undefined) {
    output.writeFieldBegin('signer', Thrift.Type.STRUCT, 2);
    this.signer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Representative = module.exports.Representative = function(args) {
  this.position = null;
  this.full_name = null;
  this.document = null;
  if (args) {
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field position is unset!');
    }
    if (args.full_name !== undefined && args.full_name !== null) {
      this.full_name = args.full_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field full_name is unset!');
    }
    if (args.document !== undefined && args.document !== null) {
      this.document = new ttypes.RepresentativeDocument(args.document);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field document is unset!');
    }
  }
};
Representative.prototype = {};
Representative.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.position = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.full_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.document = new ttypes.RepresentativeDocument();
        this.document.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Representative.prototype.write = function(output) {
  output.writeStructBegin('Representative');
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.STRING, 1);
    output.writeString(this.position);
    output.writeFieldEnd();
  }
  if (this.full_name !== null && this.full_name !== undefined) {
    output.writeFieldBegin('full_name', Thrift.Type.STRING, 2);
    output.writeString(this.full_name);
    output.writeFieldEnd();
  }
  if (this.document !== null && this.document !== undefined) {
    output.writeFieldBegin('document', Thrift.Type.STRUCT, 3);
    this.document.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RepresentativeDocument = module.exports.RepresentativeDocument = function(args) {
  this.articles_of_association = null;
  this.power_of_attorney = null;
  if (args) {
    if (args.articles_of_association !== undefined && args.articles_of_association !== null) {
      this.articles_of_association = new ttypes.ArticlesOfAssociation(args.articles_of_association);
    }
    if (args.power_of_attorney !== undefined && args.power_of_attorney !== null) {
      this.power_of_attorney = new ttypes.LegalAgreement(args.power_of_attorney);
    }
  }
};
RepresentativeDocument.prototype = {};
RepresentativeDocument.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.articles_of_association = new ttypes.ArticlesOfAssociation();
        this.articles_of_association.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.power_of_attorney = new ttypes.LegalAgreement();
        this.power_of_attorney.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RepresentativeDocument.prototype.write = function(output) {
  output.writeStructBegin('RepresentativeDocument');
  if (this.articles_of_association !== null && this.articles_of_association !== undefined) {
    output.writeFieldBegin('articles_of_association', Thrift.Type.STRUCT, 1);
    this.articles_of_association.write(output);
    output.writeFieldEnd();
  }
  if (this.power_of_attorney !== null && this.power_of_attorney !== undefined) {
    output.writeFieldBegin('power_of_attorney', Thrift.Type.STRUCT, 2);
    this.power_of_attorney.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ArticlesOfAssociation = module.exports.ArticlesOfAssociation = function(args) {
};
ArticlesOfAssociation.prototype = {};
ArticlesOfAssociation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArticlesOfAssociation.prototype.write = function(output) {
  output.writeStructBegin('ArticlesOfAssociation');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractStatus = module.exports.ContractStatus = function(args) {
  this.active = null;
  this.terminated = null;
  this.expired = null;
  if (args) {
    if (args.active !== undefined && args.active !== null) {
      this.active = new ttypes.ContractActive(args.active);
    }
    if (args.terminated !== undefined && args.terminated !== null) {
      this.terminated = new ttypes.ContractTerminated(args.terminated);
    }
    if (args.expired !== undefined && args.expired !== null) {
      this.expired = new ttypes.ContractExpired(args.expired);
    }
  }
};
ContractStatus.prototype = {};
ContractStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.active = new ttypes.ContractActive();
        this.active.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.terminated = new ttypes.ContractTerminated();
        this.terminated.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.expired = new ttypes.ContractExpired();
        this.expired.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractStatus.prototype.write = function(output) {
  output.writeStructBegin('ContractStatus');
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.STRUCT, 1);
    this.active.write(output);
    output.writeFieldEnd();
  }
  if (this.terminated !== null && this.terminated !== undefined) {
    output.writeFieldBegin('terminated', Thrift.Type.STRUCT, 2);
    this.terminated.write(output);
    output.writeFieldEnd();
  }
  if (this.expired !== null && this.expired !== undefined) {
    output.writeFieldBegin('expired', Thrift.Type.STRUCT, 3);
    this.expired.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractActive = module.exports.ContractActive = function(args) {
};
ContractActive.prototype = {};
ContractActive.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractActive.prototype.write = function(output) {
  output.writeStructBegin('ContractActive');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractTerminated = module.exports.ContractTerminated = function(args) {
  this.terminated_at = null;
  if (args) {
    if (args.terminated_at !== undefined && args.terminated_at !== null) {
      this.terminated_at = args.terminated_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field terminated_at is unset!');
    }
  }
};
ContractTerminated.prototype = {};
ContractTerminated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.terminated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractTerminated.prototype.write = function(output) {
  output.writeStructBegin('ContractTerminated');
  if (this.terminated_at !== null && this.terminated_at !== undefined) {
    output.writeFieldBegin('terminated_at', Thrift.Type.STRING, 1);
    output.writeString(this.terminated_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExpired = module.exports.ContractExpired = function(args) {
};
ContractExpired.prototype = {};
ContractExpired.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExpired.prototype.write = function(output) {
  output.writeStructBegin('ContractExpired');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CategoryRef = module.exports.CategoryRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
CategoryRef.prototype = {};
CategoryRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CategoryRef.prototype.write = function(output) {
  output.writeStructBegin('CategoryRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Category = module.exports.Category = function(args) {
  this.name = null;
  this.description = null;
  this.type = 0;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Category.prototype = {};
Category.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Category.prototype.write = function(output) {
  output.writeStructBegin('Category');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractTemplateRef = module.exports.ContractTemplateRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
ContractTemplateRef.prototype = {};
ContractTemplateRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractTemplateRef.prototype.write = function(output) {
  output.writeStructBegin('ContractTemplateRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractTemplate = module.exports.ContractTemplate = function(args) {
  this.name = null;
  this.description = null;
  this.valid_since = null;
  this.valid_until = null;
  this.terms = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.valid_since !== undefined && args.valid_since !== null) {
      this.valid_since = new ttypes.Lifetime(args.valid_since);
    }
    if (args.valid_until !== undefined && args.valid_until !== null) {
      this.valid_until = new ttypes.Lifetime(args.valid_until);
    }
    if (args.terms !== undefined && args.terms !== null) {
      this.terms = new ttypes.TermSetHierarchyRef(args.terms);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field terms is unset!');
    }
  }
};
ContractTemplate.prototype = {};
ContractTemplate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.valid_since = new ttypes.Lifetime();
        this.valid_since.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.valid_until = new ttypes.Lifetime();
        this.valid_until.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.terms = new ttypes.TermSetHierarchyRef();
        this.terms.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractTemplate.prototype.write = function(output) {
  output.writeStructBegin('ContractTemplate');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 5);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.valid_since !== null && this.valid_since !== undefined) {
    output.writeFieldBegin('valid_since', Thrift.Type.STRUCT, 1);
    this.valid_since.write(output);
    output.writeFieldEnd();
  }
  if (this.valid_until !== null && this.valid_until !== undefined) {
    output.writeFieldBegin('valid_until', Thrift.Type.STRUCT, 2);
    this.valid_until.write(output);
    output.writeFieldEnd();
  }
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.STRUCT, 3);
    this.terms.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Lifetime = module.exports.Lifetime = function(args) {
  this.timestamp = null;
  this.interval = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.interval !== undefined && args.interval !== null) {
      this.interval = new ttypes.LifetimeInterval(args.interval);
    }
  }
};
Lifetime.prototype = {};
Lifetime.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.interval = new ttypes.LifetimeInterval();
        this.interval.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Lifetime.prototype.write = function(output) {
  output.writeStructBegin('Lifetime');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.interval !== null && this.interval !== undefined) {
    output.writeFieldBegin('interval', Thrift.Type.STRUCT, 2);
    this.interval.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LifetimeInterval = module.exports.LifetimeInterval = function(args) {
  this.years = null;
  this.months = null;
  this.days = null;
  if (args) {
    if (args.years !== undefined && args.years !== null) {
      this.years = args.years;
    }
    if (args.months !== undefined && args.months !== null) {
      this.months = args.months;
    }
    if (args.days !== undefined && args.days !== null) {
      this.days = args.days;
    }
  }
};
LifetimeInterval.prototype = {};
LifetimeInterval.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.years = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.months = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.days = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LifetimeInterval.prototype.write = function(output) {
  output.writeStructBegin('LifetimeInterval');
  if (this.years !== null && this.years !== undefined) {
    output.writeFieldBegin('years', Thrift.Type.I16, 1);
    output.writeI16(this.years);
    output.writeFieldEnd();
  }
  if (this.months !== null && this.months !== undefined) {
    output.writeFieldBegin('months', Thrift.Type.I16, 2);
    output.writeI16(this.months);
    output.writeFieldEnd();
  }
  if (this.days !== null && this.days !== undefined) {
    output.writeFieldBegin('days', Thrift.Type.I16, 3);
    output.writeI16(this.days);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractTemplateSelector = module.exports.ContractTemplateSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ttypes.ContractTemplateRef(args.value);
    }
  }
};
ContractTemplateSelector.prototype = {};
ContractTemplateSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size95 = 0;
        var _rtmp399;
        this.decisions = [];
        var _etype98 = 0;
        _rtmp399 = input.readListBegin();
        _etype98 = _rtmp399.etype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          var elem101 = null;
          elem101 = new ttypes.ContractTemplateDecision();
          elem101.read(input);
          this.decisions.push(elem101);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.ContractTemplateRef();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractTemplateSelector.prototype.write = function(output) {
  output.writeStructBegin('ContractTemplateSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter102 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter102))
      {
        iter102 = this.decisions[iter102];
        iter102.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractTemplateDecision = module.exports.ContractTemplateDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.ContractTemplateSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
ContractTemplateDecision.prototype = {};
ContractTemplateDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.ContractTemplateSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractTemplateDecision.prototype.write = function(output) {
  output.writeStructBegin('ContractTemplateDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractAdjustment = module.exports.ContractAdjustment = function(args) {
  this.id = null;
  this.created_at = null;
  this.valid_since = null;
  this.valid_until = null;
  this.terms = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.valid_since !== undefined && args.valid_since !== null) {
      this.valid_since = args.valid_since;
    }
    if (args.valid_until !== undefined && args.valid_until !== null) {
      this.valid_until = args.valid_until;
    }
    if (args.terms !== undefined && args.terms !== null) {
      this.terms = new ttypes.TermSetHierarchyRef(args.terms);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field terms is unset!');
    }
  }
};
ContractAdjustment.prototype = {};
ContractAdjustment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.valid_since = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.valid_until = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.terms = new ttypes.TermSetHierarchyRef();
        this.terms.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractAdjustment.prototype.write = function(output) {
  output.writeStructBegin('ContractAdjustment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 5);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.valid_since !== null && this.valid_since !== undefined) {
    output.writeFieldBegin('valid_since', Thrift.Type.STRING, 2);
    output.writeString(this.valid_since);
    output.writeFieldEnd();
  }
  if (this.valid_until !== null && this.valid_until !== undefined) {
    output.writeFieldBegin('valid_until', Thrift.Type.STRING, 3);
    output.writeString(this.valid_until);
    output.writeFieldEnd();
  }
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.STRUCT, 4);
    this.terms.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TermSet = module.exports.TermSet = function(args) {
  this.payments = null;
  this.recurrent_paytools = null;
  this.payouts = null;
  this.reports = null;
  if (args) {
    if (args.payments !== undefined && args.payments !== null) {
      this.payments = new ttypes.PaymentsServiceTerms(args.payments);
    }
    if (args.recurrent_paytools !== undefined && args.recurrent_paytools !== null) {
      this.recurrent_paytools = new ttypes.RecurrentPaytoolsServiceTerms(args.recurrent_paytools);
    }
    if (args.payouts !== undefined && args.payouts !== null) {
      this.payouts = new ttypes.PayoutsServiceTerms(args.payouts);
    }
    if (args.reports !== undefined && args.reports !== null) {
      this.reports = new ttypes.ReportsServiceTerms(args.reports);
    }
  }
};
TermSet.prototype = {};
TermSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payments = new ttypes.PaymentsServiceTerms();
        this.payments.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.recurrent_paytools = new ttypes.RecurrentPaytoolsServiceTerms();
        this.recurrent_paytools.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payouts = new ttypes.PayoutsServiceTerms();
        this.payouts.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.reports = new ttypes.ReportsServiceTerms();
        this.reports.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TermSet.prototype.write = function(output) {
  output.writeStructBegin('TermSet');
  if (this.payments !== null && this.payments !== undefined) {
    output.writeFieldBegin('payments', Thrift.Type.STRUCT, 1);
    this.payments.write(output);
    output.writeFieldEnd();
  }
  if (this.recurrent_paytools !== null && this.recurrent_paytools !== undefined) {
    output.writeFieldBegin('recurrent_paytools', Thrift.Type.STRUCT, 2);
    this.recurrent_paytools.write(output);
    output.writeFieldEnd();
  }
  if (this.payouts !== null && this.payouts !== undefined) {
    output.writeFieldBegin('payouts', Thrift.Type.STRUCT, 3);
    this.payouts.write(output);
    output.writeFieldEnd();
  }
  if (this.reports !== null && this.reports !== undefined) {
    output.writeFieldBegin('reports', Thrift.Type.STRUCT, 4);
    this.reports.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimedTermSet = module.exports.TimedTermSet = function(args) {
  this.action_time = null;
  this.terms = null;
  if (args) {
    if (args.action_time !== undefined && args.action_time !== null) {
      this.action_time = new base_ttypes.TimestampInterval(args.action_time);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field action_time is unset!');
    }
    if (args.terms !== undefined && args.terms !== null) {
      this.terms = new ttypes.TermSet(args.terms);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field terms is unset!');
    }
  }
};
TimedTermSet.prototype = {};
TimedTermSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.action_time = new base_ttypes.TimestampInterval();
        this.action_time.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.terms = new ttypes.TermSet();
        this.terms.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimedTermSet.prototype.write = function(output) {
  output.writeStructBegin('TimedTermSet');
  if (this.action_time !== null && this.action_time !== undefined) {
    output.writeFieldBegin('action_time', Thrift.Type.STRUCT, 1);
    this.action_time.write(output);
    output.writeFieldEnd();
  }
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.STRUCT, 2);
    this.terms.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TermSetHierarchy = module.exports.TermSetHierarchy = function(args) {
  this.name = null;
  this.description = null;
  this.parent_terms = null;
  this.term_sets = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.parent_terms !== undefined && args.parent_terms !== null) {
      this.parent_terms = new ttypes.TermSetHierarchyRef(args.parent_terms);
    }
    if (args.term_sets !== undefined && args.term_sets !== null) {
      this.term_sets = Thrift.copyList(args.term_sets, [ttypes.TimedTermSet]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field term_sets is unset!');
    }
  }
};
TermSetHierarchy.prototype = {};
TermSetHierarchy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.parent_terms = new ttypes.TermSetHierarchyRef();
        this.parent_terms.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size103 = 0;
        var _rtmp3107;
        this.term_sets = [];
        var _etype106 = 0;
        _rtmp3107 = input.readListBegin();
        _etype106 = _rtmp3107.etype;
        _size103 = _rtmp3107.size;
        for (var _i108 = 0; _i108 < _size103; ++_i108)
        {
          var elem109 = null;
          elem109 = new ttypes.TimedTermSet();
          elem109.read(input);
          this.term_sets.push(elem109);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TermSetHierarchy.prototype.write = function(output) {
  output.writeStructBegin('TermSetHierarchy');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.parent_terms !== null && this.parent_terms !== undefined) {
    output.writeFieldBegin('parent_terms', Thrift.Type.STRUCT, 1);
    this.parent_terms.write(output);
    output.writeFieldEnd();
  }
  if (this.term_sets !== null && this.term_sets !== undefined) {
    output.writeFieldBegin('term_sets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.term_sets.length);
    for (var iter110 in this.term_sets)
    {
      if (this.term_sets.hasOwnProperty(iter110))
      {
        iter110 = this.term_sets[iter110];
        iter110.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TermSetHierarchyRef = module.exports.TermSetHierarchyRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
TermSetHierarchyRef.prototype = {};
TermSetHierarchyRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TermSetHierarchyRef.prototype.write = function(output) {
  output.writeStructBegin('TermSetHierarchyRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentsServiceTerms = module.exports.PaymentsServiceTerms = function(args) {
  this.currencies = null;
  this.categories = null;
  this.payment_methods = null;
  this.cash_limit = null;
  this.fees = null;
  this.holds = null;
  this.refunds = null;
  if (args) {
    if (args.currencies !== undefined && args.currencies !== null) {
      this.currencies = new ttypes.CurrencySelector(args.currencies);
    }
    if (args.categories !== undefined && args.categories !== null) {
      this.categories = new ttypes.CategorySelector(args.categories);
    }
    if (args.payment_methods !== undefined && args.payment_methods !== null) {
      this.payment_methods = new ttypes.PaymentMethodSelector(args.payment_methods);
    }
    if (args.cash_limit !== undefined && args.cash_limit !== null) {
      this.cash_limit = new ttypes.CashLimitSelector(args.cash_limit);
    }
    if (args.fees !== undefined && args.fees !== null) {
      this.fees = new ttypes.CashFlowSelector(args.fees);
    }
    if (args.holds !== undefined && args.holds !== null) {
      this.holds = new ttypes.PaymentHoldsServiceTerms(args.holds);
    }
    if (args.refunds !== undefined && args.refunds !== null) {
      this.refunds = new ttypes.PaymentRefundsServiceTerms(args.refunds);
    }
  }
};
PaymentsServiceTerms.prototype = {};
PaymentsServiceTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.currencies = new ttypes.CurrencySelector();
        this.currencies.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.categories = new ttypes.CategorySelector();
        this.categories.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_methods = new ttypes.PaymentMethodSelector();
        this.payment_methods.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash_limit = new ttypes.CashLimitSelector();
        this.cash_limit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.fees = new ttypes.CashFlowSelector();
        this.fees.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.holds = new ttypes.PaymentHoldsServiceTerms();
        this.holds.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.refunds = new ttypes.PaymentRefundsServiceTerms();
        this.refunds.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentsServiceTerms.prototype.write = function(output) {
  output.writeStructBegin('PaymentsServiceTerms');
  if (this.currencies !== null && this.currencies !== undefined) {
    output.writeFieldBegin('currencies', Thrift.Type.STRUCT, 1);
    this.currencies.write(output);
    output.writeFieldEnd();
  }
  if (this.categories !== null && this.categories !== undefined) {
    output.writeFieldBegin('categories', Thrift.Type.STRUCT, 2);
    this.categories.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_methods !== null && this.payment_methods !== undefined) {
    output.writeFieldBegin('payment_methods', Thrift.Type.STRUCT, 4);
    this.payment_methods.write(output);
    output.writeFieldEnd();
  }
  if (this.cash_limit !== null && this.cash_limit !== undefined) {
    output.writeFieldBegin('cash_limit', Thrift.Type.STRUCT, 5);
    this.cash_limit.write(output);
    output.writeFieldEnd();
  }
  if (this.fees !== null && this.fees !== undefined) {
    output.writeFieldBegin('fees', Thrift.Type.STRUCT, 6);
    this.fees.write(output);
    output.writeFieldEnd();
  }
  if (this.holds !== null && this.holds !== undefined) {
    output.writeFieldBegin('holds', Thrift.Type.STRUCT, 9);
    this.holds.write(output);
    output.writeFieldEnd();
  }
  if (this.refunds !== null && this.refunds !== undefined) {
    output.writeFieldBegin('refunds', Thrift.Type.STRUCT, 8);
    this.refunds.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentHoldsServiceTerms = module.exports.PaymentHoldsServiceTerms = function(args) {
  this.payment_methods = null;
  this.lifetime = null;
  if (args) {
    if (args.payment_methods !== undefined && args.payment_methods !== null) {
      this.payment_methods = new ttypes.PaymentMethodSelector(args.payment_methods);
    }
    if (args.lifetime !== undefined && args.lifetime !== null) {
      this.lifetime = new ttypes.HoldLifetimeSelector(args.lifetime);
    }
  }
};
PaymentHoldsServiceTerms.prototype = {};
PaymentHoldsServiceTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_methods = new ttypes.PaymentMethodSelector();
        this.payment_methods.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lifetime = new ttypes.HoldLifetimeSelector();
        this.lifetime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentHoldsServiceTerms.prototype.write = function(output) {
  output.writeStructBegin('PaymentHoldsServiceTerms');
  if (this.payment_methods !== null && this.payment_methods !== undefined) {
    output.writeFieldBegin('payment_methods', Thrift.Type.STRUCT, 1);
    this.payment_methods.write(output);
    output.writeFieldEnd();
  }
  if (this.lifetime !== null && this.lifetime !== undefined) {
    output.writeFieldBegin('lifetime', Thrift.Type.STRUCT, 2);
    this.lifetime.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentRefundsServiceTerms = module.exports.PaymentRefundsServiceTerms = function(args) {
  this.payment_methods = null;
  this.fees = null;
  this.eligibility_time = null;
  this.partial_refunds = null;
  if (args) {
    if (args.payment_methods !== undefined && args.payment_methods !== null) {
      this.payment_methods = new ttypes.PaymentMethodSelector(args.payment_methods);
    }
    if (args.fees !== undefined && args.fees !== null) {
      this.fees = new ttypes.CashFlowSelector(args.fees);
    }
    if (args.eligibility_time !== undefined && args.eligibility_time !== null) {
      this.eligibility_time = new ttypes.TimeSpanSelector(args.eligibility_time);
    }
    if (args.partial_refunds !== undefined && args.partial_refunds !== null) {
      this.partial_refunds = new ttypes.PartialRefundsServiceTerms(args.partial_refunds);
    }
  }
};
PaymentRefundsServiceTerms.prototype = {};
PaymentRefundsServiceTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_methods = new ttypes.PaymentMethodSelector();
        this.payment_methods.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fees = new ttypes.CashFlowSelector();
        this.fees.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.eligibility_time = new ttypes.TimeSpanSelector();
        this.eligibility_time.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.partial_refunds = new ttypes.PartialRefundsServiceTerms();
        this.partial_refunds.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentRefundsServiceTerms.prototype.write = function(output) {
  output.writeStructBegin('PaymentRefundsServiceTerms');
  if (this.payment_methods !== null && this.payment_methods !== undefined) {
    output.writeFieldBegin('payment_methods', Thrift.Type.STRUCT, 1);
    this.payment_methods.write(output);
    output.writeFieldEnd();
  }
  if (this.fees !== null && this.fees !== undefined) {
    output.writeFieldBegin('fees', Thrift.Type.STRUCT, 2);
    this.fees.write(output);
    output.writeFieldEnd();
  }
  if (this.eligibility_time !== null && this.eligibility_time !== undefined) {
    output.writeFieldBegin('eligibility_time', Thrift.Type.STRUCT, 3);
    this.eligibility_time.write(output);
    output.writeFieldEnd();
  }
  if (this.partial_refunds !== null && this.partial_refunds !== undefined) {
    output.writeFieldBegin('partial_refunds', Thrift.Type.STRUCT, 4);
    this.partial_refunds.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartialRefundsServiceTerms = module.exports.PartialRefundsServiceTerms = function(args) {
  this.cash_limit = null;
  if (args) {
    if (args.cash_limit !== undefined && args.cash_limit !== null) {
      this.cash_limit = new ttypes.CashLimitSelector(args.cash_limit);
    }
  }
};
PartialRefundsServiceTerms.prototype = {};
PartialRefundsServiceTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash_limit = new ttypes.CashLimitSelector();
        this.cash_limit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartialRefundsServiceTerms.prototype.write = function(output) {
  output.writeStructBegin('PartialRefundsServiceTerms');
  if (this.cash_limit !== null && this.cash_limit !== undefined) {
    output.writeFieldBegin('cash_limit', Thrift.Type.STRUCT, 1);
    this.cash_limit.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaytoolsServiceTerms = module.exports.RecurrentPaytoolsServiceTerms = function(args) {
  this.payment_methods = null;
  if (args) {
    if (args.payment_methods !== undefined && args.payment_methods !== null) {
      this.payment_methods = new ttypes.PaymentMethodSelector(args.payment_methods);
    }
  }
};
RecurrentPaytoolsServiceTerms.prototype = {};
RecurrentPaytoolsServiceTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_methods = new ttypes.PaymentMethodSelector();
        this.payment_methods.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaytoolsServiceTerms.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaytoolsServiceTerms');
  if (this.payment_methods !== null && this.payment_methods !== undefined) {
    output.writeFieldBegin('payment_methods', Thrift.Type.STRUCT, 1);
    this.payment_methods.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutsServiceTerms = module.exports.PayoutsServiceTerms = function(args) {
  this.payout_schedules = null;
  this.payout_methods = null;
  this.cash_limit = null;
  this.fees = null;
  if (args) {
    if (args.payout_schedules !== undefined && args.payout_schedules !== null) {
      this.payout_schedules = new ttypes.BusinessScheduleSelector(args.payout_schedules);
    }
    if (args.payout_methods !== undefined && args.payout_methods !== null) {
      this.payout_methods = new ttypes.PayoutMethodSelector(args.payout_methods);
    }
    if (args.cash_limit !== undefined && args.cash_limit !== null) {
      this.cash_limit = new ttypes.CashLimitSelector(args.cash_limit);
    }
    if (args.fees !== undefined && args.fees !== null) {
      this.fees = new ttypes.CashFlowSelector(args.fees);
    }
  }
};
PayoutsServiceTerms.prototype = {};
PayoutsServiceTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_schedules = new ttypes.BusinessScheduleSelector();
        this.payout_schedules.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_methods = new ttypes.PayoutMethodSelector();
        this.payout_methods.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash_limit = new ttypes.CashLimitSelector();
        this.cash_limit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fees = new ttypes.CashFlowSelector();
        this.fees.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutsServiceTerms.prototype.write = function(output) {
  output.writeStructBegin('PayoutsServiceTerms');
  if (this.payout_schedules !== null && this.payout_schedules !== undefined) {
    output.writeFieldBegin('payout_schedules', Thrift.Type.STRUCT, 4);
    this.payout_schedules.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_methods !== null && this.payout_methods !== undefined) {
    output.writeFieldBegin('payout_methods', Thrift.Type.STRUCT, 1);
    this.payout_methods.write(output);
    output.writeFieldEnd();
  }
  if (this.cash_limit !== null && this.cash_limit !== undefined) {
    output.writeFieldBegin('cash_limit', Thrift.Type.STRUCT, 2);
    this.cash_limit.write(output);
    output.writeFieldEnd();
  }
  if (this.fees !== null && this.fees !== undefined) {
    output.writeFieldBegin('fees', Thrift.Type.STRUCT, 3);
    this.fees.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutCompilationPolicy = module.exports.PayoutCompilationPolicy = function(args) {
  this.assets_freeze_for = null;
  if (args) {
    if (args.assets_freeze_for !== undefined && args.assets_freeze_for !== null) {
      this.assets_freeze_for = new base_ttypes.TimeSpan(args.assets_freeze_for);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assets_freeze_for is unset!');
    }
  }
};
PayoutCompilationPolicy.prototype = {};
PayoutCompilationPolicy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.assets_freeze_for = new base_ttypes.TimeSpan();
        this.assets_freeze_for.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutCompilationPolicy.prototype.write = function(output) {
  output.writeStructBegin('PayoutCompilationPolicy');
  if (this.assets_freeze_for !== null && this.assets_freeze_for !== undefined) {
    output.writeFieldBegin('assets_freeze_for', Thrift.Type.STRUCT, 1);
    this.assets_freeze_for.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutMethodRef = module.exports.PayoutMethodRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PayoutMethodRef.prototype = {};
PayoutMethodRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutMethodRef.prototype.write = function(output) {
  output.writeStructBegin('PayoutMethodRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutMethodDefinition = module.exports.PayoutMethodDefinition = function(args) {
  this.name = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
  }
};
PayoutMethodDefinition.prototype = {};
PayoutMethodDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutMethodDefinition.prototype.write = function(output) {
  output.writeStructBegin('PayoutMethodDefinition');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutMethodSelector = module.exports.PayoutMethodSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [ttypes.PayoutMethodRef]);
    }
  }
};
PayoutMethodSelector.prototype = {};
PayoutMethodSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size111 = 0;
        var _rtmp3115;
        this.decisions = [];
        var _etype114 = 0;
        _rtmp3115 = input.readListBegin();
        _etype114 = _rtmp3115.etype;
        _size111 = _rtmp3115.size;
        for (var _i116 = 0; _i116 < _size111; ++_i116)
        {
          var elem117 = null;
          elem117 = new ttypes.PayoutMethodDecision();
          elem117.read(input);
          this.decisions.push(elem117);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size118 = 0;
        var _rtmp3122;
        this.value = [];
        var _etype121 = 0;
        _rtmp3122 = input.readSetBegin();
        _etype121 = _rtmp3122.etype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var elem124 = null;
          elem124 = new ttypes.PayoutMethodRef();
          elem124.read(input);
          this.value.push(elem124);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutMethodSelector.prototype.write = function(output) {
  output.writeStructBegin('PayoutMethodSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter125 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter125))
      {
        iter125 = this.decisions[iter125];
        iter125.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.value.length);
    for (var iter126 in this.value)
    {
      if (this.value.hasOwnProperty(iter126))
      {
        iter126 = this.value[iter126];
        iter126.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutMethodDecision = module.exports.PayoutMethodDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.PayoutMethodSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
PayoutMethodDecision.prototype = {};
PayoutMethodDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.PayoutMethodSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutMethodDecision.prototype.write = function(output) {
  output.writeStructBegin('PayoutMethodDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReportsServiceTerms = module.exports.ReportsServiceTerms = function(args) {
  this.acts = null;
  if (args) {
    if (args.acts !== undefined && args.acts !== null) {
      this.acts = new ttypes.ServiceAcceptanceActsTerms(args.acts);
    }
  }
};
ReportsServiceTerms.prototype = {};
ReportsServiceTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.acts = new ttypes.ServiceAcceptanceActsTerms();
        this.acts.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportsServiceTerms.prototype.write = function(output) {
  output.writeStructBegin('ReportsServiceTerms');
  if (this.acts !== null && this.acts !== undefined) {
    output.writeFieldBegin('acts', Thrift.Type.STRUCT, 1);
    this.acts.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServiceAcceptanceActsTerms = module.exports.ServiceAcceptanceActsTerms = function(args) {
  this.schedules = null;
  if (args) {
    if (args.schedules !== undefined && args.schedules !== null) {
      this.schedules = new ttypes.BusinessScheduleSelector(args.schedules);
    }
  }
};
ServiceAcceptanceActsTerms.prototype = {};
ServiceAcceptanceActsTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedules = new ttypes.BusinessScheduleSelector();
        this.schedules.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceAcceptanceActsTerms.prototype.write = function(output) {
  output.writeStructBegin('ServiceAcceptanceActsTerms');
  if (this.schedules !== null && this.schedules !== undefined) {
    output.writeFieldBegin('schedules', Thrift.Type.STRUCT, 1);
    this.schedules.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CurrencyRef = module.exports.CurrencyRef = function(args) {
  this.symbolic_code = null;
  if (args) {
    if (args.symbolic_code !== undefined && args.symbolic_code !== null) {
      this.symbolic_code = args.symbolic_code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field symbolic_code is unset!');
    }
  }
};
CurrencyRef.prototype = {};
CurrencyRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbolic_code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CurrencyRef.prototype.write = function(output) {
  output.writeStructBegin('CurrencyRef');
  if (this.symbolic_code !== null && this.symbolic_code !== undefined) {
    output.writeFieldBegin('symbolic_code', Thrift.Type.STRING, 1);
    output.writeString(this.symbolic_code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Currency = module.exports.Currency = function(args) {
  this.name = null;
  this.symbolic_code = null;
  this.numeric_code = null;
  this.exponent = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.symbolic_code !== undefined && args.symbolic_code !== null) {
      this.symbolic_code = args.symbolic_code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field symbolic_code is unset!');
    }
    if (args.numeric_code !== undefined && args.numeric_code !== null) {
      this.numeric_code = args.numeric_code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field numeric_code is unset!');
    }
    if (args.exponent !== undefined && args.exponent !== null) {
      this.exponent = args.exponent;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field exponent is unset!');
    }
  }
};
Currency.prototype = {};
Currency.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.symbolic_code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.numeric_code = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.exponent = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Currency.prototype.write = function(output) {
  output.writeStructBegin('Currency');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.symbolic_code !== null && this.symbolic_code !== undefined) {
    output.writeFieldBegin('symbolic_code', Thrift.Type.STRING, 2);
    output.writeString(this.symbolic_code);
    output.writeFieldEnd();
  }
  if (this.numeric_code !== null && this.numeric_code !== undefined) {
    output.writeFieldBegin('numeric_code', Thrift.Type.I16, 3);
    output.writeI16(this.numeric_code);
    output.writeFieldEnd();
  }
  if (this.exponent !== null && this.exponent !== undefined) {
    output.writeFieldBegin('exponent', Thrift.Type.I16, 4);
    output.writeI16(this.exponent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CurrencySelector = module.exports.CurrencySelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [ttypes.CurrencyRef]);
    }
  }
};
CurrencySelector.prototype = {};
CurrencySelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size127 = 0;
        var _rtmp3131;
        this.decisions = [];
        var _etype130 = 0;
        _rtmp3131 = input.readListBegin();
        _etype130 = _rtmp3131.etype;
        _size127 = _rtmp3131.size;
        for (var _i132 = 0; _i132 < _size127; ++_i132)
        {
          var elem133 = null;
          elem133 = new ttypes.CurrencyDecision();
          elem133.read(input);
          this.decisions.push(elem133);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size134 = 0;
        var _rtmp3138;
        this.value = [];
        var _etype137 = 0;
        _rtmp3138 = input.readSetBegin();
        _etype137 = _rtmp3138.etype;
        _size134 = _rtmp3138.size;
        for (var _i139 = 0; _i139 < _size134; ++_i139)
        {
          var elem140 = null;
          elem140 = new ttypes.CurrencyRef();
          elem140.read(input);
          this.value.push(elem140);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CurrencySelector.prototype.write = function(output) {
  output.writeStructBegin('CurrencySelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter141 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter141))
      {
        iter141 = this.decisions[iter141];
        iter141.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.value.length);
    for (var iter142 in this.value)
    {
      if (this.value.hasOwnProperty(iter142))
      {
        iter142 = this.value[iter142];
        iter142.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CurrencyDecision = module.exports.CurrencyDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.CurrencySelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
CurrencyDecision.prototype = {};
CurrencyDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.CurrencySelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CurrencyDecision.prototype.write = function(output) {
  output.writeStructBegin('CurrencyDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CategorySelector = module.exports.CategorySelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [ttypes.CategoryRef]);
    }
  }
};
CategorySelector.prototype = {};
CategorySelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size143 = 0;
        var _rtmp3147;
        this.decisions = [];
        var _etype146 = 0;
        _rtmp3147 = input.readListBegin();
        _etype146 = _rtmp3147.etype;
        _size143 = _rtmp3147.size;
        for (var _i148 = 0; _i148 < _size143; ++_i148)
        {
          var elem149 = null;
          elem149 = new ttypes.CategoryDecision();
          elem149.read(input);
          this.decisions.push(elem149);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size150 = 0;
        var _rtmp3154;
        this.value = [];
        var _etype153 = 0;
        _rtmp3154 = input.readSetBegin();
        _etype153 = _rtmp3154.etype;
        _size150 = _rtmp3154.size;
        for (var _i155 = 0; _i155 < _size150; ++_i155)
        {
          var elem156 = null;
          elem156 = new ttypes.CategoryRef();
          elem156.read(input);
          this.value.push(elem156);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CategorySelector.prototype.write = function(output) {
  output.writeStructBegin('CategorySelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter157 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter157))
      {
        iter157 = this.decisions[iter157];
        iter157.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.value.length);
    for (var iter158 in this.value)
    {
      if (this.value.hasOwnProperty(iter158))
      {
        iter158 = this.value[iter158];
        iter158.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CategoryDecision = module.exports.CategoryDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.CategorySelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
CategoryDecision.prototype = {};
CategoryDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.CategorySelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CategoryDecision.prototype.write = function(output) {
  output.writeStructBegin('CategoryDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BusinessScheduleRef = module.exports.BusinessScheduleRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
BusinessScheduleRef.prototype = {};
BusinessScheduleRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessScheduleRef.prototype.write = function(output) {
  output.writeStructBegin('BusinessScheduleRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BusinessSchedule = module.exports.BusinessSchedule = function(args) {
  this.name = null;
  this.description = null;
  this.schedule = null;
  this.delay = null;
  this.policy = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = new base_ttypes.Schedule(args.schedule);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field schedule is unset!');
    }
    if (args.delay !== undefined && args.delay !== null) {
      this.delay = new base_ttypes.TimeSpan(args.delay);
    }
    if (args.policy !== undefined && args.policy !== null) {
      this.policy = new ttypes.PayoutCompilationPolicy(args.policy);
    }
  }
};
BusinessSchedule.prototype = {};
BusinessSchedule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedule = new base_ttypes.Schedule();
        this.schedule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.delay = new base_ttypes.TimeSpan();
        this.delay.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.policy = new ttypes.PayoutCompilationPolicy();
        this.policy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessSchedule.prototype.write = function(output) {
  output.writeStructBegin('BusinessSchedule');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRUCT, 3);
    this.schedule.write(output);
    output.writeFieldEnd();
  }
  if (this.delay !== null && this.delay !== undefined) {
    output.writeFieldBegin('delay', Thrift.Type.STRUCT, 5);
    this.delay.write(output);
    output.writeFieldEnd();
  }
  if (this.policy !== null && this.policy !== undefined) {
    output.writeFieldBegin('policy', Thrift.Type.STRUCT, 4);
    this.policy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BusinessScheduleSelector = module.exports.BusinessScheduleSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [ttypes.BusinessScheduleRef]);
    }
  }
};
BusinessScheduleSelector.prototype = {};
BusinessScheduleSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size159 = 0;
        var _rtmp3163;
        this.decisions = [];
        var _etype162 = 0;
        _rtmp3163 = input.readListBegin();
        _etype162 = _rtmp3163.etype;
        _size159 = _rtmp3163.size;
        for (var _i164 = 0; _i164 < _size159; ++_i164)
        {
          var elem165 = null;
          elem165 = new ttypes.BusinessScheduleDecision();
          elem165.read(input);
          this.decisions.push(elem165);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size166 = 0;
        var _rtmp3170;
        this.value = [];
        var _etype169 = 0;
        _rtmp3170 = input.readSetBegin();
        _etype169 = _rtmp3170.etype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var elem172 = null;
          elem172 = new ttypes.BusinessScheduleRef();
          elem172.read(input);
          this.value.push(elem172);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessScheduleSelector.prototype.write = function(output) {
  output.writeStructBegin('BusinessScheduleSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter173 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter173))
      {
        iter173 = this.decisions[iter173];
        iter173.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.value.length);
    for (var iter174 in this.value)
    {
      if (this.value.hasOwnProperty(iter174))
      {
        iter174 = this.value[iter174];
        iter174.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BusinessScheduleDecision = module.exports.BusinessScheduleDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.BusinessScheduleSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
BusinessScheduleDecision.prototype = {};
BusinessScheduleDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.BusinessScheduleSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessScheduleDecision.prototype.write = function(output) {
  output.writeStructBegin('BusinessScheduleDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CalendarRef = module.exports.CalendarRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
CalendarRef.prototype = {};
CalendarRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarRef.prototype.write = function(output) {
  output.writeStructBegin('CalendarRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Calendar = module.exports.Calendar = function(args) {
  this.name = null;
  this.description = null;
  this.timezone = null;
  this.holidays = null;
  this.first_day_of_week = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.timezone !== undefined && args.timezone !== null) {
      this.timezone = args.timezone;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timezone is unset!');
    }
    if (args.holidays !== undefined && args.holidays !== null) {
      this.holidays = Thrift.copyMap(args.holidays, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field holidays is unset!');
    }
    if (args.first_day_of_week !== undefined && args.first_day_of_week !== null) {
      this.first_day_of_week = args.first_day_of_week;
    }
  }
};
Calendar.prototype = {};
Calendar.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timezone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size175 = 0;
        var _rtmp3179;
        this.holidays = new Map();
        var _ktype176 = 0;
        var _vtype177 = 0;
        _rtmp3179 = input.readMapBegin();
        _ktype176 = _rtmp3179.ktype;
        _vtype177 = _rtmp3179.vtype;
        _size175 = _rtmp3179.size;
        for (var _i180 = 0; _i180 < _size175; ++_i180)
        {
          var key181 = null;
          var val182 = null;
          key181 = input.readI32();
          var _size183 = 0;
          var _rtmp3187;
          val182 = [];
          var _etype186 = 0;
          _rtmp3187 = input.readSetBegin();
          _etype186 = _rtmp3187.etype;
          _size183 = _rtmp3187.size;
          for (var _i188 = 0; _i188 < _size183; ++_i188)
          {
            var elem189 = null;
            elem189 = new ttypes.CalendarHoliday();
            elem189.read(input);
            val182.push(elem189);
          }
          input.readSetEnd();
          this.holidays.set(key181, val182);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.first_day_of_week = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Calendar.prototype.write = function(output) {
  output.writeStructBegin('Calendar');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.timezone !== null && this.timezone !== undefined) {
    output.writeFieldBegin('timezone', Thrift.Type.STRING, 3);
    output.writeString(this.timezone);
    output.writeFieldEnd();
  }
  if (this.holidays !== null && this.holidays !== undefined) {
    output.writeFieldBegin('holidays', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, this.holidays.size);
    var func192 = function(viter191, kiter190) {
      output.writeI32(kiter190);
      output.writeSetBegin(Thrift.Type.STRUCT, viter191.length);
      for (var iter193 in viter191)
      {
        if (viter191.hasOwnProperty(iter193))
        {
          iter193 = viter191[iter193];
          iter193.write(output);
        }
      }
      output.writeSetEnd();
    };
    this.holidays.forEach(func192);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.first_day_of_week !== null && this.first_day_of_week !== undefined) {
    output.writeFieldBegin('first_day_of_week', Thrift.Type.I32, 5);
    output.writeI32(this.first_day_of_week);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CalendarHoliday = module.exports.CalendarHoliday = function(args) {
  this.name = null;
  this.description = null;
  this.day = null;
  this.month = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.day !== undefined && args.day !== null) {
      this.day = args.day;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field day is unset!');
    }
    if (args.month !== undefined && args.month !== null) {
      this.month = args.month;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field month is unset!');
    }
  }
};
CalendarHoliday.prototype = {};
CalendarHoliday.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.day = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.month = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarHoliday.prototype.write = function(output) {
  output.writeStructBegin('CalendarHoliday');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.day !== null && this.day !== undefined) {
    output.writeFieldBegin('day', Thrift.Type.BYTE, 3);
    output.writeByte(this.day);
    output.writeFieldEnd();
  }
  if (this.month !== null && this.month !== undefined) {
    output.writeFieldBegin('month', Thrift.Type.I32, 4);
    output.writeI32(this.month);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashRange = module.exports.CashRange = function(args) {
  this.upper = null;
  this.lower = null;
  if (args) {
    if (args.upper !== undefined && args.upper !== null) {
      this.upper = new ttypes.CashBound(args.upper);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field upper is unset!');
    }
    if (args.lower !== undefined && args.lower !== null) {
      this.lower = new ttypes.CashBound(args.lower);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lower is unset!');
    }
  }
};
CashRange.prototype = {};
CashRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.upper = new ttypes.CashBound();
        this.upper.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lower = new ttypes.CashBound();
        this.lower.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashRange.prototype.write = function(output) {
  output.writeStructBegin('CashRange');
  if (this.upper !== null && this.upper !== undefined) {
    output.writeFieldBegin('upper', Thrift.Type.STRUCT, 1);
    this.upper.write(output);
    output.writeFieldEnd();
  }
  if (this.lower !== null && this.lower !== undefined) {
    output.writeFieldBegin('lower', Thrift.Type.STRUCT, 2);
    this.lower.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashBound = module.exports.CashBound = function(args) {
  this.inclusive = null;
  this.exclusive = null;
  if (args) {
    if (args.inclusive !== undefined && args.inclusive !== null) {
      this.inclusive = new ttypes.Cash(args.inclusive);
    }
    if (args.exclusive !== undefined && args.exclusive !== null) {
      this.exclusive = new ttypes.Cash(args.exclusive);
    }
  }
};
CashBound.prototype = {};
CashBound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.inclusive = new ttypes.Cash();
        this.inclusive.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.exclusive = new ttypes.Cash();
        this.exclusive.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashBound.prototype.write = function(output) {
  output.writeStructBegin('CashBound');
  if (this.inclusive !== null && this.inclusive !== undefined) {
    output.writeFieldBegin('inclusive', Thrift.Type.STRUCT, 1);
    this.inclusive.write(output);
    output.writeFieldEnd();
  }
  if (this.exclusive !== null && this.exclusive !== undefined) {
    output.writeFieldBegin('exclusive', Thrift.Type.STRUCT, 2);
    this.exclusive.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashLimitSelector = module.exports.CashLimitSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ttypes.CashRange(args.value);
    }
  }
};
CashLimitSelector.prototype = {};
CashLimitSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size194 = 0;
        var _rtmp3198;
        this.decisions = [];
        var _etype197 = 0;
        _rtmp3198 = input.readListBegin();
        _etype197 = _rtmp3198.etype;
        _size194 = _rtmp3198.size;
        for (var _i199 = 0; _i199 < _size194; ++_i199)
        {
          var elem200 = null;
          elem200 = new ttypes.CashLimitDecision();
          elem200.read(input);
          this.decisions.push(elem200);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.CashRange();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashLimitSelector.prototype.write = function(output) {
  output.writeStructBegin('CashLimitSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter201 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter201))
      {
        iter201 = this.decisions[iter201];
        iter201.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashLimitDecision = module.exports.CashLimitDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.CashLimitSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
CashLimitDecision.prototype = {};
CashLimitDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.CashLimitSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashLimitDecision.prototype.write = function(output) {
  output.writeStructBegin('CashLimitDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentMethod = module.exports.PaymentMethod = function(args) {
  this.bank_card = null;
  this.payment_terminal = null;
  this.digital_wallet = null;
  this.tokenized_bank_card = null;
  if (args) {
    if (args.bank_card !== undefined && args.bank_card !== null) {
      this.bank_card = args.bank_card;
    }
    if (args.payment_terminal !== undefined && args.payment_terminal !== null) {
      this.payment_terminal = args.payment_terminal;
    }
    if (args.digital_wallet !== undefined && args.digital_wallet !== null) {
      this.digital_wallet = args.digital_wallet;
    }
    if (args.tokenized_bank_card !== undefined && args.tokenized_bank_card !== null) {
      this.tokenized_bank_card = new ttypes.TokenizedBankCard(args.tokenized_bank_card);
    }
  }
};
PaymentMethod.prototype = {};
PaymentMethod.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bank_card = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.payment_terminal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.digital_wallet = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokenized_bank_card = new ttypes.TokenizedBankCard();
        this.tokenized_bank_card.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentMethod.prototype.write = function(output) {
  output.writeStructBegin('PaymentMethod');
  if (this.bank_card !== null && this.bank_card !== undefined) {
    output.writeFieldBegin('bank_card', Thrift.Type.I32, 1);
    output.writeI32(this.bank_card);
    output.writeFieldEnd();
  }
  if (this.payment_terminal !== null && this.payment_terminal !== undefined) {
    output.writeFieldBegin('payment_terminal', Thrift.Type.I32, 2);
    output.writeI32(this.payment_terminal);
    output.writeFieldEnd();
  }
  if (this.digital_wallet !== null && this.digital_wallet !== undefined) {
    output.writeFieldBegin('digital_wallet', Thrift.Type.I32, 3);
    output.writeI32(this.digital_wallet);
    output.writeFieldEnd();
  }
  if (this.tokenized_bank_card !== null && this.tokenized_bank_card !== undefined) {
    output.writeFieldBegin('tokenized_bank_card', Thrift.Type.STRUCT, 4);
    this.tokenized_bank_card.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenizedBankCard = module.exports.TokenizedBankCard = function(args) {
  this.payment_system = null;
  this.token_provider = null;
  if (args) {
    if (args.payment_system !== undefined && args.payment_system !== null) {
      this.payment_system = args.payment_system;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_system is unset!');
    }
    if (args.token_provider !== undefined && args.token_provider !== null) {
      this.token_provider = args.token_provider;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token_provider is unset!');
    }
  }
};
TokenizedBankCard.prototype = {};
TokenizedBankCard.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.payment_system = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.token_provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenizedBankCard.prototype.write = function(output) {
  output.writeStructBegin('TokenizedBankCard');
  if (this.payment_system !== null && this.payment_system !== undefined) {
    output.writeFieldBegin('payment_system', Thrift.Type.I32, 1);
    output.writeI32(this.payment_system);
    output.writeFieldEnd();
  }
  if (this.token_provider !== null && this.token_provider !== undefined) {
    output.writeFieldBegin('token_provider', Thrift.Type.I32, 2);
    output.writeI32(this.token_provider);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentTool = module.exports.PaymentTool = function(args) {
  this.bank_card = null;
  this.payment_terminal = null;
  this.digital_wallet = null;
  if (args) {
    if (args.bank_card !== undefined && args.bank_card !== null) {
      this.bank_card = new ttypes.BankCard(args.bank_card);
    }
    if (args.payment_terminal !== undefined && args.payment_terminal !== null) {
      this.payment_terminal = new ttypes.PaymentTerminal(args.payment_terminal);
    }
    if (args.digital_wallet !== undefined && args.digital_wallet !== null) {
      this.digital_wallet = new ttypes.DigitalWallet(args.digital_wallet);
    }
  }
};
PaymentTool.prototype = {};
PaymentTool.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bank_card = new ttypes.BankCard();
        this.bank_card.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_terminal = new ttypes.PaymentTerminal();
        this.payment_terminal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.digital_wallet = new ttypes.DigitalWallet();
        this.digital_wallet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentTool.prototype.write = function(output) {
  output.writeStructBegin('PaymentTool');
  if (this.bank_card !== null && this.bank_card !== undefined) {
    output.writeFieldBegin('bank_card', Thrift.Type.STRUCT, 1);
    this.bank_card.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_terminal !== null && this.payment_terminal !== undefined) {
    output.writeFieldBegin('payment_terminal', Thrift.Type.STRUCT, 2);
    this.payment_terminal.write(output);
    output.writeFieldEnd();
  }
  if (this.digital_wallet !== null && this.digital_wallet !== undefined) {
    output.writeFieldBegin('digital_wallet', Thrift.Type.STRUCT, 3);
    this.digital_wallet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DisposablePaymentResource = module.exports.DisposablePaymentResource = function(args) {
  this.payment_tool = null;
  this.payment_session_id = null;
  this.client_info = null;
  if (args) {
    if (args.payment_tool !== undefined && args.payment_tool !== null) {
      this.payment_tool = new ttypes.PaymentTool(args.payment_tool);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_tool is unset!');
    }
    if (args.payment_session_id !== undefined && args.payment_session_id !== null) {
      this.payment_session_id = args.payment_session_id;
    }
    if (args.client_info !== undefined && args.client_info !== null) {
      this.client_info = new ttypes.ClientInfo(args.client_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field client_info is unset!');
    }
  }
};
DisposablePaymentResource.prototype = {};
DisposablePaymentResource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_tool = new ttypes.PaymentTool();
        this.payment_tool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.payment_session_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.client_info = new ttypes.ClientInfo();
        this.client_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DisposablePaymentResource.prototype.write = function(output) {
  output.writeStructBegin('DisposablePaymentResource');
  if (this.payment_tool !== null && this.payment_tool !== undefined) {
    output.writeFieldBegin('payment_tool', Thrift.Type.STRUCT, 1);
    this.payment_tool.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_session_id !== null && this.payment_session_id !== undefined) {
    output.writeFieldBegin('payment_session_id', Thrift.Type.STRING, 2);
    output.writeString(this.payment_session_id);
    output.writeFieldEnd();
  }
  if (this.client_info !== null && this.client_info !== undefined) {
    output.writeFieldBegin('client_info', Thrift.Type.STRUCT, 3);
    this.client_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BankCard = module.exports.BankCard = function(args) {
  this.token = null;
  this.payment_system = null;
  this.bin = null;
  this.masked_pan = null;
  this.token_provider = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.payment_system !== undefined && args.payment_system !== null) {
      this.payment_system = args.payment_system;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_system is unset!');
    }
    if (args.bin !== undefined && args.bin !== null) {
      this.bin = args.bin;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bin is unset!');
    }
    if (args.masked_pan !== undefined && args.masked_pan !== null) {
      this.masked_pan = args.masked_pan;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field masked_pan is unset!');
    }
    if (args.token_provider !== undefined && args.token_provider !== null) {
      this.token_provider = args.token_provider;
    }
  }
};
BankCard.prototype = {};
BankCard.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.payment_system = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bin = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.masked_pan = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.token_provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BankCard.prototype.write = function(output) {
  output.writeStructBegin('BankCard');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.payment_system !== null && this.payment_system !== undefined) {
    output.writeFieldBegin('payment_system', Thrift.Type.I32, 2);
    output.writeI32(this.payment_system);
    output.writeFieldEnd();
  }
  if (this.bin !== null && this.bin !== undefined) {
    output.writeFieldBegin('bin', Thrift.Type.STRING, 3);
    output.writeString(this.bin);
    output.writeFieldEnd();
  }
  if (this.masked_pan !== null && this.masked_pan !== undefined) {
    output.writeFieldBegin('masked_pan', Thrift.Type.STRING, 4);
    output.writeString(this.masked_pan);
    output.writeFieldEnd();
  }
  if (this.token_provider !== null && this.token_provider !== undefined) {
    output.writeFieldBegin('token_provider', Thrift.Type.I32, 5);
    output.writeI32(this.token_provider);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentTerminal = module.exports.PaymentTerminal = function(args) {
  this.terminal_type = null;
  if (args) {
    if (args.terminal_type !== undefined && args.terminal_type !== null) {
      this.terminal_type = args.terminal_type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field terminal_type is unset!');
    }
  }
};
PaymentTerminal.prototype = {};
PaymentTerminal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.terminal_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentTerminal.prototype.write = function(output) {
  output.writeStructBegin('PaymentTerminal');
  if (this.terminal_type !== null && this.terminal_type !== undefined) {
    output.writeFieldBegin('terminal_type', Thrift.Type.I32, 1);
    output.writeI32(this.terminal_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DigitalWallet = module.exports.DigitalWallet = function(args) {
  this.provider = null;
  this.id = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field provider is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
DigitalWallet.prototype = {};
DigitalWallet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DigitalWallet.prototype.write = function(output) {
  output.writeStructBegin('DigitalWallet');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 1);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BankCardBINRangeRef = module.exports.BankCardBINRangeRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
BankCardBINRangeRef.prototype = {};
BankCardBINRangeRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BankCardBINRangeRef.prototype.write = function(output) {
  output.writeStructBegin('BankCardBINRangeRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BankCardBINRange = module.exports.BankCardBINRange = function(args) {
  this.name = null;
  this.description = null;
  this.bins = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.bins !== undefined && args.bins !== null) {
      this.bins = Thrift.copyList(args.bins, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bins is unset!');
    }
  }
};
BankCardBINRange.prototype = {};
BankCardBINRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size202 = 0;
        var _rtmp3206;
        this.bins = [];
        var _etype205 = 0;
        _rtmp3206 = input.readSetBegin();
        _etype205 = _rtmp3206.etype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          var elem208 = null;
          elem208 = input.readString();
          this.bins.push(elem208);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BankCardBINRange.prototype.write = function(output) {
  output.writeStructBegin('BankCardBINRange');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.bins !== null && this.bins !== undefined) {
    output.writeFieldBegin('bins', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.bins.length);
    for (var iter209 in this.bins)
    {
      if (this.bins.hasOwnProperty(iter209))
      {
        iter209 = this.bins[iter209];
        output.writeString(iter209);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentMethodRef = module.exports.PaymentMethodRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new ttypes.PaymentMethod(args.id);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PaymentMethodRef.prototype = {};
PaymentMethodRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new ttypes.PaymentMethod();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentMethodRef.prototype.write = function(output) {
  output.writeStructBegin('PaymentMethodRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentMethodDefinition = module.exports.PaymentMethodDefinition = function(args) {
  this.name = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
  }
};
PaymentMethodDefinition.prototype = {};
PaymentMethodDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentMethodDefinition.prototype.write = function(output) {
  output.writeStructBegin('PaymentMethodDefinition');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentMethodSelector = module.exports.PaymentMethodSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [ttypes.PaymentMethodRef]);
    }
  }
};
PaymentMethodSelector.prototype = {};
PaymentMethodSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size210 = 0;
        var _rtmp3214;
        this.decisions = [];
        var _etype213 = 0;
        _rtmp3214 = input.readListBegin();
        _etype213 = _rtmp3214.etype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var elem216 = null;
          elem216 = new ttypes.PaymentMethodDecision();
          elem216.read(input);
          this.decisions.push(elem216);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size217 = 0;
        var _rtmp3221;
        this.value = [];
        var _etype220 = 0;
        _rtmp3221 = input.readSetBegin();
        _etype220 = _rtmp3221.etype;
        _size217 = _rtmp3221.size;
        for (var _i222 = 0; _i222 < _size217; ++_i222)
        {
          var elem223 = null;
          elem223 = new ttypes.PaymentMethodRef();
          elem223.read(input);
          this.value.push(elem223);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentMethodSelector.prototype.write = function(output) {
  output.writeStructBegin('PaymentMethodSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter224 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter224))
      {
        iter224 = this.decisions[iter224];
        iter224.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.value.length);
    for (var iter225 in this.value)
    {
      if (this.value.hasOwnProperty(iter225))
      {
        iter225 = this.value[iter225];
        iter225.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentMethodDecision = module.exports.PaymentMethodDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.PaymentMethodSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
PaymentMethodDecision.prototype = {};
PaymentMethodDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.PaymentMethodSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentMethodDecision.prototype.write = function(output) {
  output.writeStructBegin('PaymentMethodDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HoldLifetime = module.exports.HoldLifetime = function(args) {
  this.seconds = null;
  if (args) {
    if (args.seconds !== undefined && args.seconds !== null) {
      this.seconds = args.seconds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field seconds is unset!');
    }
  }
};
HoldLifetime.prototype = {};
HoldLifetime.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HoldLifetime.prototype.write = function(output) {
  output.writeStructBegin('HoldLifetime');
  if (this.seconds !== null && this.seconds !== undefined) {
    output.writeFieldBegin('seconds', Thrift.Type.I32, 1);
    output.writeI32(this.seconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HoldLifetimeSelector = module.exports.HoldLifetimeSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ttypes.HoldLifetime(args.value);
    }
  }
};
HoldLifetimeSelector.prototype = {};
HoldLifetimeSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size226 = 0;
        var _rtmp3230;
        this.decisions = [];
        var _etype229 = 0;
        _rtmp3230 = input.readListBegin();
        _etype229 = _rtmp3230.etype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var elem232 = null;
          elem232 = new ttypes.HoldLifetimeDecision();
          elem232.read(input);
          this.decisions.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.HoldLifetime();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HoldLifetimeSelector.prototype.write = function(output) {
  output.writeStructBegin('HoldLifetimeSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter233 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter233))
      {
        iter233 = this.decisions[iter233];
        iter233.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HoldLifetimeDecision = module.exports.HoldLifetimeDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.HoldLifetimeSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
HoldLifetimeDecision.prototype = {};
HoldLifetimeDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.HoldLifetimeSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HoldLifetimeDecision.prototype.write = function(output) {
  output.writeStructBegin('HoldLifetimeDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimeSpanSelector = module.exports.TimeSpanSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new base_ttypes.TimeSpan(args.value);
    }
  }
};
TimeSpanSelector.prototype = {};
TimeSpanSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size234 = 0;
        var _rtmp3238;
        this.decisions = [];
        var _etype237 = 0;
        _rtmp3238 = input.readListBegin();
        _etype237 = _rtmp3238.etype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          var elem240 = null;
          elem240 = new ttypes.TimeSpanDecision();
          elem240.read(input);
          this.decisions.push(elem240);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new base_ttypes.TimeSpan();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeSpanSelector.prototype.write = function(output) {
  output.writeStructBegin('TimeSpanSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter241 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter241))
      {
        iter241 = this.decisions[iter241];
        iter241.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimeSpanDecision = module.exports.TimeSpanDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.TimeSpanSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
TimeSpanDecision.prototype = {};
TimeSpanDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.TimeSpanSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeSpanDecision.prototype.write = function(output) {
  output.writeStructBegin('TimeSpanDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashFlowAccount = module.exports.CashFlowAccount = function(args) {
  this.merchant = null;
  this.provider = null;
  this.system = null;
  this.external = null;
  if (args) {
    if (args.merchant !== undefined && args.merchant !== null) {
      this.merchant = args.merchant;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.system !== undefined && args.system !== null) {
      this.system = args.system;
    }
    if (args.external !== undefined && args.external !== null) {
      this.external = args.external;
    }
  }
};
CashFlowAccount.prototype = {};
CashFlowAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.merchant = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.system = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.external = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashFlowAccount.prototype.write = function(output) {
  output.writeStructBegin('CashFlowAccount');
  if (this.merchant !== null && this.merchant !== undefined) {
    output.writeFieldBegin('merchant', Thrift.Type.I32, 1);
    output.writeI32(this.merchant);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 2);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.system !== null && this.system !== undefined) {
    output.writeFieldBegin('system', Thrift.Type.I32, 3);
    output.writeI32(this.system);
    output.writeFieldEnd();
  }
  if (this.external !== null && this.external !== undefined) {
    output.writeFieldBegin('external', Thrift.Type.I32, 4);
    output.writeI32(this.external);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashFlowPosting = module.exports.CashFlowPosting = function(args) {
  this.source = null;
  this.destination = null;
  this.volume = null;
  this.details = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = new ttypes.CashFlowAccount(args.source);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field source is unset!');
    }
    if (args.destination !== undefined && args.destination !== null) {
      this.destination = new ttypes.CashFlowAccount(args.destination);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field destination is unset!');
    }
    if (args.volume !== undefined && args.volume !== null) {
      this.volume = new ttypes.CashVolume(args.volume);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field volume is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
  }
};
CashFlowPosting.prototype = {};
CashFlowPosting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new ttypes.CashFlowAccount();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.destination = new ttypes.CashFlowAccount();
        this.destination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.volume = new ttypes.CashVolume();
        this.volume.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashFlowPosting.prototype.write = function(output) {
  output.writeStructBegin('CashFlowPosting');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 1);
    this.source.write(output);
    output.writeFieldEnd();
  }
  if (this.destination !== null && this.destination !== undefined) {
    output.writeFieldBegin('destination', Thrift.Type.STRUCT, 2);
    this.destination.write(output);
    output.writeFieldEnd();
  }
  if (this.volume !== null && this.volume !== undefined) {
    output.writeFieldBegin('volume', Thrift.Type.STRUCT, 3);
    this.volume.write(output);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 4);
    output.writeString(this.details);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FinalCashFlowPosting = module.exports.FinalCashFlowPosting = function(args) {
  this.source = null;
  this.destination = null;
  this.volume = null;
  this.details = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = new ttypes.FinalCashFlowAccount(args.source);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field source is unset!');
    }
    if (args.destination !== undefined && args.destination !== null) {
      this.destination = new ttypes.FinalCashFlowAccount(args.destination);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field destination is unset!');
    }
    if (args.volume !== undefined && args.volume !== null) {
      this.volume = new ttypes.Cash(args.volume);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field volume is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
  }
};
FinalCashFlowPosting.prototype = {};
FinalCashFlowPosting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new ttypes.FinalCashFlowAccount();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.destination = new ttypes.FinalCashFlowAccount();
        this.destination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.volume = new ttypes.Cash();
        this.volume.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FinalCashFlowPosting.prototype.write = function(output) {
  output.writeStructBegin('FinalCashFlowPosting');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 1);
    this.source.write(output);
    output.writeFieldEnd();
  }
  if (this.destination !== null && this.destination !== undefined) {
    output.writeFieldBegin('destination', Thrift.Type.STRUCT, 2);
    this.destination.write(output);
    output.writeFieldEnd();
  }
  if (this.volume !== null && this.volume !== undefined) {
    output.writeFieldBegin('volume', Thrift.Type.STRUCT, 3);
    this.volume.write(output);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 4);
    output.writeString(this.details);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FinalCashFlowAccount = module.exports.FinalCashFlowAccount = function(args) {
  this.account_type = null;
  this.account_id = null;
  if (args) {
    if (args.account_type !== undefined && args.account_type !== null) {
      this.account_type = new ttypes.CashFlowAccount(args.account_type);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field account_type is unset!');
    }
    if (args.account_id !== undefined && args.account_id !== null) {
      this.account_id = args.account_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field account_id is unset!');
    }
  }
};
FinalCashFlowAccount.prototype = {};
FinalCashFlowAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account_type = new ttypes.CashFlowAccount();
        this.account_type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.account_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FinalCashFlowAccount.prototype.write = function(output) {
  output.writeStructBegin('FinalCashFlowAccount');
  if (this.account_type !== null && this.account_type !== undefined) {
    output.writeFieldBegin('account_type', Thrift.Type.STRUCT, 1);
    this.account_type.write(output);
    output.writeFieldEnd();
  }
  if (this.account_id !== null && this.account_id !== undefined) {
    output.writeFieldBegin('account_id', Thrift.Type.I64, 2);
    output.writeI64(this.account_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashVolume = module.exports.CashVolume = function(args) {
  this.fixed = null;
  this.share = null;
  this.product = null;
  if (args) {
    if (args.fixed !== undefined && args.fixed !== null) {
      this.fixed = new ttypes.CashVolumeFixed(args.fixed);
    }
    if (args.share !== undefined && args.share !== null) {
      this.share = new ttypes.CashVolumeShare(args.share);
    }
    if (args.product !== undefined && args.product !== null) {
      this.product = new ttypes.CashVolumeProduct(args.product);
    }
  }
};
CashVolume.prototype = {};
CashVolume.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fixed = new ttypes.CashVolumeFixed();
        this.fixed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.share = new ttypes.CashVolumeShare();
        this.share.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.product = new ttypes.CashVolumeProduct();
        this.product.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashVolume.prototype.write = function(output) {
  output.writeStructBegin('CashVolume');
  if (this.fixed !== null && this.fixed !== undefined) {
    output.writeFieldBegin('fixed', Thrift.Type.STRUCT, 1);
    this.fixed.write(output);
    output.writeFieldEnd();
  }
  if (this.share !== null && this.share !== undefined) {
    output.writeFieldBegin('share', Thrift.Type.STRUCT, 2);
    this.share.write(output);
    output.writeFieldEnd();
  }
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRUCT, 3);
    this.product.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashVolumeFixed = module.exports.CashVolumeFixed = function(args) {
  this.cash = null;
  if (args) {
    if (args.cash !== undefined && args.cash !== null) {
      this.cash = new ttypes.Cash(args.cash);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cash is unset!');
    }
  }
};
CashVolumeFixed.prototype = {};
CashVolumeFixed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash = new ttypes.Cash();
        this.cash.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashVolumeFixed.prototype.write = function(output) {
  output.writeStructBegin('CashVolumeFixed');
  if (this.cash !== null && this.cash !== undefined) {
    output.writeFieldBegin('cash', Thrift.Type.STRUCT, 1);
    this.cash.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashVolumeShare = module.exports.CashVolumeShare = function(args) {
  this.parts = null;
  this.of = null;
  this.rounding_method = null;
  if (args) {
    if (args.parts !== undefined && args.parts !== null) {
      this.parts = new base_ttypes.Rational(args.parts);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parts is unset!');
    }
    if (args.of !== undefined && args.of !== null) {
      this.of = args.of;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field of is unset!');
    }
    if (args.rounding_method !== undefined && args.rounding_method !== null) {
      this.rounding_method = args.rounding_method;
    }
  }
};
CashVolumeShare.prototype = {};
CashVolumeShare.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.parts = new base_ttypes.Rational();
        this.parts.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.of = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.rounding_method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashVolumeShare.prototype.write = function(output) {
  output.writeStructBegin('CashVolumeShare');
  if (this.parts !== null && this.parts !== undefined) {
    output.writeFieldBegin('parts', Thrift.Type.STRUCT, 1);
    this.parts.write(output);
    output.writeFieldEnd();
  }
  if (this.of !== null && this.of !== undefined) {
    output.writeFieldBegin('of', Thrift.Type.I32, 2);
    output.writeI32(this.of);
    output.writeFieldEnd();
  }
  if (this.rounding_method !== null && this.rounding_method !== undefined) {
    output.writeFieldBegin('rounding_method', Thrift.Type.I32, 3);
    output.writeI32(this.rounding_method);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashVolumeProduct = module.exports.CashVolumeProduct = function(args) {
  this.min_of = null;
  this.max_of = null;
  if (args) {
    if (args.min_of !== undefined && args.min_of !== null) {
      this.min_of = Thrift.copyList(args.min_of, [ttypes.CashVolume]);
    }
    if (args.max_of !== undefined && args.max_of !== null) {
      this.max_of = Thrift.copyList(args.max_of, [ttypes.CashVolume]);
    }
  }
};
CashVolumeProduct.prototype = {};
CashVolumeProduct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size242 = 0;
        var _rtmp3246;
        this.min_of = [];
        var _etype245 = 0;
        _rtmp3246 = input.readSetBegin();
        _etype245 = _rtmp3246.etype;
        _size242 = _rtmp3246.size;
        for (var _i247 = 0; _i247 < _size242; ++_i247)
        {
          var elem248 = null;
          elem248 = new ttypes.CashVolume();
          elem248.read(input);
          this.min_of.push(elem248);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size249 = 0;
        var _rtmp3253;
        this.max_of = [];
        var _etype252 = 0;
        _rtmp3253 = input.readSetBegin();
        _etype252 = _rtmp3253.etype;
        _size249 = _rtmp3253.size;
        for (var _i254 = 0; _i254 < _size249; ++_i254)
        {
          var elem255 = null;
          elem255 = new ttypes.CashVolume();
          elem255.read(input);
          this.max_of.push(elem255);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashVolumeProduct.prototype.write = function(output) {
  output.writeStructBegin('CashVolumeProduct');
  if (this.min_of !== null && this.min_of !== undefined) {
    output.writeFieldBegin('min_of', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRUCT, this.min_of.length);
    for (var iter256 in this.min_of)
    {
      if (this.min_of.hasOwnProperty(iter256))
      {
        iter256 = this.min_of[iter256];
        iter256.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.max_of !== null && this.max_of !== undefined) {
    output.writeFieldBegin('max_of', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.max_of.length);
    for (var iter257 in this.max_of)
    {
      if (this.max_of.hasOwnProperty(iter257))
      {
        iter257 = this.max_of[iter257];
        iter257.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashFlowSelector = module.exports.CashFlowSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
  }
};
CashFlowSelector.prototype = {};
CashFlowSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size258 = 0;
        var _rtmp3262;
        this.decisions = [];
        var _etype261 = 0;
        _rtmp3262 = input.readListBegin();
        _etype261 = _rtmp3262.etype;
        _size258 = _rtmp3262.size;
        for (var _i263 = 0; _i263 < _size258; ++_i263)
        {
          var elem264 = null;
          elem264 = new ttypes.CashFlowDecision();
          elem264.read(input);
          this.decisions.push(elem264);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size265 = 0;
        var _rtmp3269;
        this.value = [];
        var _etype268 = 0;
        _rtmp3269 = input.readListBegin();
        _etype268 = _rtmp3269.etype;
        _size265 = _rtmp3269.size;
        for (var _i270 = 0; _i270 < _size265; ++_i270)
        {
          var elem271 = null;
          elem271 = new ttypes.CashFlowPosting();
          elem271.read(input);
          this.value.push(elem271);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashFlowSelector.prototype.write = function(output) {
  output.writeStructBegin('CashFlowSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter272 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter272))
      {
        iter272 = this.decisions[iter272];
        iter272.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.value.length);
    for (var iter273 in this.value)
    {
      if (this.value.hasOwnProperty(iter273))
      {
        iter273 = this.value[iter273];
        iter273.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashFlowDecision = module.exports.CashFlowDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.CashFlowSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
CashFlowDecision.prototype = {};
CashFlowDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.CashFlowSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashFlowDecision.prototype.write = function(output) {
  output.writeStructBegin('CashFlowDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProviderRef = module.exports.ProviderRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
ProviderRef.prototype = {};
ProviderRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProviderRef.prototype.write = function(output) {
  output.writeStructBegin('ProviderRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Provider = module.exports.Provider = function(args) {
  this.name = null;
  this.description = null;
  this.proxy = null;
  this.terminal = null;
  this.abs_account = null;
  this.payment_terms = null;
  this.recurrent_paytool_terms = null;
  this.accounts = {

};
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.proxy !== undefined && args.proxy !== null) {
      this.proxy = new ttypes.Proxy(args.proxy);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field proxy is unset!');
    }
    if (args.terminal !== undefined && args.terminal !== null) {
      this.terminal = new ttypes.TerminalSelector(args.terminal);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field terminal is unset!');
    }
    if (args.abs_account !== undefined && args.abs_account !== null) {
      this.abs_account = args.abs_account;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field abs_account is unset!');
    }
    if (args.payment_terms !== undefined && args.payment_terms !== null) {
      this.payment_terms = new ttypes.PaymentsProvisionTerms(args.payment_terms);
    }
    if (args.recurrent_paytool_terms !== undefined && args.recurrent_paytool_terms !== null) {
      this.recurrent_paytool_terms = new ttypes.RecurrentPaytoolsProvisionTerms(args.recurrent_paytool_terms);
    }
    if (args.accounts !== undefined && args.accounts !== null) {
      this.accounts = Thrift.copyMap(args.accounts, [null]);
    }
  }
};
Provider.prototype = {};
Provider.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxy = new ttypes.Proxy();
        this.proxy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.terminal = new ttypes.TerminalSelector();
        this.terminal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.abs_account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_terms = new ttypes.PaymentsProvisionTerms();
        this.payment_terms.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.recurrent_paytool_terms = new ttypes.RecurrentPaytoolsProvisionTerms();
        this.recurrent_paytool_terms.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size274 = 0;
        var _rtmp3278;
        this.accounts = new Map();
        var _ktype275 = 0;
        var _vtype276 = 0;
        _rtmp3278 = input.readMapBegin();
        _ktype275 = _rtmp3278.ktype;
        _vtype276 = _rtmp3278.vtype;
        _size274 = _rtmp3278.size;
        for (var _i279 = 0; _i279 < _size274; ++_i279)
        {
          var key280 = null;
          var val281 = null;
          key280 = new ttypes.CurrencyRef();
          key280.read(input);
          val281 = new ttypes.ProviderAccount();
          val281.read(input);
          this.accounts.set(key280, val281);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Provider.prototype.write = function(output) {
  output.writeStructBegin('Provider');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.proxy !== null && this.proxy !== undefined) {
    output.writeFieldBegin('proxy', Thrift.Type.STRUCT, 3);
    this.proxy.write(output);
    output.writeFieldEnd();
  }
  if (this.terminal !== null && this.terminal !== undefined) {
    output.writeFieldBegin('terminal', Thrift.Type.STRUCT, 4);
    this.terminal.write(output);
    output.writeFieldEnd();
  }
  if (this.abs_account !== null && this.abs_account !== undefined) {
    output.writeFieldBegin('abs_account', Thrift.Type.STRING, 5);
    output.writeString(this.abs_account);
    output.writeFieldEnd();
  }
  if (this.payment_terms !== null && this.payment_terms !== undefined) {
    output.writeFieldBegin('payment_terms', Thrift.Type.STRUCT, 6);
    this.payment_terms.write(output);
    output.writeFieldEnd();
  }
  if (this.recurrent_paytool_terms !== null && this.recurrent_paytool_terms !== undefined) {
    output.writeFieldBegin('recurrent_paytool_terms', Thrift.Type.STRUCT, 8);
    this.recurrent_paytool_terms.write(output);
    output.writeFieldEnd();
  }
  if (this.accounts !== null && this.accounts !== undefined) {
    output.writeFieldBegin('accounts', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, this.accounts.size);
    var func284 = function(viter283, kiter282) {
      kiter282.write(output);
      viter283.write(output);
    };
    this.accounts.forEach(func284);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentsProvisionTerms = module.exports.PaymentsProvisionTerms = function(args) {
  this.currencies = null;
  this.categories = null;
  this.payment_methods = null;
  this.cash_limit = null;
  this.cash_flow = null;
  this.holds = null;
  this.refunds = null;
  if (args) {
    if (args.currencies !== undefined && args.currencies !== null) {
      this.currencies = new ttypes.CurrencySelector(args.currencies);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currencies is unset!');
    }
    if (args.categories !== undefined && args.categories !== null) {
      this.categories = new ttypes.CategorySelector(args.categories);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field categories is unset!');
    }
    if (args.payment_methods !== undefined && args.payment_methods !== null) {
      this.payment_methods = new ttypes.PaymentMethodSelector(args.payment_methods);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_methods is unset!');
    }
    if (args.cash_limit !== undefined && args.cash_limit !== null) {
      this.cash_limit = new ttypes.CashLimitSelector(args.cash_limit);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cash_limit is unset!');
    }
    if (args.cash_flow !== undefined && args.cash_flow !== null) {
      this.cash_flow = new ttypes.CashFlowSelector(args.cash_flow);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cash_flow is unset!');
    }
    if (args.holds !== undefined && args.holds !== null) {
      this.holds = new ttypes.PaymentHoldsProvisionTerms(args.holds);
    }
    if (args.refunds !== undefined && args.refunds !== null) {
      this.refunds = new ttypes.PaymentRefundsProvisionTerms(args.refunds);
    }
  }
};
PaymentsProvisionTerms.prototype = {};
PaymentsProvisionTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.currencies = new ttypes.CurrencySelector();
        this.currencies.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.categories = new ttypes.CategorySelector();
        this.categories.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_methods = new ttypes.PaymentMethodSelector();
        this.payment_methods.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash_limit = new ttypes.CashLimitSelector();
        this.cash_limit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash_flow = new ttypes.CashFlowSelector();
        this.cash_flow.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.holds = new ttypes.PaymentHoldsProvisionTerms();
        this.holds.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.refunds = new ttypes.PaymentRefundsProvisionTerms();
        this.refunds.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentsProvisionTerms.prototype.write = function(output) {
  output.writeStructBegin('PaymentsProvisionTerms');
  if (this.currencies !== null && this.currencies !== undefined) {
    output.writeFieldBegin('currencies', Thrift.Type.STRUCT, 1);
    this.currencies.write(output);
    output.writeFieldEnd();
  }
  if (this.categories !== null && this.categories !== undefined) {
    output.writeFieldBegin('categories', Thrift.Type.STRUCT, 2);
    this.categories.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_methods !== null && this.payment_methods !== undefined) {
    output.writeFieldBegin('payment_methods', Thrift.Type.STRUCT, 3);
    this.payment_methods.write(output);
    output.writeFieldEnd();
  }
  if (this.cash_limit !== null && this.cash_limit !== undefined) {
    output.writeFieldBegin('cash_limit', Thrift.Type.STRUCT, 6);
    this.cash_limit.write(output);
    output.writeFieldEnd();
  }
  if (this.cash_flow !== null && this.cash_flow !== undefined) {
    output.writeFieldBegin('cash_flow', Thrift.Type.STRUCT, 4);
    this.cash_flow.write(output);
    output.writeFieldEnd();
  }
  if (this.holds !== null && this.holds !== undefined) {
    output.writeFieldBegin('holds', Thrift.Type.STRUCT, 5);
    this.holds.write(output);
    output.writeFieldEnd();
  }
  if (this.refunds !== null && this.refunds !== undefined) {
    output.writeFieldBegin('refunds', Thrift.Type.STRUCT, 7);
    this.refunds.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentHoldsProvisionTerms = module.exports.PaymentHoldsProvisionTerms = function(args) {
  this.lifetime = null;
  if (args) {
    if (args.lifetime !== undefined && args.lifetime !== null) {
      this.lifetime = new ttypes.HoldLifetimeSelector(args.lifetime);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lifetime is unset!');
    }
  }
};
PaymentHoldsProvisionTerms.prototype = {};
PaymentHoldsProvisionTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.lifetime = new ttypes.HoldLifetimeSelector();
        this.lifetime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentHoldsProvisionTerms.prototype.write = function(output) {
  output.writeStructBegin('PaymentHoldsProvisionTerms');
  if (this.lifetime !== null && this.lifetime !== undefined) {
    output.writeFieldBegin('lifetime', Thrift.Type.STRUCT, 1);
    this.lifetime.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentRefundsProvisionTerms = module.exports.PaymentRefundsProvisionTerms = function(args) {
  this.cash_flow = null;
  this.partial_refunds = null;
  if (args) {
    if (args.cash_flow !== undefined && args.cash_flow !== null) {
      this.cash_flow = new ttypes.CashFlowSelector(args.cash_flow);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cash_flow is unset!');
    }
    if (args.partial_refunds !== undefined && args.partial_refunds !== null) {
      this.partial_refunds = new ttypes.PartialRefundsProvisionTerms(args.partial_refunds);
    }
  }
};
PaymentRefundsProvisionTerms.prototype = {};
PaymentRefundsProvisionTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash_flow = new ttypes.CashFlowSelector();
        this.cash_flow.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.partial_refunds = new ttypes.PartialRefundsProvisionTerms();
        this.partial_refunds.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentRefundsProvisionTerms.prototype.write = function(output) {
  output.writeStructBegin('PaymentRefundsProvisionTerms');
  if (this.cash_flow !== null && this.cash_flow !== undefined) {
    output.writeFieldBegin('cash_flow', Thrift.Type.STRUCT, 1);
    this.cash_flow.write(output);
    output.writeFieldEnd();
  }
  if (this.partial_refunds !== null && this.partial_refunds !== undefined) {
    output.writeFieldBegin('partial_refunds', Thrift.Type.STRUCT, 2);
    this.partial_refunds.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartialRefundsProvisionTerms = module.exports.PartialRefundsProvisionTerms = function(args) {
  this.cash_limit = null;
  if (args) {
    if (args.cash_limit !== undefined && args.cash_limit !== null) {
      this.cash_limit = new ttypes.CashLimitSelector(args.cash_limit);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cash_limit is unset!');
    }
  }
};
PartialRefundsProvisionTerms.prototype = {};
PartialRefundsProvisionTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash_limit = new ttypes.CashLimitSelector();
        this.cash_limit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartialRefundsProvisionTerms.prototype.write = function(output) {
  output.writeStructBegin('PartialRefundsProvisionTerms');
  if (this.cash_limit !== null && this.cash_limit !== undefined) {
    output.writeFieldBegin('cash_limit', Thrift.Type.STRUCT, 1);
    this.cash_limit.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaytoolsProvisionTerms = module.exports.RecurrentPaytoolsProvisionTerms = function(args) {
  this.cash_value = null;
  this.categories = null;
  this.payment_methods = null;
  if (args) {
    if (args.cash_value !== undefined && args.cash_value !== null) {
      this.cash_value = new ttypes.CashValueSelector(args.cash_value);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cash_value is unset!');
    }
    if (args.categories !== undefined && args.categories !== null) {
      this.categories = new ttypes.CategorySelector(args.categories);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field categories is unset!');
    }
    if (args.payment_methods !== undefined && args.payment_methods !== null) {
      this.payment_methods = new ttypes.PaymentMethodSelector(args.payment_methods);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_methods is unset!');
    }
  }
};
RecurrentPaytoolsProvisionTerms.prototype = {};
RecurrentPaytoolsProvisionTerms.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash_value = new ttypes.CashValueSelector();
        this.cash_value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.categories = new ttypes.CategorySelector();
        this.categories.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_methods = new ttypes.PaymentMethodSelector();
        this.payment_methods.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaytoolsProvisionTerms.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaytoolsProvisionTerms');
  if (this.cash_value !== null && this.cash_value !== undefined) {
    output.writeFieldBegin('cash_value', Thrift.Type.STRUCT, 1);
    this.cash_value.write(output);
    output.writeFieldEnd();
  }
  if (this.categories !== null && this.categories !== undefined) {
    output.writeFieldBegin('categories', Thrift.Type.STRUCT, 2);
    this.categories.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_methods !== null && this.payment_methods !== undefined) {
    output.writeFieldBegin('payment_methods', Thrift.Type.STRUCT, 3);
    this.payment_methods.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashValueSelector = module.exports.CashValueSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ttypes.Cash(args.value);
    }
  }
};
CashValueSelector.prototype = {};
CashValueSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size285 = 0;
        var _rtmp3289;
        this.decisions = [];
        var _etype288 = 0;
        _rtmp3289 = input.readListBegin();
        _etype288 = _rtmp3289.etype;
        _size285 = _rtmp3289.size;
        for (var _i290 = 0; _i290 < _size285; ++_i290)
        {
          var elem291 = null;
          elem291 = new ttypes.CashValueDecision();
          elem291.read(input);
          this.decisions.push(elem291);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.Cash();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashValueSelector.prototype.write = function(output) {
  output.writeStructBegin('CashValueSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter292 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter292))
      {
        iter292 = this.decisions[iter292];
        iter292.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashValueDecision = module.exports.CashValueDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.CashValueSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
CashValueDecision.prototype = {};
CashValueDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.CashValueSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashValueDecision.prototype.write = function(output) {
  output.writeStructBegin('CashValueDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProviderAccount = module.exports.ProviderAccount = function(args) {
  this.settlement = null;
  if (args) {
    if (args.settlement !== undefined && args.settlement !== null) {
      this.settlement = args.settlement;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field settlement is unset!');
    }
  }
};
ProviderAccount.prototype = {};
ProviderAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.settlement = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProviderAccount.prototype.write = function(output) {
  output.writeStructBegin('ProviderAccount');
  if (this.settlement !== null && this.settlement !== undefined) {
    output.writeFieldBegin('settlement', Thrift.Type.I64, 1);
    output.writeI64(this.settlement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProviderSelector = module.exports.ProviderSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [ttypes.ProviderRef]);
    }
  }
};
ProviderSelector.prototype = {};
ProviderSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size293 = 0;
        var _rtmp3297;
        this.decisions = [];
        var _etype296 = 0;
        _rtmp3297 = input.readListBegin();
        _etype296 = _rtmp3297.etype;
        _size293 = _rtmp3297.size;
        for (var _i298 = 0; _i298 < _size293; ++_i298)
        {
          var elem299 = null;
          elem299 = new ttypes.ProviderDecision();
          elem299.read(input);
          this.decisions.push(elem299);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size300 = 0;
        var _rtmp3304;
        this.value = [];
        var _etype303 = 0;
        _rtmp3304 = input.readSetBegin();
        _etype303 = _rtmp3304.etype;
        _size300 = _rtmp3304.size;
        for (var _i305 = 0; _i305 < _size300; ++_i305)
        {
          var elem306 = null;
          elem306 = new ttypes.ProviderRef();
          elem306.read(input);
          this.value.push(elem306);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProviderSelector.prototype.write = function(output) {
  output.writeStructBegin('ProviderSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter307 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter307))
      {
        iter307 = this.decisions[iter307];
        iter307.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.value.length);
    for (var iter308 in this.value)
    {
      if (this.value.hasOwnProperty(iter308))
      {
        iter308 = this.value[iter308];
        iter308.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProviderDecision = module.exports.ProviderDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.ProviderSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
ProviderDecision.prototype = {};
ProviderDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.ProviderSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProviderDecision.prototype.write = function(output) {
  output.writeStructBegin('ProviderDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TerminalRef = module.exports.TerminalRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
TerminalRef.prototype = {};
TerminalRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TerminalRef.prototype.write = function(output) {
  output.writeStructBegin('TerminalRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InspectorRef = module.exports.InspectorRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
InspectorRef.prototype = {};
InspectorRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InspectorRef.prototype.write = function(output) {
  output.writeStructBegin('InspectorRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Inspector = module.exports.Inspector = function(args) {
  this.name = null;
  this.description = null;
  this.proxy = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.proxy !== undefined && args.proxy !== null) {
      this.proxy = new ttypes.Proxy(args.proxy);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field proxy is unset!');
    }
  }
};
Inspector.prototype = {};
Inspector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxy = new ttypes.Proxy();
        this.proxy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Inspector.prototype.write = function(output) {
  output.writeStructBegin('Inspector');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.proxy !== null && this.proxy !== undefined) {
    output.writeFieldBegin('proxy', Thrift.Type.STRUCT, 3);
    this.proxy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InspectorSelector = module.exports.InspectorSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ttypes.InspectorRef(args.value);
    }
  }
};
InspectorSelector.prototype = {};
InspectorSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size309 = 0;
        var _rtmp3313;
        this.decisions = [];
        var _etype312 = 0;
        _rtmp3313 = input.readListBegin();
        _etype312 = _rtmp3313.etype;
        _size309 = _rtmp3313.size;
        for (var _i314 = 0; _i314 < _size309; ++_i314)
        {
          var elem315 = null;
          elem315 = new ttypes.InspectorDecision();
          elem315.read(input);
          this.decisions.push(elem315);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.InspectorRef();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InspectorSelector.prototype.write = function(output) {
  output.writeStructBegin('InspectorSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter316 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter316))
      {
        iter316 = this.decisions[iter316];
        iter316.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InspectorDecision = module.exports.InspectorDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.InspectorSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
InspectorDecision.prototype = {};
InspectorDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.InspectorSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InspectorDecision.prototype.write = function(output) {
  output.writeStructBegin('InspectorDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Terminal = module.exports.Terminal = function(args) {
  this.name = null;
  this.description = null;
  this.options = null;
  this.risk_coverage = null;
  this.terms = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = Thrift.copyMap(args.options, [null]);
    }
    if (args.risk_coverage !== undefined && args.risk_coverage !== null) {
      this.risk_coverage = args.risk_coverage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field risk_coverage is unset!');
    }
    if (args.terms !== undefined && args.terms !== null) {
      this.terms = new ttypes.PaymentsProvisionTerms(args.terms);
    }
  }
};
Terminal.prototype = {};
Terminal.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size317 = 0;
        var _rtmp3321;
        this.options = new Map();
        var _ktype318 = 0;
        var _vtype319 = 0;
        _rtmp3321 = input.readMapBegin();
        _ktype318 = _rtmp3321.ktype;
        _vtype319 = _rtmp3321.vtype;
        _size317 = _rtmp3321.size;
        for (var _i322 = 0; _i322 < _size317; ++_i322)
        {
          var key323 = null;
          var val324 = null;
          key323 = input.readString();
          val324 = input.readString();
          this.options.set(key323, val324);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.risk_coverage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.terms = new ttypes.PaymentsProvisionTerms();
        this.terms.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Terminal.prototype.write = function(output) {
  output.writeStructBegin('Terminal');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, this.options.size);
    var func327 = function(viter326, kiter325) {
      output.writeString(kiter325);
      output.writeString(viter326);
    };
    this.options.forEach(func327);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.risk_coverage !== null && this.risk_coverage !== undefined) {
    output.writeFieldBegin('risk_coverage', Thrift.Type.I32, 10);
    output.writeI32(this.risk_coverage);
    output.writeFieldEnd();
  }
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.STRUCT, 12);
    this.terms.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TerminalSelector = module.exports.TerminalSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [ttypes.TerminalRef]);
    }
  }
};
TerminalSelector.prototype = {};
TerminalSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size328 = 0;
        var _rtmp3332;
        this.decisions = [];
        var _etype331 = 0;
        _rtmp3332 = input.readListBegin();
        _etype331 = _rtmp3332.etype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var elem334 = null;
          elem334 = new ttypes.TerminalDecision();
          elem334.read(input);
          this.decisions.push(elem334);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size335 = 0;
        var _rtmp3339;
        this.value = [];
        var _etype338 = 0;
        _rtmp3339 = input.readSetBegin();
        _etype338 = _rtmp3339.etype;
        _size335 = _rtmp3339.size;
        for (var _i340 = 0; _i340 < _size335; ++_i340)
        {
          var elem341 = null;
          elem341 = new ttypes.TerminalRef();
          elem341.read(input);
          this.value.push(elem341);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TerminalSelector.prototype.write = function(output) {
  output.writeStructBegin('TerminalSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter342 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter342))
      {
        iter342 = this.decisions[iter342];
        iter342.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.value.length);
    for (var iter343 in this.value)
    {
      if (this.value.hasOwnProperty(iter343))
      {
        iter343 = this.value[iter343];
        iter343.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TerminalDecision = module.exports.TerminalDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.TerminalSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
TerminalDecision.prototype = {};
TerminalDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.TerminalSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TerminalDecision.prototype.write = function(output) {
  output.writeStructBegin('TerminalDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Predicate = module.exports.Predicate = function(args) {
  this.constant = null;
  this.condition = null;
  this.is_not = null;
  this.all_of = null;
  this.any_of = null;
  if (args) {
    if (args.constant !== undefined && args.constant !== null) {
      this.constant = args.constant;
    }
    if (args.condition !== undefined && args.condition !== null) {
      this.condition = new ttypes.Condition(args.condition);
    }
    if (args.is_not !== undefined && args.is_not !== null) {
      this.is_not = new ttypes.Predicate(args.is_not);
    }
    if (args.all_of !== undefined && args.all_of !== null) {
      this.all_of = Thrift.copyList(args.all_of, [null]);
    }
    if (args.any_of !== undefined && args.any_of !== null) {
      this.any_of = Thrift.copyList(args.any_of, [null]);
    }
  }
};
Predicate.prototype = {};
Predicate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.constant = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new ttypes.Condition();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.is_not = new ttypes.Predicate();
        this.is_not.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size344 = 0;
        var _rtmp3348;
        this.all_of = [];
        var _etype347 = 0;
        _rtmp3348 = input.readSetBegin();
        _etype347 = _rtmp3348.etype;
        _size344 = _rtmp3348.size;
        for (var _i349 = 0; _i349 < _size344; ++_i349)
        {
          var elem350 = null;
          elem350 = new ttypes.Predicate();
          elem350.read(input);
          this.all_of.push(elem350);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size351 = 0;
        var _rtmp3355;
        this.any_of = [];
        var _etype354 = 0;
        _rtmp3355 = input.readSetBegin();
        _etype354 = _rtmp3355.etype;
        _size351 = _rtmp3355.size;
        for (var _i356 = 0; _i356 < _size351; ++_i356)
        {
          var elem357 = null;
          elem357 = new ttypes.Predicate();
          elem357.read(input);
          this.any_of.push(elem357);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Predicate.prototype.write = function(output) {
  output.writeStructBegin('Predicate');
  if (this.constant !== null && this.constant !== undefined) {
    output.writeFieldBegin('constant', Thrift.Type.BOOL, 5);
    output.writeBool(this.constant);
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 1);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  if (this.is_not !== null && this.is_not !== undefined) {
    output.writeFieldBegin('is_not', Thrift.Type.STRUCT, 2);
    this.is_not.write(output);
    output.writeFieldEnd();
  }
  if (this.all_of !== null && this.all_of !== undefined) {
    output.writeFieldBegin('all_of', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRUCT, this.all_of.length);
    for (var iter358 in this.all_of)
    {
      if (this.all_of.hasOwnProperty(iter358))
      {
        iter358 = this.all_of[iter358];
        iter358.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.any_of !== null && this.any_of !== undefined) {
    output.writeFieldBegin('any_of', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.STRUCT, this.any_of.length);
    for (var iter359 in this.any_of)
    {
      if (this.any_of.hasOwnProperty(iter359))
      {
        iter359 = this.any_of[iter359];
        iter359.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Condition = module.exports.Condition = function(args) {
  this.category_is = null;
  this.currency_is = null;
  this.cost_in = null;
  this.payment_tool = null;
  this.shop_location_is = null;
  this.party = null;
  this.payout_method_is = null;
  if (args) {
    if (args.category_is !== undefined && args.category_is !== null) {
      this.category_is = new ttypes.CategoryRef(args.category_is);
    }
    if (args.currency_is !== undefined && args.currency_is !== null) {
      this.currency_is = new ttypes.CurrencyRef(args.currency_is);
    }
    if (args.cost_in !== undefined && args.cost_in !== null) {
      this.cost_in = new ttypes.CashRange(args.cost_in);
    }
    if (args.payment_tool !== undefined && args.payment_tool !== null) {
      this.payment_tool = new ttypes.PaymentToolCondition(args.payment_tool);
    }
    if (args.shop_location_is !== undefined && args.shop_location_is !== null) {
      this.shop_location_is = new ttypes.ShopLocation(args.shop_location_is);
    }
    if (args.party !== undefined && args.party !== null) {
      this.party = new ttypes.PartyCondition(args.party);
    }
    if (args.payout_method_is !== undefined && args.payout_method_is !== null) {
      this.payout_method_is = new ttypes.PayoutMethodRef(args.payout_method_is);
    }
  }
};
Condition.prototype = {};
Condition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.category_is = new ttypes.CategoryRef();
        this.category_is.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.currency_is = new ttypes.CurrencyRef();
        this.currency_is.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.cost_in = new ttypes.CashRange();
        this.cost_in.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_tool = new ttypes.PaymentToolCondition();
        this.payment_tool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.shop_location_is = new ttypes.ShopLocation();
        this.shop_location_is.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.party = new ttypes.PartyCondition();
        this.party.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_method_is = new ttypes.PayoutMethodRef();
        this.payout_method_is.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Condition.prototype.write = function(output) {
  output.writeStructBegin('Condition');
  if (this.category_is !== null && this.category_is !== undefined) {
    output.writeFieldBegin('category_is', Thrift.Type.STRUCT, 1);
    this.category_is.write(output);
    output.writeFieldEnd();
  }
  if (this.currency_is !== null && this.currency_is !== undefined) {
    output.writeFieldBegin('currency_is', Thrift.Type.STRUCT, 2);
    this.currency_is.write(output);
    output.writeFieldEnd();
  }
  if (this.cost_in !== null && this.cost_in !== undefined) {
    output.writeFieldBegin('cost_in', Thrift.Type.STRUCT, 4);
    this.cost_in.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_tool !== null && this.payment_tool !== undefined) {
    output.writeFieldBegin('payment_tool', Thrift.Type.STRUCT, 3);
    this.payment_tool.write(output);
    output.writeFieldEnd();
  }
  if (this.shop_location_is !== null && this.shop_location_is !== undefined) {
    output.writeFieldBegin('shop_location_is', Thrift.Type.STRUCT, 5);
    this.shop_location_is.write(output);
    output.writeFieldEnd();
  }
  if (this.party !== null && this.party !== undefined) {
    output.writeFieldBegin('party', Thrift.Type.STRUCT, 6);
    this.party.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_method_is !== null && this.payout_method_is !== undefined) {
    output.writeFieldBegin('payout_method_is', Thrift.Type.STRUCT, 7);
    this.payout_method_is.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentToolCondition = module.exports.PaymentToolCondition = function(args) {
  this.bank_card = null;
  this.payment_terminal = null;
  this.digital_wallet = null;
  if (args) {
    if (args.bank_card !== undefined && args.bank_card !== null) {
      this.bank_card = new ttypes.BankCardCondition(args.bank_card);
    }
    if (args.payment_terminal !== undefined && args.payment_terminal !== null) {
      this.payment_terminal = new ttypes.PaymentTerminalCondition(args.payment_terminal);
    }
    if (args.digital_wallet !== undefined && args.digital_wallet !== null) {
      this.digital_wallet = new ttypes.DigitalWalletCondition(args.digital_wallet);
    }
  }
};
PaymentToolCondition.prototype = {};
PaymentToolCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bank_card = new ttypes.BankCardCondition();
        this.bank_card.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_terminal = new ttypes.PaymentTerminalCondition();
        this.payment_terminal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.digital_wallet = new ttypes.DigitalWalletCondition();
        this.digital_wallet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentToolCondition.prototype.write = function(output) {
  output.writeStructBegin('PaymentToolCondition');
  if (this.bank_card !== null && this.bank_card !== undefined) {
    output.writeFieldBegin('bank_card', Thrift.Type.STRUCT, 1);
    this.bank_card.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_terminal !== null && this.payment_terminal !== undefined) {
    output.writeFieldBegin('payment_terminal', Thrift.Type.STRUCT, 2);
    this.payment_terminal.write(output);
    output.writeFieldEnd();
  }
  if (this.digital_wallet !== null && this.digital_wallet !== undefined) {
    output.writeFieldBegin('digital_wallet', Thrift.Type.STRUCT, 3);
    this.digital_wallet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BankCardCondition = module.exports.BankCardCondition = function(args) {
  this.definition = null;
  if (args) {
    if (args.definition !== undefined && args.definition !== null) {
      this.definition = new ttypes.BankCardConditionDefinition(args.definition);
    }
  }
};
BankCardCondition.prototype = {};
BankCardCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.definition = new ttypes.BankCardConditionDefinition();
        this.definition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BankCardCondition.prototype.write = function(output) {
  output.writeStructBegin('BankCardCondition');
  if (this.definition !== null && this.definition !== undefined) {
    output.writeFieldBegin('definition', Thrift.Type.STRUCT, 3);
    this.definition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BankCardConditionDefinition = module.exports.BankCardConditionDefinition = function(args) {
  this.payment_system_is = null;
  this.bin_in = null;
  this.payment_system = null;
  if (args) {
    if (args.payment_system_is !== undefined && args.payment_system_is !== null) {
      this.payment_system_is = args.payment_system_is;
    }
    if (args.bin_in !== undefined && args.bin_in !== null) {
      this.bin_in = new ttypes.BankCardBINRangeRef(args.bin_in);
    }
    if (args.payment_system !== undefined && args.payment_system !== null) {
      this.payment_system = new ttypes.PaymentSystemCondition(args.payment_system);
    }
  }
};
BankCardConditionDefinition.prototype = {};
BankCardConditionDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.payment_system_is = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.bin_in = new ttypes.BankCardBINRangeRef();
        this.bin_in.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_system = new ttypes.PaymentSystemCondition();
        this.payment_system.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BankCardConditionDefinition.prototype.write = function(output) {
  output.writeStructBegin('BankCardConditionDefinition');
  if (this.payment_system_is !== null && this.payment_system_is !== undefined) {
    output.writeFieldBegin('payment_system_is', Thrift.Type.I32, 1);
    output.writeI32(this.payment_system_is);
    output.writeFieldEnd();
  }
  if (this.bin_in !== null && this.bin_in !== undefined) {
    output.writeFieldBegin('bin_in', Thrift.Type.STRUCT, 2);
    this.bin_in.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_system !== null && this.payment_system !== undefined) {
    output.writeFieldBegin('payment_system', Thrift.Type.STRUCT, 3);
    this.payment_system.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentSystemCondition = module.exports.PaymentSystemCondition = function(args) {
  this.payment_system_is = null;
  this.token_provider_is = null;
  if (args) {
    if (args.payment_system_is !== undefined && args.payment_system_is !== null) {
      this.payment_system_is = args.payment_system_is;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_system_is is unset!');
    }
    if (args.token_provider_is !== undefined && args.token_provider_is !== null) {
      this.token_provider_is = args.token_provider_is;
    }
  }
};
PaymentSystemCondition.prototype = {};
PaymentSystemCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.payment_system_is = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.token_provider_is = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentSystemCondition.prototype.write = function(output) {
  output.writeStructBegin('PaymentSystemCondition');
  if (this.payment_system_is !== null && this.payment_system_is !== undefined) {
    output.writeFieldBegin('payment_system_is', Thrift.Type.I32, 1);
    output.writeI32(this.payment_system_is);
    output.writeFieldEnd();
  }
  if (this.token_provider_is !== null && this.token_provider_is !== undefined) {
    output.writeFieldBegin('token_provider_is', Thrift.Type.I32, 2);
    output.writeI32(this.token_provider_is);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentTerminalCondition = module.exports.PaymentTerminalCondition = function(args) {
  this.definition = null;
  if (args) {
    if (args.definition !== undefined && args.definition !== null) {
      this.definition = new ttypes.PaymentTerminalConditionDefinition(args.definition);
    }
  }
};
PaymentTerminalCondition.prototype = {};
PaymentTerminalCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.definition = new ttypes.PaymentTerminalConditionDefinition();
        this.definition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentTerminalCondition.prototype.write = function(output) {
  output.writeStructBegin('PaymentTerminalCondition');
  if (this.definition !== null && this.definition !== undefined) {
    output.writeFieldBegin('definition', Thrift.Type.STRUCT, 1);
    this.definition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentTerminalConditionDefinition = module.exports.PaymentTerminalConditionDefinition = function(args) {
  this.provider_is = null;
  if (args) {
    if (args.provider_is !== undefined && args.provider_is !== null) {
      this.provider_is = args.provider_is;
    }
  }
};
PaymentTerminalConditionDefinition.prototype = {};
PaymentTerminalConditionDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provider_is = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentTerminalConditionDefinition.prototype.write = function(output) {
  output.writeStructBegin('PaymentTerminalConditionDefinition');
  if (this.provider_is !== null && this.provider_is !== undefined) {
    output.writeFieldBegin('provider_is', Thrift.Type.I32, 1);
    output.writeI32(this.provider_is);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DigitalWalletCondition = module.exports.DigitalWalletCondition = function(args) {
  this.definition = null;
  if (args) {
    if (args.definition !== undefined && args.definition !== null) {
      this.definition = new ttypes.DigitalWalletConditionDefinition(args.definition);
    }
  }
};
DigitalWalletCondition.prototype = {};
DigitalWalletCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.definition = new ttypes.DigitalWalletConditionDefinition();
        this.definition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DigitalWalletCondition.prototype.write = function(output) {
  output.writeStructBegin('DigitalWalletCondition');
  if (this.definition !== null && this.definition !== undefined) {
    output.writeFieldBegin('definition', Thrift.Type.STRUCT, 1);
    this.definition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DigitalWalletConditionDefinition = module.exports.DigitalWalletConditionDefinition = function(args) {
  this.provider_is = null;
  if (args) {
    if (args.provider_is !== undefined && args.provider_is !== null) {
      this.provider_is = args.provider_is;
    }
  }
};
DigitalWalletConditionDefinition.prototype = {};
DigitalWalletConditionDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provider_is = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DigitalWalletConditionDefinition.prototype.write = function(output) {
  output.writeStructBegin('DigitalWalletConditionDefinition');
  if (this.provider_is !== null && this.provider_is !== undefined) {
    output.writeFieldBegin('provider_is', Thrift.Type.I32, 1);
    output.writeI32(this.provider_is);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyCondition = module.exports.PartyCondition = function(args) {
  this.id = null;
  this.definition = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.definition !== undefined && args.definition !== null) {
      this.definition = new ttypes.PartyConditionDefinition(args.definition);
    }
  }
};
PartyCondition.prototype = {};
PartyCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.definition = new ttypes.PartyConditionDefinition();
        this.definition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyCondition.prototype.write = function(output) {
  output.writeStructBegin('PartyCondition');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.definition !== null && this.definition !== undefined) {
    output.writeFieldBegin('definition', Thrift.Type.STRUCT, 2);
    this.definition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyConditionDefinition = module.exports.PartyConditionDefinition = function(args) {
  this.shop_is = null;
  if (args) {
    if (args.shop_is !== undefined && args.shop_is !== null) {
      this.shop_is = args.shop_is;
    }
  }
};
PartyConditionDefinition.prototype = {};
PartyConditionDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.shop_is = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyConditionDefinition.prototype.write = function(output) {
  output.writeStructBegin('PartyConditionDefinition');
  if (this.shop_is !== null && this.shop_is !== undefined) {
    output.writeFieldBegin('shop_is', Thrift.Type.STRING, 1);
    output.writeString(this.shop_is);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProxyRef = module.exports.ProxyRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
ProxyRef.prototype = {};
ProxyRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProxyRef.prototype.write = function(output) {
  output.writeStructBegin('ProxyRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProxyDefinition = module.exports.ProxyDefinition = function(args) {
  this.name = null;
  this.description = null;
  this.url = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field url is unset!');
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = Thrift.copyMap(args.options, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field options is unset!');
    }
  }
};
ProxyDefinition.prototype = {};
ProxyDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size360 = 0;
        var _rtmp3364;
        this.options = new Map();
        var _ktype361 = 0;
        var _vtype362 = 0;
        _rtmp3364 = input.readMapBegin();
        _ktype361 = _rtmp3364.ktype;
        _vtype362 = _rtmp3364.vtype;
        _size360 = _rtmp3364.size;
        for (var _i365 = 0; _i365 < _size360; ++_i365)
        {
          var key366 = null;
          var val367 = null;
          key366 = input.readString();
          val367 = input.readString();
          this.options.set(key366, val367);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProxyDefinition.prototype.write = function(output) {
  output.writeStructBegin('ProxyDefinition');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 3);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, this.options.size);
    var func370 = function(viter369, kiter368) {
      output.writeString(kiter368);
      output.writeString(viter369);
    };
    this.options.forEach(func370);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Proxy = module.exports.Proxy = function(args) {
  this.ref = null;
  this.additional = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.ProxyRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.additional !== undefined && args.additional !== null) {
      this.additional = Thrift.copyMap(args.additional, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field additional is unset!');
    }
  }
};
Proxy.prototype = {};
Proxy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.ProxyRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size371 = 0;
        var _rtmp3375;
        this.additional = new Map();
        var _ktype372 = 0;
        var _vtype373 = 0;
        _rtmp3375 = input.readMapBegin();
        _ktype372 = _rtmp3375.ktype;
        _vtype373 = _rtmp3375.vtype;
        _size371 = _rtmp3375.size;
        for (var _i376 = 0; _i376 < _size371; ++_i376)
        {
          var key377 = null;
          var val378 = null;
          key377 = input.readString();
          val378 = input.readString();
          this.additional.set(key377, val378);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Proxy.prototype.write = function(output) {
  output.writeStructBegin('Proxy');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.additional !== null && this.additional !== undefined) {
    output.writeFieldBegin('additional', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, this.additional.size);
    var func381 = function(viter380, kiter379) {
      output.writeString(kiter379);
      output.writeString(viter380);
    };
    this.additional.forEach(func381);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemAccountSetRef = module.exports.SystemAccountSetRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
SystemAccountSetRef.prototype = {};
SystemAccountSetRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemAccountSetRef.prototype.write = function(output) {
  output.writeStructBegin('SystemAccountSetRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemAccountSet = module.exports.SystemAccountSet = function(args) {
  this.name = null;
  this.description = null;
  this.accounts = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.accounts !== undefined && args.accounts !== null) {
      this.accounts = Thrift.copyMap(args.accounts, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accounts is unset!');
    }
  }
};
SystemAccountSet.prototype = {};
SystemAccountSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size382 = 0;
        var _rtmp3386;
        this.accounts = new Map();
        var _ktype383 = 0;
        var _vtype384 = 0;
        _rtmp3386 = input.readMapBegin();
        _ktype383 = _rtmp3386.ktype;
        _vtype384 = _rtmp3386.vtype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var key388 = null;
          var val389 = null;
          key388 = new ttypes.CurrencyRef();
          key388.read(input);
          val389 = new ttypes.SystemAccount();
          val389.read(input);
          this.accounts.set(key388, val389);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemAccountSet.prototype.write = function(output) {
  output.writeStructBegin('SystemAccountSet');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.accounts !== null && this.accounts !== undefined) {
    output.writeFieldBegin('accounts', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, this.accounts.size);
    var func392 = function(viter391, kiter390) {
      kiter390.write(output);
      viter391.write(output);
    };
    this.accounts.forEach(func392);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemAccount = module.exports.SystemAccount = function(args) {
  this.settlement = null;
  if (args) {
    if (args.settlement !== undefined && args.settlement !== null) {
      this.settlement = args.settlement;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field settlement is unset!');
    }
  }
};
SystemAccount.prototype = {};
SystemAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.settlement = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemAccount.prototype.write = function(output) {
  output.writeStructBegin('SystemAccount');
  if (this.settlement !== null && this.settlement !== undefined) {
    output.writeFieldBegin('settlement', Thrift.Type.I64, 1);
    output.writeI64(this.settlement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemAccountSetSelector = module.exports.SystemAccountSetSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ttypes.SystemAccountSetRef(args.value);
    }
  }
};
SystemAccountSetSelector.prototype = {};
SystemAccountSetSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size393 = 0;
        var _rtmp3397;
        this.decisions = [];
        var _etype396 = 0;
        _rtmp3397 = input.readListBegin();
        _etype396 = _rtmp3397.etype;
        _size393 = _rtmp3397.size;
        for (var _i398 = 0; _i398 < _size393; ++_i398)
        {
          var elem399 = null;
          elem399 = new ttypes.SystemAccountSetDecision();
          elem399.read(input);
          this.decisions.push(elem399);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.SystemAccountSetRef();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemAccountSetSelector.prototype.write = function(output) {
  output.writeStructBegin('SystemAccountSetSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter400 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter400))
      {
        iter400 = this.decisions[iter400];
        iter400.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemAccountSetDecision = module.exports.SystemAccountSetDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.SystemAccountSetSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
SystemAccountSetDecision.prototype = {};
SystemAccountSetDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.SystemAccountSetSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemAccountSetDecision.prototype.write = function(output) {
  output.writeStructBegin('SystemAccountSetDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExternalAccountSetRef = module.exports.ExternalAccountSetRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
ExternalAccountSetRef.prototype = {};
ExternalAccountSetRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExternalAccountSetRef.prototype.write = function(output) {
  output.writeStructBegin('ExternalAccountSetRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExternalAccountSet = module.exports.ExternalAccountSet = function(args) {
  this.name = null;
  this.description = null;
  this.accounts = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field description is unset!');
    }
    if (args.accounts !== undefined && args.accounts !== null) {
      this.accounts = Thrift.copyMap(args.accounts, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accounts is unset!');
    }
  }
};
ExternalAccountSet.prototype = {};
ExternalAccountSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size401 = 0;
        var _rtmp3405;
        this.accounts = new Map();
        var _ktype402 = 0;
        var _vtype403 = 0;
        _rtmp3405 = input.readMapBegin();
        _ktype402 = _rtmp3405.ktype;
        _vtype403 = _rtmp3405.vtype;
        _size401 = _rtmp3405.size;
        for (var _i406 = 0; _i406 < _size401; ++_i406)
        {
          var key407 = null;
          var val408 = null;
          key407 = new ttypes.CurrencyRef();
          key407.read(input);
          val408 = new ttypes.ExternalAccount();
          val408.read(input);
          this.accounts.set(key407, val408);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExternalAccountSet.prototype.write = function(output) {
  output.writeStructBegin('ExternalAccountSet');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.accounts !== null && this.accounts !== undefined) {
    output.writeFieldBegin('accounts', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, this.accounts.size);
    var func411 = function(viter410, kiter409) {
      kiter409.write(output);
      viter410.write(output);
    };
    this.accounts.forEach(func411);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExternalAccount = module.exports.ExternalAccount = function(args) {
  this.income = null;
  this.outcome = null;
  if (args) {
    if (args.income !== undefined && args.income !== null) {
      this.income = args.income;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field income is unset!');
    }
    if (args.outcome !== undefined && args.outcome !== null) {
      this.outcome = args.outcome;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field outcome is unset!');
    }
  }
};
ExternalAccount.prototype = {};
ExternalAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.income = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.outcome = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExternalAccount.prototype.write = function(output) {
  output.writeStructBegin('ExternalAccount');
  if (this.income !== null && this.income !== undefined) {
    output.writeFieldBegin('income', Thrift.Type.I64, 1);
    output.writeI64(this.income);
    output.writeFieldEnd();
  }
  if (this.outcome !== null && this.outcome !== undefined) {
    output.writeFieldBegin('outcome', Thrift.Type.I64, 2);
    output.writeI64(this.outcome);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExternalAccountSetSelector = module.exports.ExternalAccountSetSelector = function(args) {
  this.decisions = null;
  this.value = null;
  if (args) {
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [null]);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ttypes.ExternalAccountSetRef(args.value);
    }
  }
};
ExternalAccountSetSelector.prototype = {};
ExternalAccountSetSelector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size412 = 0;
        var _rtmp3416;
        this.decisions = [];
        var _etype415 = 0;
        _rtmp3416 = input.readListBegin();
        _etype415 = _rtmp3416.etype;
        _size412 = _rtmp3416.size;
        for (var _i417 = 0; _i417 < _size412; ++_i417)
        {
          var elem418 = null;
          elem418 = new ttypes.ExternalAccountSetDecision();
          elem418.read(input);
          this.decisions.push(elem418);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.ExternalAccountSetRef();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExternalAccountSetSelector.prototype.write = function(output) {
  output.writeStructBegin('ExternalAccountSetSelector');
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter419 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter419))
      {
        iter419 = this.decisions[iter419];
        iter419.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExternalAccountSetDecision = module.exports.ExternalAccountSetDecision = function(args) {
  this.if_ = null;
  this.then_ = null;
  if (args) {
    if (args.if_ !== undefined && args.if_ !== null) {
      this.if_ = new ttypes.Predicate(args.if_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field if_ is unset!');
    }
    if (args.then_ !== undefined && args.then_ !== null) {
      this.then_ = new ttypes.ExternalAccountSetSelector(args.then_);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field then_ is unset!');
    }
  }
};
ExternalAccountSetDecision.prototype = {};
ExternalAccountSetDecision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.if_ = new ttypes.Predicate();
        this.if_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.then_ = new ttypes.ExternalAccountSetSelector();
        this.then_.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExternalAccountSetDecision.prototype.write = function(output) {
  output.writeStructBegin('ExternalAccountSetDecision');
  if (this.if_ !== null && this.if_ !== undefined) {
    output.writeFieldBegin('if_', Thrift.Type.STRUCT, 1);
    this.if_.write(output);
    output.writeFieldEnd();
  }
  if (this.then_ !== null && this.then_ !== undefined) {
    output.writeFieldBegin('then_', Thrift.Type.STRUCT, 2);
    this.then_.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentInstitutionRef = module.exports.PaymentInstitutionRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
PaymentInstitutionRef.prototype = {};
PaymentInstitutionRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentInstitutionRef.prototype.write = function(output) {
  output.writeStructBegin('PaymentInstitutionRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentInstitution = module.exports.PaymentInstitution = function(args) {
  this.name = null;
  this.description = null;
  this.calendar = null;
  this.system_account_set = null;
  this.default_contract_template = null;
  this.providers = null;
  this.inspector = null;
  this.realm = null;
  this.residences = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.calendar !== undefined && args.calendar !== null) {
      this.calendar = new ttypes.CalendarRef(args.calendar);
    }
    if (args.system_account_set !== undefined && args.system_account_set !== null) {
      this.system_account_set = new ttypes.SystemAccountSetSelector(args.system_account_set);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field system_account_set is unset!');
    }
    if (args.default_contract_template !== undefined && args.default_contract_template !== null) {
      this.default_contract_template = new ttypes.ContractTemplateSelector(args.default_contract_template);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field default_contract_template is unset!');
    }
    if (args.providers !== undefined && args.providers !== null) {
      this.providers = new ttypes.ProviderSelector(args.providers);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field providers is unset!');
    }
    if (args.inspector !== undefined && args.inspector !== null) {
      this.inspector = new ttypes.InspectorSelector(args.inspector);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field inspector is unset!');
    }
    if (args.realm !== undefined && args.realm !== null) {
      this.realm = args.realm;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field realm is unset!');
    }
    if (args.residences !== undefined && args.residences !== null) {
      this.residences = Thrift.copyList(args.residences, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field residences is unset!');
    }
  }
};
PaymentInstitution.prototype = {};
PaymentInstitution.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.calendar = new ttypes.CalendarRef();
        this.calendar.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.system_account_set = new ttypes.SystemAccountSetSelector();
        this.system_account_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.default_contract_template = new ttypes.ContractTemplateSelector();
        this.default_contract_template.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.providers = new ttypes.ProviderSelector();
        this.providers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.inspector = new ttypes.InspectorSelector();
        this.inspector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.realm = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size420 = 0;
        var _rtmp3424;
        this.residences = [];
        var _etype423 = 0;
        _rtmp3424 = input.readSetBegin();
        _etype423 = _rtmp3424.etype;
        _size420 = _rtmp3424.size;
        for (var _i425 = 0; _i425 < _size420; ++_i425)
        {
          var elem426 = null;
          elem426 = input.readI32();
          this.residences.push(elem426);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentInstitution.prototype.write = function(output) {
  output.writeStructBegin('PaymentInstitution');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.calendar !== null && this.calendar !== undefined) {
    output.writeFieldBegin('calendar', Thrift.Type.STRUCT, 9);
    this.calendar.write(output);
    output.writeFieldEnd();
  }
  if (this.system_account_set !== null && this.system_account_set !== undefined) {
    output.writeFieldBegin('system_account_set', Thrift.Type.STRUCT, 3);
    this.system_account_set.write(output);
    output.writeFieldEnd();
  }
  if (this.default_contract_template !== null && this.default_contract_template !== undefined) {
    output.writeFieldBegin('default_contract_template', Thrift.Type.STRUCT, 4);
    this.default_contract_template.write(output);
    output.writeFieldEnd();
  }
  if (this.providers !== null && this.providers !== undefined) {
    output.writeFieldBegin('providers', Thrift.Type.STRUCT, 5);
    this.providers.write(output);
    output.writeFieldEnd();
  }
  if (this.inspector !== null && this.inspector !== undefined) {
    output.writeFieldBegin('inspector', Thrift.Type.STRUCT, 6);
    this.inspector.write(output);
    output.writeFieldEnd();
  }
  if (this.realm !== null && this.realm !== undefined) {
    output.writeFieldBegin('realm', Thrift.Type.I32, 7);
    output.writeI32(this.realm);
    output.writeFieldEnd();
  }
  if (this.residences !== null && this.residences !== undefined) {
    output.writeFieldBegin('residences', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.I32, this.residences.length);
    for (var iter427 in this.residences)
    {
      if (this.residences.hasOwnProperty(iter427))
      {
        iter427 = this.residences[iter427];
        output.writeI32(iter427);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractPaymentInstitutionDefaults = module.exports.ContractPaymentInstitutionDefaults = function(args) {
  this.test = null;
  this.live = null;
  if (args) {
    if (args.test !== undefined && args.test !== null) {
      this.test = new ttypes.PaymentInstitutionRef(args.test);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field test is unset!');
    }
    if (args.live !== undefined && args.live !== null) {
      this.live = new ttypes.PaymentInstitutionRef(args.live);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field live is unset!');
    }
  }
};
ContractPaymentInstitutionDefaults.prototype = {};
ContractPaymentInstitutionDefaults.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.test = new ttypes.PaymentInstitutionRef();
        this.test.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.live = new ttypes.PaymentInstitutionRef();
        this.live.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractPaymentInstitutionDefaults.prototype.write = function(output) {
  output.writeStructBegin('ContractPaymentInstitutionDefaults');
  if (this.test !== null && this.test !== undefined) {
    output.writeFieldBegin('test', Thrift.Type.STRUCT, 1);
    this.test.write(output);
    output.writeFieldEnd();
  }
  if (this.live !== null && this.live !== undefined) {
    output.writeFieldBegin('live', Thrift.Type.STRUCT, 2);
    this.live.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GlobalsRef = module.exports.GlobalsRef = function(args) {
};
GlobalsRef.prototype = {};
GlobalsRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GlobalsRef.prototype.write = function(output) {
  output.writeStructBegin('GlobalsRef');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Globals = module.exports.Globals = function(args) {
  this.external_account_set = null;
  this.payment_institutions = null;
  this.contract_payment_institution_defaults = null;
  if (args) {
    if (args.external_account_set !== undefined && args.external_account_set !== null) {
      this.external_account_set = new ttypes.ExternalAccountSetSelector(args.external_account_set);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field external_account_set is unset!');
    }
    if (args.payment_institutions !== undefined && args.payment_institutions !== null) {
      this.payment_institutions = Thrift.copyList(args.payment_institutions, [ttypes.PaymentInstitutionRef]);
    }
    if (args.contract_payment_institution_defaults !== undefined && args.contract_payment_institution_defaults !== null) {
      this.contract_payment_institution_defaults = new ttypes.ContractPaymentInstitutionDefaults(args.contract_payment_institution_defaults);
    }
  }
};
Globals.prototype = {};
Globals.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.external_account_set = new ttypes.ExternalAccountSetSelector();
        this.external_account_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size428 = 0;
        var _rtmp3432;
        this.payment_institutions = [];
        var _etype431 = 0;
        _rtmp3432 = input.readSetBegin();
        _etype431 = _rtmp3432.etype;
        _size428 = _rtmp3432.size;
        for (var _i433 = 0; _i433 < _size428; ++_i433)
        {
          var elem434 = null;
          elem434 = new ttypes.PaymentInstitutionRef();
          elem434.read(input);
          this.payment_institutions.push(elem434);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRUCT) {
        this.contract_payment_institution_defaults = new ttypes.ContractPaymentInstitutionDefaults();
        this.contract_payment_institution_defaults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Globals.prototype.write = function(output) {
  output.writeStructBegin('Globals');
  if (this.external_account_set !== null && this.external_account_set !== undefined) {
    output.writeFieldBegin('external_account_set', Thrift.Type.STRUCT, 4);
    this.external_account_set.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_institutions !== null && this.payment_institutions !== undefined) {
    output.writeFieldBegin('payment_institutions', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.STRUCT, this.payment_institutions.length);
    for (var iter435 in this.payment_institutions)
    {
      if (this.payment_institutions.hasOwnProperty(iter435))
      {
        iter435 = this.payment_institutions[iter435];
        iter435.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.contract_payment_institution_defaults !== null && this.contract_payment_institution_defaults !== undefined) {
    output.writeFieldBegin('contract_payment_institution_defaults', Thrift.Type.STRUCT, 42);
    this.contract_payment_institution_defaults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Dummy = module.exports.Dummy = function(args) {
};
Dummy.prototype = {};
Dummy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Dummy.prototype.write = function(output) {
  output.writeStructBegin('Dummy');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DummyRef = module.exports.DummyRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
DummyRef.prototype = {};
DummyRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DummyRef.prototype.write = function(output) {
  output.writeStructBegin('DummyRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DummyObject = module.exports.DummyObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.DummyRef(args.ref);
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.Dummy(args.data);
    }
  }
};
DummyObject.prototype = {};
DummyObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.DummyRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Dummy();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DummyObject.prototype.write = function(output) {
  output.writeStructBegin('DummyObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DummyLink = module.exports.DummyLink = function(args) {
  this.link = null;
  if (args) {
    if (args.link !== undefined && args.link !== null) {
      this.link = new ttypes.DummyRef(args.link);
    }
  }
};
DummyLink.prototype = {};
DummyLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.link = new ttypes.DummyRef();
        this.link.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DummyLink.prototype.write = function(output) {
  output.writeStructBegin('DummyLink');
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRUCT, 1);
    this.link.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DummyLinkRef = module.exports.DummyLinkRef = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
DummyLinkRef.prototype = {};
DummyLinkRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DummyLinkRef.prototype.write = function(output) {
  output.writeStructBegin('DummyLinkRef');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DummyLinkObject = module.exports.DummyLinkObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.DummyLinkRef(args.ref);
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.DummyLink(args.data);
    }
  }
};
DummyLinkObject.prototype = {};
DummyLinkObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.DummyLinkRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.DummyLink();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DummyLinkObject.prototype.write = function(output) {
  output.writeStructBegin('DummyLinkObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractTemplateObject = module.exports.ContractTemplateObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.ContractTemplateRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.ContractTemplate(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
ContractTemplateObject.prototype = {};
ContractTemplateObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.ContractTemplateRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.ContractTemplate();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractTemplateObject.prototype.write = function(output) {
  output.writeStructBegin('ContractTemplateObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TermSetHierarchyObject = module.exports.TermSetHierarchyObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.TermSetHierarchyRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.TermSetHierarchy(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
TermSetHierarchyObject.prototype = {};
TermSetHierarchyObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.TermSetHierarchyRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TermSetHierarchy();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TermSetHierarchyObject.prototype.write = function(output) {
  output.writeStructBegin('TermSetHierarchyObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CategoryObject = module.exports.CategoryObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.CategoryRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.Category(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
CategoryObject.prototype = {};
CategoryObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.CategoryRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Category();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CategoryObject.prototype.write = function(output) {
  output.writeStructBegin('CategoryObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CurrencyObject = module.exports.CurrencyObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.CurrencyRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.Currency(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
CurrencyObject.prototype = {};
CurrencyObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.CurrencyRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Currency();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CurrencyObject.prototype.write = function(output) {
  output.writeStructBegin('CurrencyObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BusinessScheduleObject = module.exports.BusinessScheduleObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.BusinessScheduleRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.BusinessSchedule(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
BusinessScheduleObject.prototype = {};
BusinessScheduleObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.BusinessScheduleRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.BusinessSchedule();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BusinessScheduleObject.prototype.write = function(output) {
  output.writeStructBegin('BusinessScheduleObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CalendarObject = module.exports.CalendarObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.CalendarRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.Calendar(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
CalendarObject.prototype = {};
CalendarObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.CalendarRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Calendar();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarObject.prototype.write = function(output) {
  output.writeStructBegin('CalendarObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentMethodObject = module.exports.PaymentMethodObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.PaymentMethodRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.PaymentMethodDefinition(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
PaymentMethodObject.prototype = {};
PaymentMethodObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.PaymentMethodRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.PaymentMethodDefinition();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentMethodObject.prototype.write = function(output) {
  output.writeStructBegin('PaymentMethodObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutMethodObject = module.exports.PayoutMethodObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.PayoutMethodRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.PayoutMethodDefinition(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
PayoutMethodObject.prototype = {};
PayoutMethodObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.PayoutMethodRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.PayoutMethodDefinition();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutMethodObject.prototype.write = function(output) {
  output.writeStructBegin('PayoutMethodObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BankCardBINRangeObject = module.exports.BankCardBINRangeObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.BankCardBINRangeRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.BankCardBINRange(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
BankCardBINRangeObject.prototype = {};
BankCardBINRangeObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.BankCardBINRangeRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.BankCardBINRange();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BankCardBINRangeObject.prototype.write = function(output) {
  output.writeStructBegin('BankCardBINRangeObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractorObject = module.exports.ContractorObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.ContractorRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.Contractor(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
ContractorObject.prototype = {};
ContractorObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.ContractorRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Contractor();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractorObject.prototype.write = function(output) {
  output.writeStructBegin('ContractorObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProviderObject = module.exports.ProviderObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.ProviderRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.Provider(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
ProviderObject.prototype = {};
ProviderObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.ProviderRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Provider();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProviderObject.prototype.write = function(output) {
  output.writeStructBegin('ProviderObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TerminalObject = module.exports.TerminalObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.TerminalRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.Terminal(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
TerminalObject.prototype = {};
TerminalObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.TerminalRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Terminal();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TerminalObject.prototype.write = function(output) {
  output.writeStructBegin('TerminalObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InspectorObject = module.exports.InspectorObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.InspectorRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.Inspector(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
InspectorObject.prototype = {};
InspectorObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.InspectorRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Inspector();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InspectorObject.prototype.write = function(output) {
  output.writeStructBegin('InspectorObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentInstitutionObject = module.exports.PaymentInstitutionObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.PaymentInstitutionRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.PaymentInstitution(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
PaymentInstitutionObject.prototype = {};
PaymentInstitutionObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.PaymentInstitutionRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.PaymentInstitution();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentInstitutionObject.prototype.write = function(output) {
  output.writeStructBegin('PaymentInstitutionObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemAccountSetObject = module.exports.SystemAccountSetObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.SystemAccountSetRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.SystemAccountSet(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
SystemAccountSetObject.prototype = {};
SystemAccountSetObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.SystemAccountSetRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.SystemAccountSet();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemAccountSetObject.prototype.write = function(output) {
  output.writeStructBegin('SystemAccountSetObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExternalAccountSetObject = module.exports.ExternalAccountSetObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.ExternalAccountSetRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.ExternalAccountSet(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
ExternalAccountSetObject.prototype = {};
ExternalAccountSetObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.ExternalAccountSetRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.ExternalAccountSet();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExternalAccountSetObject.prototype.write = function(output) {
  output.writeStructBegin('ExternalAccountSetObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProxyObject = module.exports.ProxyObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.ProxyRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.ProxyDefinition(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
ProxyObject.prototype = {};
ProxyObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.ProxyRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.ProxyDefinition();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProxyObject.prototype.write = function(output) {
  output.writeStructBegin('ProxyObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GlobalsObject = module.exports.GlobalsObject = function(args) {
  this.ref = null;
  this.data = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new ttypes.GlobalsRef(args.ref);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ref is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new ttypes.Globals(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
GlobalsObject.prototype = {};
GlobalsObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new ttypes.GlobalsRef();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Globals();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GlobalsObject.prototype.write = function(output) {
  output.writeStructBegin('GlobalsObject');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Reference = module.exports.Reference = function(args) {
  this.category = null;
  this.currency = null;
  this.business_schedule = null;
  this.calendar = null;
  this.payment_method = null;
  this.payout_method = null;
  this.contractor = null;
  this.bank_card_bin_range = null;
  this.contract_template = null;
  this.term_set_hierarchy = null;
  this.payment_institution = null;
  this.provider = null;
  this.terminal = null;
  this.inspector = null;
  this.system_account_set = null;
  this.external_account_set = null;
  this.proxy = null;
  this.globals = null;
  this.dummy = null;
  this.dummy_link = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = new ttypes.CategoryRef(args.category);
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = new ttypes.CurrencyRef(args.currency);
    }
    if (args.business_schedule !== undefined && args.business_schedule !== null) {
      this.business_schedule = new ttypes.BusinessScheduleRef(args.business_schedule);
    }
    if (args.calendar !== undefined && args.calendar !== null) {
      this.calendar = new ttypes.CalendarRef(args.calendar);
    }
    if (args.payment_method !== undefined && args.payment_method !== null) {
      this.payment_method = new ttypes.PaymentMethodRef(args.payment_method);
    }
    if (args.payout_method !== undefined && args.payout_method !== null) {
      this.payout_method = new ttypes.PayoutMethodRef(args.payout_method);
    }
    if (args.contractor !== undefined && args.contractor !== null) {
      this.contractor = new ttypes.ContractorRef(args.contractor);
    }
    if (args.bank_card_bin_range !== undefined && args.bank_card_bin_range !== null) {
      this.bank_card_bin_range = new ttypes.BankCardBINRangeRef(args.bank_card_bin_range);
    }
    if (args.contract_template !== undefined && args.contract_template !== null) {
      this.contract_template = new ttypes.ContractTemplateRef(args.contract_template);
    }
    if (args.term_set_hierarchy !== undefined && args.term_set_hierarchy !== null) {
      this.term_set_hierarchy = new ttypes.TermSetHierarchyRef(args.term_set_hierarchy);
    }
    if (args.payment_institution !== undefined && args.payment_institution !== null) {
      this.payment_institution = new ttypes.PaymentInstitutionRef(args.payment_institution);
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = new ttypes.ProviderRef(args.provider);
    }
    if (args.terminal !== undefined && args.terminal !== null) {
      this.terminal = new ttypes.TerminalRef(args.terminal);
    }
    if (args.inspector !== undefined && args.inspector !== null) {
      this.inspector = new ttypes.InspectorRef(args.inspector);
    }
    if (args.system_account_set !== undefined && args.system_account_set !== null) {
      this.system_account_set = new ttypes.SystemAccountSetRef(args.system_account_set);
    }
    if (args.external_account_set !== undefined && args.external_account_set !== null) {
      this.external_account_set = new ttypes.ExternalAccountSetRef(args.external_account_set);
    }
    if (args.proxy !== undefined && args.proxy !== null) {
      this.proxy = new ttypes.ProxyRef(args.proxy);
    }
    if (args.globals !== undefined && args.globals !== null) {
      this.globals = new ttypes.GlobalsRef(args.globals);
    }
    if (args.dummy !== undefined && args.dummy !== null) {
      this.dummy = new ttypes.DummyRef(args.dummy);
    }
    if (args.dummy_link !== undefined && args.dummy_link !== null) {
      this.dummy_link = new ttypes.DummyLinkRef(args.dummy_link);
    }
  }
};
Reference.prototype = {};
Reference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.category = new ttypes.CategoryRef();
        this.category.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.currency = new ttypes.CurrencyRef();
        this.currency.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.business_schedule = new ttypes.BusinessScheduleRef();
        this.business_schedule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.calendar = new ttypes.CalendarRef();
        this.calendar.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_method = new ttypes.PaymentMethodRef();
        this.payment_method.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_method = new ttypes.PayoutMethodRef();
        this.payout_method.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.contractor = new ttypes.ContractorRef();
        this.contractor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.bank_card_bin_range = new ttypes.BankCardBINRangeRef();
        this.bank_card_bin_range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.contract_template = new ttypes.ContractTemplateRef();
        this.contract_template.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.term_set_hierarchy = new ttypes.TermSetHierarchyRef();
        this.term_set_hierarchy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_institution = new ttypes.PaymentInstitutionRef();
        this.payment_institution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.provider = new ttypes.ProviderRef();
        this.provider.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.terminal = new ttypes.TerminalRef();
        this.terminal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.inspector = new ttypes.InspectorRef();
        this.inspector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.system_account_set = new ttypes.SystemAccountSetRef();
        this.system_account_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.external_account_set = new ttypes.ExternalAccountSetRef();
        this.external_account_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxy = new ttypes.ProxyRef();
        this.proxy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.globals = new ttypes.GlobalsRef();
        this.globals.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.dummy = new ttypes.DummyRef();
        this.dummy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.dummy_link = new ttypes.DummyLinkRef();
        this.dummy_link.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Reference.prototype.write = function(output) {
  output.writeStructBegin('Reference');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRUCT, 1);
    this.category.write(output);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRUCT, 2);
    this.currency.write(output);
    output.writeFieldEnd();
  }
  if (this.business_schedule !== null && this.business_schedule !== undefined) {
    output.writeFieldBegin('business_schedule', Thrift.Type.STRUCT, 19);
    this.business_schedule.write(output);
    output.writeFieldEnd();
  }
  if (this.calendar !== null && this.calendar !== undefined) {
    output.writeFieldBegin('calendar', Thrift.Type.STRUCT, 20);
    this.calendar.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_method !== null && this.payment_method !== undefined) {
    output.writeFieldBegin('payment_method', Thrift.Type.STRUCT, 3);
    this.payment_method.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_method !== null && this.payout_method !== undefined) {
    output.writeFieldBegin('payout_method', Thrift.Type.STRUCT, 21);
    this.payout_method.write(output);
    output.writeFieldEnd();
  }
  if (this.contractor !== null && this.contractor !== undefined) {
    output.writeFieldBegin('contractor', Thrift.Type.STRUCT, 4);
    this.contractor.write(output);
    output.writeFieldEnd();
  }
  if (this.bank_card_bin_range !== null && this.bank_card_bin_range !== undefined) {
    output.writeFieldBegin('bank_card_bin_range', Thrift.Type.STRUCT, 5);
    this.bank_card_bin_range.write(output);
    output.writeFieldEnd();
  }
  if (this.contract_template !== null && this.contract_template !== undefined) {
    output.writeFieldBegin('contract_template', Thrift.Type.STRUCT, 6);
    this.contract_template.write(output);
    output.writeFieldEnd();
  }
  if (this.term_set_hierarchy !== null && this.term_set_hierarchy !== undefined) {
    output.writeFieldBegin('term_set_hierarchy', Thrift.Type.STRUCT, 17);
    this.term_set_hierarchy.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_institution !== null && this.payment_institution !== undefined) {
    output.writeFieldBegin('payment_institution', Thrift.Type.STRUCT, 18);
    this.payment_institution.write(output);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRUCT, 7);
    this.provider.write(output);
    output.writeFieldEnd();
  }
  if (this.terminal !== null && this.terminal !== undefined) {
    output.writeFieldBegin('terminal', Thrift.Type.STRUCT, 8);
    this.terminal.write(output);
    output.writeFieldEnd();
  }
  if (this.inspector !== null && this.inspector !== undefined) {
    output.writeFieldBegin('inspector', Thrift.Type.STRUCT, 15);
    this.inspector.write(output);
    output.writeFieldEnd();
  }
  if (this.system_account_set !== null && this.system_account_set !== undefined) {
    output.writeFieldBegin('system_account_set', Thrift.Type.STRUCT, 14);
    this.system_account_set.write(output);
    output.writeFieldEnd();
  }
  if (this.external_account_set !== null && this.external_account_set !== undefined) {
    output.writeFieldBegin('external_account_set', Thrift.Type.STRUCT, 16);
    this.external_account_set.write(output);
    output.writeFieldEnd();
  }
  if (this.proxy !== null && this.proxy !== undefined) {
    output.writeFieldBegin('proxy', Thrift.Type.STRUCT, 9);
    this.proxy.write(output);
    output.writeFieldEnd();
  }
  if (this.globals !== null && this.globals !== undefined) {
    output.writeFieldBegin('globals', Thrift.Type.STRUCT, 11);
    this.globals.write(output);
    output.writeFieldEnd();
  }
  if (this.dummy !== null && this.dummy !== undefined) {
    output.writeFieldBegin('dummy', Thrift.Type.STRUCT, 12);
    this.dummy.write(output);
    output.writeFieldEnd();
  }
  if (this.dummy_link !== null && this.dummy_link !== undefined) {
    output.writeFieldBegin('dummy_link', Thrift.Type.STRUCT, 13);
    this.dummy_link.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DomainObject = module.exports.DomainObject = function(args) {
  this.category = null;
  this.currency = null;
  this.business_schedule = null;
  this.calendar = null;
  this.payment_method = null;
  this.payout_method = null;
  this.contractor = null;
  this.bank_card_bin_range = null;
  this.contract_template = null;
  this.term_set_hierarchy = null;
  this.payment_institution = null;
  this.provider = null;
  this.terminal = null;
  this.inspector = null;
  this.system_account_set = null;
  this.external_account_set = null;
  this.proxy = null;
  this.globals = null;
  this.dummy = null;
  this.dummy_link = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = new ttypes.CategoryObject(args.category);
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = new ttypes.CurrencyObject(args.currency);
    }
    if (args.business_schedule !== undefined && args.business_schedule !== null) {
      this.business_schedule = new ttypes.BusinessScheduleObject(args.business_schedule);
    }
    if (args.calendar !== undefined && args.calendar !== null) {
      this.calendar = new ttypes.CalendarObject(args.calendar);
    }
    if (args.payment_method !== undefined && args.payment_method !== null) {
      this.payment_method = new ttypes.PaymentMethodObject(args.payment_method);
    }
    if (args.payout_method !== undefined && args.payout_method !== null) {
      this.payout_method = new ttypes.PayoutMethodObject(args.payout_method);
    }
    if (args.contractor !== undefined && args.contractor !== null) {
      this.contractor = new ttypes.ContractorObject(args.contractor);
    }
    if (args.bank_card_bin_range !== undefined && args.bank_card_bin_range !== null) {
      this.bank_card_bin_range = new ttypes.BankCardBINRangeObject(args.bank_card_bin_range);
    }
    if (args.contract_template !== undefined && args.contract_template !== null) {
      this.contract_template = new ttypes.ContractTemplateObject(args.contract_template);
    }
    if (args.term_set_hierarchy !== undefined && args.term_set_hierarchy !== null) {
      this.term_set_hierarchy = new ttypes.TermSetHierarchyObject(args.term_set_hierarchy);
    }
    if (args.payment_institution !== undefined && args.payment_institution !== null) {
      this.payment_institution = new ttypes.PaymentInstitutionObject(args.payment_institution);
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = new ttypes.ProviderObject(args.provider);
    }
    if (args.terminal !== undefined && args.terminal !== null) {
      this.terminal = new ttypes.TerminalObject(args.terminal);
    }
    if (args.inspector !== undefined && args.inspector !== null) {
      this.inspector = new ttypes.InspectorObject(args.inspector);
    }
    if (args.system_account_set !== undefined && args.system_account_set !== null) {
      this.system_account_set = new ttypes.SystemAccountSetObject(args.system_account_set);
    }
    if (args.external_account_set !== undefined && args.external_account_set !== null) {
      this.external_account_set = new ttypes.ExternalAccountSetObject(args.external_account_set);
    }
    if (args.proxy !== undefined && args.proxy !== null) {
      this.proxy = new ttypes.ProxyObject(args.proxy);
    }
    if (args.globals !== undefined && args.globals !== null) {
      this.globals = new ttypes.GlobalsObject(args.globals);
    }
    if (args.dummy !== undefined && args.dummy !== null) {
      this.dummy = new ttypes.DummyObject(args.dummy);
    }
    if (args.dummy_link !== undefined && args.dummy_link !== null) {
      this.dummy_link = new ttypes.DummyLinkObject(args.dummy_link);
    }
  }
};
DomainObject.prototype = {};
DomainObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.category = new ttypes.CategoryObject();
        this.category.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.currency = new ttypes.CurrencyObject();
        this.currency.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.business_schedule = new ttypes.BusinessScheduleObject();
        this.business_schedule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.calendar = new ttypes.CalendarObject();
        this.calendar.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_method = new ttypes.PaymentMethodObject();
        this.payment_method.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_method = new ttypes.PayoutMethodObject();
        this.payout_method.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.contractor = new ttypes.ContractorObject();
        this.contractor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.bank_card_bin_range = new ttypes.BankCardBINRangeObject();
        this.bank_card_bin_range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.contract_template = new ttypes.ContractTemplateObject();
        this.contract_template.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.term_set_hierarchy = new ttypes.TermSetHierarchyObject();
        this.term_set_hierarchy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_institution = new ttypes.PaymentInstitutionObject();
        this.payment_institution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.provider = new ttypes.ProviderObject();
        this.provider.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.terminal = new ttypes.TerminalObject();
        this.terminal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.inspector = new ttypes.InspectorObject();
        this.inspector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.system_account_set = new ttypes.SystemAccountSetObject();
        this.system_account_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.external_account_set = new ttypes.ExternalAccountSetObject();
        this.external_account_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxy = new ttypes.ProxyObject();
        this.proxy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.globals = new ttypes.GlobalsObject();
        this.globals.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.dummy = new ttypes.DummyObject();
        this.dummy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.dummy_link = new ttypes.DummyLinkObject();
        this.dummy_link.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DomainObject.prototype.write = function(output) {
  output.writeStructBegin('DomainObject');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRUCT, 1);
    this.category.write(output);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRUCT, 2);
    this.currency.write(output);
    output.writeFieldEnd();
  }
  if (this.business_schedule !== null && this.business_schedule !== undefined) {
    output.writeFieldBegin('business_schedule', Thrift.Type.STRUCT, 19);
    this.business_schedule.write(output);
    output.writeFieldEnd();
  }
  if (this.calendar !== null && this.calendar !== undefined) {
    output.writeFieldBegin('calendar', Thrift.Type.STRUCT, 20);
    this.calendar.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_method !== null && this.payment_method !== undefined) {
    output.writeFieldBegin('payment_method', Thrift.Type.STRUCT, 3);
    this.payment_method.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_method !== null && this.payout_method !== undefined) {
    output.writeFieldBegin('payout_method', Thrift.Type.STRUCT, 21);
    this.payout_method.write(output);
    output.writeFieldEnd();
  }
  if (this.contractor !== null && this.contractor !== undefined) {
    output.writeFieldBegin('contractor', Thrift.Type.STRUCT, 4);
    this.contractor.write(output);
    output.writeFieldEnd();
  }
  if (this.bank_card_bin_range !== null && this.bank_card_bin_range !== undefined) {
    output.writeFieldBegin('bank_card_bin_range', Thrift.Type.STRUCT, 5);
    this.bank_card_bin_range.write(output);
    output.writeFieldEnd();
  }
  if (this.contract_template !== null && this.contract_template !== undefined) {
    output.writeFieldBegin('contract_template', Thrift.Type.STRUCT, 6);
    this.contract_template.write(output);
    output.writeFieldEnd();
  }
  if (this.term_set_hierarchy !== null && this.term_set_hierarchy !== undefined) {
    output.writeFieldBegin('term_set_hierarchy', Thrift.Type.STRUCT, 17);
    this.term_set_hierarchy.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_institution !== null && this.payment_institution !== undefined) {
    output.writeFieldBegin('payment_institution', Thrift.Type.STRUCT, 18);
    this.payment_institution.write(output);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRUCT, 7);
    this.provider.write(output);
    output.writeFieldEnd();
  }
  if (this.terminal !== null && this.terminal !== undefined) {
    output.writeFieldBegin('terminal', Thrift.Type.STRUCT, 8);
    this.terminal.write(output);
    output.writeFieldEnd();
  }
  if (this.inspector !== null && this.inspector !== undefined) {
    output.writeFieldBegin('inspector', Thrift.Type.STRUCT, 15);
    this.inspector.write(output);
    output.writeFieldEnd();
  }
  if (this.system_account_set !== null && this.system_account_set !== undefined) {
    output.writeFieldBegin('system_account_set', Thrift.Type.STRUCT, 14);
    this.system_account_set.write(output);
    output.writeFieldEnd();
  }
  if (this.external_account_set !== null && this.external_account_set !== undefined) {
    output.writeFieldBegin('external_account_set', Thrift.Type.STRUCT, 16);
    this.external_account_set.write(output);
    output.writeFieldEnd();
  }
  if (this.proxy !== null && this.proxy !== undefined) {
    output.writeFieldBegin('proxy', Thrift.Type.STRUCT, 9);
    this.proxy.write(output);
    output.writeFieldEnd();
  }
  if (this.globals !== null && this.globals !== undefined) {
    output.writeFieldBegin('globals', Thrift.Type.STRUCT, 11);
    this.globals.write(output);
    output.writeFieldEnd();
  }
  if (this.dummy !== null && this.dummy !== undefined) {
    output.writeFieldBegin('dummy', Thrift.Type.STRUCT, 12);
    this.dummy.write(output);
    output.writeFieldEnd();
  }
  if (this.dummy_link !== null && this.dummy_link !== undefined) {
    output.writeFieldBegin('dummy_link', Thrift.Type.STRUCT, 13);
    this.dummy_link.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

