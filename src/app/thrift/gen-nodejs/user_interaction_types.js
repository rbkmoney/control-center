//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('woody_js/dist/thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');


var ttypes = module.exports = {};
var BrowserHTTPRequest = module.exports.BrowserHTTPRequest = function(args) {
  this.get_request = null;
  this.post_request = null;
  if (args) {
    if (args.get_request !== undefined && args.get_request !== null) {
      this.get_request = new ttypes.BrowserGetRequest(args.get_request);
    }
    if (args.post_request !== undefined && args.post_request !== null) {
      this.post_request = new ttypes.BrowserPostRequest(args.post_request);
    }
  }
};
BrowserHTTPRequest.prototype = {};
BrowserHTTPRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.get_request = new ttypes.BrowserGetRequest();
        this.get_request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.post_request = new ttypes.BrowserPostRequest();
        this.post_request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BrowserHTTPRequest.prototype.write = function(output) {
  output.writeStructBegin('BrowserHTTPRequest');
  if (this.get_request !== null && this.get_request !== undefined) {
    output.writeFieldBegin('get_request', Thrift.Type.STRUCT, 1);
    this.get_request.write(output);
    output.writeFieldEnd();
  }
  if (this.post_request !== null && this.post_request !== undefined) {
    output.writeFieldBegin('post_request', Thrift.Type.STRUCT, 2);
    this.post_request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BrowserGetRequest = module.exports.BrowserGetRequest = function(args) {
  this.uri = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
  }
};
BrowserGetRequest.prototype = {};
BrowserGetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BrowserGetRequest.prototype.write = function(output) {
  output.writeStructBegin('BrowserGetRequest');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BrowserPostRequest = module.exports.BrowserPostRequest = function(args) {
  this.uri = null;
  this.form = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uri is unset!');
    }
    if (args.form !== undefined && args.form !== null) {
      this.form = Thrift.copyMap(args.form, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field form is unset!');
    }
  }
};
BrowserPostRequest.prototype = {};
BrowserPostRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.form = new Map();
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.form.set(key6, val7);
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BrowserPostRequest.prototype.write = function(output) {
  output.writeStructBegin('BrowserPostRequest');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.form !== null && this.form !== undefined) {
    output.writeFieldBegin('form', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, this.form.size);
    var func10 = function(viter9, kiter8) {
      output.writeString(kiter8);
      output.writeString(viter9);
    };
    this.form.forEach(func10);
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentTerminalReceipt = module.exports.PaymentTerminalReceipt = function(args) {
  this.short_payment_id = null;
  this.due = null;
  if (args) {
    if (args.short_payment_id !== undefined && args.short_payment_id !== null) {
      this.short_payment_id = args.short_payment_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field short_payment_id is unset!');
    }
    if (args.due !== undefined && args.due !== null) {
      this.due = args.due;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field due is unset!');
    }
  }
};
PaymentTerminalReceipt.prototype = {};
PaymentTerminalReceipt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.short_payment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.due = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentTerminalReceipt.prototype.write = function(output) {
  output.writeStructBegin('PaymentTerminalReceipt');
  if (this.short_payment_id !== null && this.short_payment_id !== undefined) {
    output.writeFieldBegin('short_payment_id', Thrift.Type.STRING, 1);
    output.writeString(this.short_payment_id);
    output.writeFieldEnd();
  }
  if (this.due !== null && this.due !== undefined) {
    output.writeFieldBegin('due', Thrift.Type.STRING, 2);
    output.writeString(this.due);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserInteraction = module.exports.UserInteraction = function(args) {
  this.redirect = null;
  this.payment_terminal_reciept = null;
  if (args) {
    if (args.redirect !== undefined && args.redirect !== null) {
      this.redirect = new ttypes.BrowserHTTPRequest(args.redirect);
    }
    if (args.payment_terminal_reciept !== undefined && args.payment_terminal_reciept !== null) {
      this.payment_terminal_reciept = new ttypes.PaymentTerminalReceipt(args.payment_terminal_reciept);
    }
  }
};
UserInteraction.prototype = {};
UserInteraction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.redirect = new ttypes.BrowserHTTPRequest();
        this.redirect.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_terminal_reciept = new ttypes.PaymentTerminalReceipt();
        this.payment_terminal_reciept.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInteraction.prototype.write = function(output) {
  output.writeStructBegin('UserInteraction');
  if (this.redirect !== null && this.redirect !== undefined) {
    output.writeFieldBegin('redirect', Thrift.Type.STRUCT, 1);
    this.redirect.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_terminal_reciept !== null && this.payment_terminal_reciept !== undefined) {
    output.writeFieldBegin('payment_terminal_reciept', Thrift.Type.STRUCT, 2);
    this.payment_terminal_reciept.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

