//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('woody_js/dist/thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');
var domain_ttypes = require('./domain_types');
var user_interaction_ttypes = require('./user_interaction_types');


var ttypes = require('./payment_processing_types');
//HELPER FUNCTIONS AND STRUCTURES

var EventSink_GetEvents_args = function(args) {
  this.range = null;
  if (args) {
    if (args.range !== undefined && args.range !== null) {
      this.range = new ttypes.EventRange(args.range);
    }
  }
};
EventSink_GetEvents_args.prototype = {};
EventSink_GetEvents_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.EventRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventSink_GetEvents_args.prototype.write = function(output) {
  output.writeStructBegin('EventSink_GetEvents_args');
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 1);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventSink_GetEvents_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.EventNotFound) {
    this.ex1 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
EventSink_GetEvents_result.prototype = {};
EventSink_GetEvents_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size203 = 0;
        var _rtmp3207;
        this.success = [];
        var _etype206 = 0;
        _rtmp3207 = input.readListBegin();
        _etype206 = _rtmp3207.etype;
        _size203 = _rtmp3207.size;
        for (var _i208 = 0; _i208 < _size203; ++_i208)
        {
          var elem209 = null;
          elem209 = new ttypes.Event();
          elem209.read(input);
          this.success.push(elem209);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.EventNotFound();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new base_ttypes.InvalidRequest();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventSink_GetEvents_result.prototype.write = function(output) {
  output.writeStructBegin('EventSink_GetEvents_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter210 in this.success)
    {
      if (this.success.hasOwnProperty(iter210))
      {
        iter210 = this.success[iter210];
        iter210.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventSink_GetLastEventID_args = function(args) {
};
EventSink_GetLastEventID_args.prototype = {};
EventSink_GetLastEventID_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventSink_GetLastEventID_args.prototype.write = function(output) {
  output.writeStructBegin('EventSink_GetLastEventID_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventSink_GetLastEventID_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.NoLastEvent) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
EventSink_GetLastEventID_result.prototype = {};
EventSink_GetLastEventID_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.NoLastEvent();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventSink_GetLastEventID_result.prototype.write = function(output) {
  output.writeStructBegin('EventSink_GetLastEventID_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventSinkClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
EventSinkClient.prototype = {};
EventSinkClient.prototype.seqid = function() { return this._seqid; }
EventSinkClient.prototype.new_seqid = function() { return this._seqid += 1; }
EventSinkClient.prototype.GetEvents = function(range, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEvents(range);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEvents(range);
  }
};

EventSinkClient.prototype.send_GetEvents = function(range) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEvents', Thrift.MessageType.CALL, this.seqid());
  var args = new EventSink_GetEvents_args();
  args.range = range;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EventSinkClient.prototype.recv_GetEvents = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EventSink_GetEvents_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEvents failed: unknown result');
};
EventSinkClient.prototype.GetLastEventID = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetLastEventID();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetLastEventID();
  }
};

EventSinkClient.prototype.send_GetLastEventID = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetLastEventID', Thrift.MessageType.CALL, this.seqid());
  var args = new EventSink_GetLastEventID_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

EventSinkClient.prototype.recv_GetLastEventID = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new EventSink_GetLastEventID_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetLastEventID failed: unknown result');
};
var EventSinkProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
EventSinkProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

EventSinkProcessor.prototype.process_GetEvents = function(seqid, input, output) {
  var args = new EventSink_GetEvents_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEvents.length === 1) {
    Q.fcall(this._handler.GetEvents, args.range)
      .then(function(result) {
        var result = new EventSink_GetEvents_result({success: result});
        output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.EventNotFound || err instanceof base_ttypes.InvalidRequest) {
          var result = new EventSink_GetEvents_result(err);
          output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetEvents", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEvents(args.range, function (err, result) {
      if (err == null || err instanceof ttypes.EventNotFound || err instanceof base_ttypes.InvalidRequest) {
        var result = new EventSink_GetEvents_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEvents", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

EventSinkProcessor.prototype.process_GetLastEventID = function(seqid, input, output) {
  var args = new EventSink_GetLastEventID_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetLastEventID.length === 0) {
    Q.fcall(this._handler.GetLastEventID)
      .then(function(result) {
        var result = new EventSink_GetLastEventID_result({success: result});
        output.writeMessageBegin("GetLastEventID", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.NoLastEvent) {
          var result = new EventSink_GetLastEventID_result(err);
          output.writeMessageBegin("GetLastEventID", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetLastEventID", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetLastEventID(function (err, result) {
      if (err == null || err instanceof ttypes.NoLastEvent) {
        var result = new EventSink_GetLastEventID_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetLastEventID", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetLastEventID", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

