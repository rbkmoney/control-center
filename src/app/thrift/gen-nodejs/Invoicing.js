//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('woody_js/dist/thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');
var domain_ttypes = require('./domain_types');
var user_interaction_ttypes = require('./user_interaction_types');


var ttypes = require('./payment_processing_types');
//HELPER FUNCTIONS AND STRUCTURES

var Invoicing_Create_args = function(args) {
  this.user = null;
  this.params = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.InvoiceParams(args.params);
    }
  }
};
Invoicing_Create_args.prototype = {};
Invoicing_Create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.InvoiceParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_Create_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_Create_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 2);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_Create_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  this.ex7 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.ShopNotFound) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex6 = args;
    return;
  }
  if (args instanceof ttypes.InvalidContractStatus) {
    this.ex7 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Invoice(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
    if (args.ex7 !== undefined && args.ex7 !== null) {
      this.ex7 = args.ex7;
    }
  }
};
Invoicing_Create_result.prototype = {};
Invoicing_Create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Invoice();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new base_ttypes.InvalidRequest();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.PartyNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.ShopNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidPartyStatus();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.InvalidShopStatus();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex7 = new ttypes.InvalidContractStatus();
        this.ex7.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_Create_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_Create_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  if (this.ex7 !== null && this.ex7 !== undefined) {
    output.writeFieldBegin('ex7', Thrift.Type.STRUCT, 7);
    this.ex7.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CreateWithTemplate_args = function(args) {
  this.user = null;
  this.params = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.InvoiceWithTemplateParams(args.params);
    }
  }
};
Invoicing_CreateWithTemplate_args.prototype = {};
Invoicing_CreateWithTemplate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.InvoiceWithTemplateParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CreateWithTemplate_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CreateWithTemplate_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 2);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CreateWithTemplate_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  this.ex7 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidContractStatus) {
    this.ex5 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceTemplateNotFound) {
    this.ex6 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceTemplateRemoved) {
    this.ex7 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Invoice(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
    if (args.ex7 !== undefined && args.ex7 !== null) {
      this.ex7 = args.ex7;
    }
  }
};
Invoicing_CreateWithTemplate_result.prototype = {};
Invoicing_CreateWithTemplate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Invoice();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new base_ttypes.InvalidRequest();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidPartyStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidShopStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidContractStatus();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.InvoiceTemplateNotFound();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex7 = new ttypes.InvoiceTemplateRemoved();
        this.ex7.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CreateWithTemplate_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CreateWithTemplate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  if (this.ex7 !== null && this.ex7 !== undefined) {
    output.writeFieldBegin('ex7', Thrift.Type.STRUCT, 7);
    this.ex7.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_Get_args = function(args) {
  this.user = null;
  this.id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Invoicing_Get_args.prototype = {};
Invoicing_Get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_Get_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_Get_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_Get_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Invoice(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
Invoicing_Get_result.prototype = {};
Invoicing_Get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Invoice();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_Get_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_Get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_GetEvents_args = function(args) {
  this.user = null;
  this.id = null;
  this.range = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.range !== undefined && args.range !== null) {
      this.range = new ttypes.EventRange(args.range);
    }
  }
};
Invoicing_GetEvents_args.prototype = {};
Invoicing_GetEvents_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.EventRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_GetEvents_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_GetEvents_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 3);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_GetEvents_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.EventNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
Invoicing_GetEvents_result.prototype = {};
Invoicing_GetEvents_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.Event();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.EventNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new base_ttypes.InvalidRequest();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_GetEvents_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_GetEvents_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_ComputeTerms_args = function(args) {
  this.user = null;
  this.id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Invoicing_ComputeTerms_args.prototype = {};
Invoicing_ComputeTerms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_ComputeTerms_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_ComputeTerms_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_ComputeTerms_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.TermSet(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
  }
};
Invoicing_ComputeTerms_result.prototype = {};
Invoicing_ComputeTerms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.TermSet();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_ComputeTerms_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_ComputeTerms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_StartPayment_args = function(args) {
  this.user = null;
  this.id = null;
  this.params = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.InvoicePaymentParams(args.params);
    }
  }
};
Invoicing_StartPayment_args.prototype = {};
Invoicing_StartPayment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.InvoicePaymentParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_StartPayment_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_StartPayment_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 3);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_StartPayment_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  this.ex7 = null;
  this.ex8 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInvoiceStatus) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentPending) {
    this.ex4 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex6 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex7 = args;
    return;
  }
  if (args instanceof ttypes.InvalidContractStatus) {
    this.ex8 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.InvoicePayment(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
    if (args.ex7 !== undefined && args.ex7 !== null) {
      this.ex7 = args.ex7;
    }
    if (args.ex8 !== undefined && args.ex8 !== null) {
      this.ex8 = args.ex8;
    }
  }
};
Invoicing_StartPayment_result.prototype = {};
Invoicing_StartPayment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.InvoicePayment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidInvoiceStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvoicePaymentPending();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new base_ttypes.InvalidRequest();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.InvalidPartyStatus();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex7 = new ttypes.InvalidShopStatus();
        this.ex7.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex8 = new ttypes.InvalidContractStatus();
        this.ex8.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_StartPayment_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_StartPayment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  if (this.ex7 !== null && this.ex7 !== undefined) {
    output.writeFieldBegin('ex7', Thrift.Type.STRUCT, 7);
    this.ex7.write(output);
    output.writeFieldEnd();
  }
  if (this.ex8 !== null && this.ex8 !== undefined) {
    output.writeFieldBegin('ex8', Thrift.Type.STRUCT, 8);
    this.ex8.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_GetPayment_args = function(args) {
  this.user = null;
  this.id = null;
  this.payment_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.payment_id !== undefined && args.payment_id !== null) {
      this.payment_id = args.payment_id;
    }
  }
};
Invoicing_GetPayment_args.prototype = {};
Invoicing_GetPayment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.payment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_GetPayment_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_GetPayment_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payment_id !== null && this.payment_id !== undefined) {
    output.writeFieldBegin('payment_id', Thrift.Type.STRING, 3);
    output.writeString(this.payment_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_GetPayment_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentNotFound) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.InvoicePayment(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
Invoicing_GetPayment_result.prototype = {};
Invoicing_GetPayment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.InvoicePayment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvoicePaymentNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_GetPayment_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_GetPayment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CancelPayment_args = function(args) {
  this.user = null;
  this.id = null;
  this.payment_id = null;
  this.reason = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.payment_id !== undefined && args.payment_id !== null) {
      this.payment_id = args.payment_id;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
Invoicing_CancelPayment_args.prototype = {};
Invoicing_CancelPayment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.payment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CancelPayment_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CancelPayment_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payment_id !== null && this.payment_id !== undefined) {
    output.writeFieldBegin('payment_id', Thrift.Type.STRING, 3);
    output.writeString(this.payment_id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 4);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CancelPayment_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  this.ex7 = null;
  this.ex8 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPaymentStatus) {
    this.ex4 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex5 = args;
    return;
  }
  if (args instanceof ttypes.OperationNotPermitted) {
    this.ex6 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex7 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex8 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
    if (args.ex7 !== undefined && args.ex7 !== null) {
      this.ex7 = args.ex7;
    }
    if (args.ex8 !== undefined && args.ex8 !== null) {
      this.ex8 = args.ex8;
    }
  }
};
Invoicing_CancelPayment_result.prototype = {};
Invoicing_CancelPayment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvoicePaymentNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidPaymentStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new base_ttypes.InvalidRequest();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.OperationNotPermitted();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex7 = new ttypes.InvalidPartyStatus();
        this.ex7.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex8 = new ttypes.InvalidShopStatus();
        this.ex8.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CancelPayment_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CancelPayment_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  if (this.ex7 !== null && this.ex7 !== undefined) {
    output.writeFieldBegin('ex7', Thrift.Type.STRUCT, 7);
    this.ex7.write(output);
    output.writeFieldEnd();
  }
  if (this.ex8 !== null && this.ex8 !== undefined) {
    output.writeFieldBegin('ex8', Thrift.Type.STRUCT, 8);
    this.ex8.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CapturePayment_args = function(args) {
  this.user = null;
  this.id = null;
  this.payment_id = null;
  this.reason = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.payment_id !== undefined && args.payment_id !== null) {
      this.payment_id = args.payment_id;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
Invoicing_CapturePayment_args.prototype = {};
Invoicing_CapturePayment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.payment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CapturePayment_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CapturePayment_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payment_id !== null && this.payment_id !== undefined) {
    output.writeFieldBegin('payment_id', Thrift.Type.STRING, 3);
    output.writeString(this.payment_id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 4);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CapturePayment_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  this.ex7 = null;
  this.ex8 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPaymentStatus) {
    this.ex4 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex5 = args;
    return;
  }
  if (args instanceof ttypes.OperationNotPermitted) {
    this.ex6 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex7 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex8 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
    if (args.ex7 !== undefined && args.ex7 !== null) {
      this.ex7 = args.ex7;
    }
    if (args.ex8 !== undefined && args.ex8 !== null) {
      this.ex8 = args.ex8;
    }
  }
};
Invoicing_CapturePayment_result.prototype = {};
Invoicing_CapturePayment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvoicePaymentNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidPaymentStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new base_ttypes.InvalidRequest();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.OperationNotPermitted();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex7 = new ttypes.InvalidPartyStatus();
        this.ex7.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex8 = new ttypes.InvalidShopStatus();
        this.ex8.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CapturePayment_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CapturePayment_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  if (this.ex7 !== null && this.ex7 !== undefined) {
    output.writeFieldBegin('ex7', Thrift.Type.STRUCT, 7);
    this.ex7.write(output);
    output.writeFieldEnd();
  }
  if (this.ex8 !== null && this.ex8 !== undefined) {
    output.writeFieldBegin('ex8', Thrift.Type.STRUCT, 8);
    this.ex8.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CreatePaymentAdjustment_args = function(args) {
  this.user = null;
  this.id = null;
  this.payment_id = null;
  this.params = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.payment_id !== undefined && args.payment_id !== null) {
      this.payment_id = args.payment_id;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.InvoicePaymentAdjustmentParams(args.params);
    }
  }
};
Invoicing_CreatePaymentAdjustment_args.prototype = {};
Invoicing_CreatePaymentAdjustment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.payment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.InvoicePaymentAdjustmentParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CreatePaymentAdjustment_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CreatePaymentAdjustment_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payment_id !== null && this.payment_id !== undefined) {
    output.writeFieldBegin('payment_id', Thrift.Type.STRING, 3);
    output.writeString(this.payment_id);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 4);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CreatePaymentAdjustment_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPaymentStatus) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentAdjustmentPending) {
    this.ex5 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.InvoicePaymentAdjustment(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
  }
};
Invoicing_CreatePaymentAdjustment_result.prototype = {};
Invoicing_CreatePaymentAdjustment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.InvoicePaymentAdjustment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvoicePaymentNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidPaymentStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvoicePaymentAdjustmentPending();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CreatePaymentAdjustment_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CreatePaymentAdjustment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_GetPaymentAdjustment_args = function(args) {
  this.user = null;
  this.id = null;
  this.payment_id = null;
  this.adjustment_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.payment_id !== undefined && args.payment_id !== null) {
      this.payment_id = args.payment_id;
    }
    if (args.adjustment_id !== undefined && args.adjustment_id !== null) {
      this.adjustment_id = args.adjustment_id;
    }
  }
};
Invoicing_GetPaymentAdjustment_args.prototype = {};
Invoicing_GetPaymentAdjustment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.payment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.adjustment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_GetPaymentAdjustment_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_GetPaymentAdjustment_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payment_id !== null && this.payment_id !== undefined) {
    output.writeFieldBegin('payment_id', Thrift.Type.STRING, 3);
    output.writeString(this.payment_id);
    output.writeFieldEnd();
  }
  if (this.adjustment_id !== null && this.adjustment_id !== undefined) {
    output.writeFieldBegin('adjustment_id', Thrift.Type.STRING, 4);
    output.writeString(this.adjustment_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_GetPaymentAdjustment_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentAdjustmentNotFound) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.InvoicePaymentAdjustment(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
Invoicing_GetPaymentAdjustment_result.prototype = {};
Invoicing_GetPaymentAdjustment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.InvoicePaymentAdjustment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvoicePaymentNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvoicePaymentAdjustmentNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_GetPaymentAdjustment_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_GetPaymentAdjustment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CapturePaymentAdjustment_args = function(args) {
  this.user = null;
  this.id = null;
  this.payment_id = null;
  this.adjustment_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.payment_id !== undefined && args.payment_id !== null) {
      this.payment_id = args.payment_id;
    }
    if (args.adjustment_id !== undefined && args.adjustment_id !== null) {
      this.adjustment_id = args.adjustment_id;
    }
  }
};
Invoicing_CapturePaymentAdjustment_args.prototype = {};
Invoicing_CapturePaymentAdjustment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.payment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.adjustment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CapturePaymentAdjustment_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CapturePaymentAdjustment_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payment_id !== null && this.payment_id !== undefined) {
    output.writeFieldBegin('payment_id', Thrift.Type.STRING, 3);
    output.writeString(this.payment_id);
    output.writeFieldEnd();
  }
  if (this.adjustment_id !== null && this.adjustment_id !== undefined) {
    output.writeFieldBegin('adjustment_id', Thrift.Type.STRING, 4);
    output.writeString(this.adjustment_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CapturePaymentAdjustment_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentAdjustmentNotFound) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPaymentAdjustmentStatus) {
    this.ex5 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
  }
};
Invoicing_CapturePaymentAdjustment_result.prototype = {};
Invoicing_CapturePaymentAdjustment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvoicePaymentNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvoicePaymentAdjustmentNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidPaymentAdjustmentStatus();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CapturePaymentAdjustment_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CapturePaymentAdjustment_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CancelPaymentAdjustment_args = function(args) {
  this.user = null;
  this.id = null;
  this.payment_id = null;
  this.adjustment_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.payment_id !== undefined && args.payment_id !== null) {
      this.payment_id = args.payment_id;
    }
    if (args.adjustment_id !== undefined && args.adjustment_id !== null) {
      this.adjustment_id = args.adjustment_id;
    }
  }
};
Invoicing_CancelPaymentAdjustment_args.prototype = {};
Invoicing_CancelPaymentAdjustment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.payment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.adjustment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CancelPaymentAdjustment_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CancelPaymentAdjustment_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payment_id !== null && this.payment_id !== undefined) {
    output.writeFieldBegin('payment_id', Thrift.Type.STRING, 3);
    output.writeString(this.payment_id);
    output.writeFieldEnd();
  }
  if (this.adjustment_id !== null && this.adjustment_id !== undefined) {
    output.writeFieldBegin('adjustment_id', Thrift.Type.STRING, 4);
    output.writeString(this.adjustment_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_CancelPaymentAdjustment_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentAdjustmentNotFound) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPaymentAdjustmentStatus) {
    this.ex5 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
  }
};
Invoicing_CancelPaymentAdjustment_result.prototype = {};
Invoicing_CancelPaymentAdjustment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvoicePaymentNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvoicePaymentAdjustmentNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidPaymentAdjustmentStatus();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_CancelPaymentAdjustment_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_CancelPaymentAdjustment_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_RefundPayment_args = function(args) {
  this.user = null;
  this.id = null;
  this.payment_id = null;
  this.params = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.payment_id !== undefined && args.payment_id !== null) {
      this.payment_id = args.payment_id;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.InvoicePaymentRefundParams(args.params);
    }
  }
};
Invoicing_RefundPayment_args.prototype = {};
Invoicing_RefundPayment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.payment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.InvoicePaymentRefundParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_RefundPayment_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_RefundPayment_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payment_id !== null && this.payment_id !== undefined) {
    output.writeFieldBegin('payment_id', Thrift.Type.STRING, 3);
    output.writeString(this.payment_id);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 4);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_RefundPayment_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex6 = null;
  this.ex7 = null;
  this.ex8 = null;
  this.ex9 = null;
  this.ex10 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPaymentStatus) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.OperationNotPermitted) {
    this.ex6 = args;
    return;
  }
  if (args instanceof ttypes.InsufficientAccountBalance) {
    this.ex7 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex8 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentAmountExceeded) {
    this.ex9 = args;
    return;
  }
  if (args instanceof ttypes.InconsistentRefundCurrency) {
    this.ex10 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.InvoicePaymentRefund(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
    if (args.ex7 !== undefined && args.ex7 !== null) {
      this.ex7 = args.ex7;
    }
    if (args.ex8 !== undefined && args.ex8 !== null) {
      this.ex8 = args.ex8;
    }
    if (args.ex9 !== undefined && args.ex9 !== null) {
      this.ex9 = args.ex9;
    }
    if (args.ex10 !== undefined && args.ex10 !== null) {
      this.ex10 = args.ex10;
    }
  }
};
Invoicing_RefundPayment_result.prototype = {};
Invoicing_RefundPayment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.InvoicePaymentRefund();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvoicePaymentNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidPaymentStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.OperationNotPermitted();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex7 = new ttypes.InsufficientAccountBalance();
        this.ex7.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex8 = new base_ttypes.InvalidRequest();
        this.ex8.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex9 = new ttypes.InvoicePaymentAmountExceeded();
        this.ex9.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex10 = new ttypes.InconsistentRefundCurrency();
        this.ex10.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_RefundPayment_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_RefundPayment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  if (this.ex7 !== null && this.ex7 !== undefined) {
    output.writeFieldBegin('ex7', Thrift.Type.STRUCT, 7);
    this.ex7.write(output);
    output.writeFieldEnd();
  }
  if (this.ex8 !== null && this.ex8 !== undefined) {
    output.writeFieldBegin('ex8', Thrift.Type.STRUCT, 8);
    this.ex8.write(output);
    output.writeFieldEnd();
  }
  if (this.ex9 !== null && this.ex9 !== undefined) {
    output.writeFieldBegin('ex9', Thrift.Type.STRUCT, 9);
    this.ex9.write(output);
    output.writeFieldEnd();
  }
  if (this.ex10 !== null && this.ex10 !== undefined) {
    output.writeFieldBegin('ex10', Thrift.Type.STRUCT, 10);
    this.ex10.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_GetPaymentRefund_args = function(args) {
  this.user = null;
  this.id = null;
  this.payment_id = null;
  this.refund_id = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.payment_id !== undefined && args.payment_id !== null) {
      this.payment_id = args.payment_id;
    }
    if (args.refund_id !== undefined && args.refund_id !== null) {
      this.refund_id = args.refund_id;
    }
  }
};
Invoicing_GetPaymentRefund_args.prototype = {};
Invoicing_GetPaymentRefund_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.payment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.refund_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_GetPaymentRefund_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_GetPaymentRefund_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payment_id !== null && this.payment_id !== undefined) {
    output.writeFieldBegin('payment_id', Thrift.Type.STRING, 3);
    output.writeString(this.payment_id);
    output.writeFieldEnd();
  }
  if (this.refund_id !== null && this.refund_id !== undefined) {
    output.writeFieldBegin('refund_id', Thrift.Type.STRING, 4);
    output.writeString(this.refund_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_GetPaymentRefund_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentNotFound) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentRefundNotFound) {
    this.ex4 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new domain_ttypes.InvoicePaymentRefund(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
  }
};
Invoicing_GetPaymentRefund_result.prototype = {};
Invoicing_GetPaymentRefund_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new domain_ttypes.InvoicePaymentRefund();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvoicePaymentNotFound();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvoicePaymentRefundNotFound();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_GetPaymentRefund_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_GetPaymentRefund_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_Fulfill_args = function(args) {
  this.user = null;
  this.id = null;
  this.reason = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
Invoicing_Fulfill_args.prototype = {};
Invoicing_Fulfill_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_Fulfill_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_Fulfill_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_Fulfill_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInvoiceStatus) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidContractStatus) {
    this.ex6 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
  }
};
Invoicing_Fulfill_result.prototype = {};
Invoicing_Fulfill_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidInvoiceStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvalidPartyStatus();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidShopStatus();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.InvalidContractStatus();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_Fulfill_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_Fulfill_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_Rescind_args = function(args) {
  this.user = null;
  this.id = null;
  this.reason = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
Invoicing_Rescind_args.prototype = {};
Invoicing_Rescind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_Rescind_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_Rescind_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_Rescind_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  this.ex4 = null;
  this.ex5 = null;
  this.ex6 = null;
  this.ex7 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof ttypes.InvalidInvoiceStatus) {
    this.ex3 = args;
    return;
  }
  if (args instanceof ttypes.InvoicePaymentPending) {
    this.ex4 = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.ex5 = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.ex6 = args;
    return;
  }
  if (args instanceof ttypes.InvalidContractStatus) {
    this.ex7 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
    if (args.ex4 !== undefined && args.ex4 !== null) {
      this.ex4 = args.ex4;
    }
    if (args.ex5 !== undefined && args.ex5 !== null) {
      this.ex5 = args.ex5;
    }
    if (args.ex6 !== undefined && args.ex6 !== null) {
      this.ex6 = args.ex6;
    }
    if (args.ex7 !== undefined && args.ex7 !== null) {
      this.ex7 = args.ex7;
    }
  }
};
Invoicing_Rescind_result.prototype = {};
Invoicing_Rescind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new ttypes.InvalidInvoiceStatus();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex4 = new ttypes.InvoicePaymentPending();
        this.ex4.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex5 = new ttypes.InvalidPartyStatus();
        this.ex5.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex6 = new ttypes.InvalidShopStatus();
        this.ex6.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex7 = new ttypes.InvalidContractStatus();
        this.ex7.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_Rescind_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_Rescind_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  if (this.ex4 !== null && this.ex4 !== undefined) {
    output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
    this.ex4.write(output);
    output.writeFieldEnd();
  }
  if (this.ex5 !== null && this.ex5 !== undefined) {
    output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
    this.ex5.write(output);
    output.writeFieldEnd();
  }
  if (this.ex6 !== null && this.ex6 !== undefined) {
    output.writeFieldBegin('ex6', Thrift.Type.STRUCT, 6);
    this.ex6.write(output);
    output.writeFieldEnd();
  }
  if (this.ex7 !== null && this.ex7 !== undefined) {
    output.writeFieldBegin('ex7', Thrift.Type.STRUCT, 7);
    this.ex7.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_Repair_args = function(args) {
  this.user = null;
  this.id = null;
  this.changes = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.changes !== undefined && args.changes !== null) {
      this.changes = Thrift.copyList(args.changes, [ttypes.InvoiceChange]);
    }
  }
};
Invoicing_Repair_args.prototype = {};
Invoicing_Repair_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.changes = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.InvoiceChange();
          elem126.read(input);
          this.changes.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_Repair_args.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_Repair_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.changes !== null && this.changes !== undefined) {
    output.writeFieldBegin('changes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.changes.length);
    for (var iter127 in this.changes)
    {
      if (this.changes.hasOwnProperty(iter127))
      {
        iter127 = this.changes[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoicing_Repair_result = function(args) {
  this.ex1 = null;
  this.ex2 = null;
  this.ex3 = null;
  if (args instanceof ttypes.InvalidUser) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.InvoiceNotFound) {
    this.ex2 = args;
    return;
  }
  if (args instanceof base_ttypes.InvalidRequest) {
    this.ex3 = args;
    return;
  }
  if (args) {
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined && args.ex2 !== null) {
      this.ex2 = args.ex2;
    }
    if (args.ex3 !== undefined && args.ex3 !== null) {
      this.ex3 = args.ex3;
    }
  }
};
Invoicing_Repair_result.prototype = {};
Invoicing_Repair_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidUser();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.InvoiceNotFound();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex3 = new base_ttypes.InvalidRequest();
        this.ex3.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoicing_Repair_result.prototype.write = function(output) {
  output.writeStructBegin('Invoicing_Repair_result');
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  if (this.ex3 !== null && this.ex3 !== undefined) {
    output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
    this.ex3.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicingClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
InvoicingClient.prototype = {};
InvoicingClient.prototype.seqid = function() { return this._seqid; }
InvoicingClient.prototype.new_seqid = function() { return this._seqid += 1; }
InvoicingClient.prototype.Create = function(user, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Create(user, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Create(user, params);
  }
};

InvoicingClient.prototype.send_Create = function(user, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Create', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_Create_args();
  args.user = user;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_Create = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_Create_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  if (null !== result.ex7) {
    return callback(result.ex7);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Create failed: unknown result');
};
InvoicingClient.prototype.CreateWithTemplate = function(user, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateWithTemplate(user, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateWithTemplate(user, params);
  }
};

InvoicingClient.prototype.send_CreateWithTemplate = function(user, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CreateWithTemplate', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_CreateWithTemplate_args();
  args.user = user;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_CreateWithTemplate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_CreateWithTemplate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  if (null !== result.ex7) {
    return callback(result.ex7);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateWithTemplate failed: unknown result');
};
InvoicingClient.prototype.Get = function(user, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Get(user, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Get(user, id);
  }
};

InvoicingClient.prototype.send_Get = function(user, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Get', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_Get_args();
  args.user = user;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_Get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_Get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Get failed: unknown result');
};
InvoicingClient.prototype.GetEvents = function(user, id, range, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEvents(user, id, range);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEvents(user, id, range);
  }
};

InvoicingClient.prototype.send_GetEvents = function(user, id, range) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEvents', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_GetEvents_args();
  args.user = user;
  args.id = id;
  args.range = range;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_GetEvents = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_GetEvents_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEvents failed: unknown result');
};
InvoicingClient.prototype.ComputeTerms = function(user, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ComputeTerms(user, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ComputeTerms(user, id);
  }
};

InvoicingClient.prototype.send_ComputeTerms = function(user, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ComputeTerms', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_ComputeTerms_args();
  args.user = user;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_ComputeTerms = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_ComputeTerms_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ComputeTerms failed: unknown result');
};
InvoicingClient.prototype.StartPayment = function(user, id, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_StartPayment(user, id, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_StartPayment(user, id, params);
  }
};

InvoicingClient.prototype.send_StartPayment = function(user, id, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('StartPayment', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_StartPayment_args();
  args.user = user;
  args.id = id;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_StartPayment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_StartPayment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  if (null !== result.ex7) {
    return callback(result.ex7);
  }
  if (null !== result.ex8) {
    return callback(result.ex8);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('StartPayment failed: unknown result');
};
InvoicingClient.prototype.GetPayment = function(user, id, payment_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetPayment(user, id, payment_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetPayment(user, id, payment_id);
  }
};

InvoicingClient.prototype.send_GetPayment = function(user, id, payment_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetPayment', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_GetPayment_args();
  args.user = user;
  args.id = id;
  args.payment_id = payment_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_GetPayment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_GetPayment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetPayment failed: unknown result');
};
InvoicingClient.prototype.CancelPayment = function(user, id, payment_id, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CancelPayment(user, id, payment_id, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CancelPayment(user, id, payment_id, reason);
  }
};

InvoicingClient.prototype.send_CancelPayment = function(user, id, payment_id, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CancelPayment', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_CancelPayment_args();
  args.user = user;
  args.id = id;
  args.payment_id = payment_id;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_CancelPayment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_CancelPayment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  if (null !== result.ex7) {
    return callback(result.ex7);
  }
  if (null !== result.ex8) {
    return callback(result.ex8);
  }
  callback(null)
};
InvoicingClient.prototype.CapturePayment = function(user, id, payment_id, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CapturePayment(user, id, payment_id, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CapturePayment(user, id, payment_id, reason);
  }
};

InvoicingClient.prototype.send_CapturePayment = function(user, id, payment_id, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CapturePayment', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_CapturePayment_args();
  args.user = user;
  args.id = id;
  args.payment_id = payment_id;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_CapturePayment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_CapturePayment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  if (null !== result.ex7) {
    return callback(result.ex7);
  }
  if (null !== result.ex8) {
    return callback(result.ex8);
  }
  callback(null)
};
InvoicingClient.prototype.CreatePaymentAdjustment = function(user, id, payment_id, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreatePaymentAdjustment(user, id, payment_id, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreatePaymentAdjustment(user, id, payment_id, params);
  }
};

InvoicingClient.prototype.send_CreatePaymentAdjustment = function(user, id, payment_id, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CreatePaymentAdjustment', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_CreatePaymentAdjustment_args();
  args.user = user;
  args.id = id;
  args.payment_id = payment_id;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_CreatePaymentAdjustment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_CreatePaymentAdjustment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreatePaymentAdjustment failed: unknown result');
};
InvoicingClient.prototype.GetPaymentAdjustment = function(user, id, payment_id, adjustment_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetPaymentAdjustment(user, id, payment_id, adjustment_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetPaymentAdjustment(user, id, payment_id, adjustment_id);
  }
};

InvoicingClient.prototype.send_GetPaymentAdjustment = function(user, id, payment_id, adjustment_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetPaymentAdjustment', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_GetPaymentAdjustment_args();
  args.user = user;
  args.id = id;
  args.payment_id = payment_id;
  args.adjustment_id = adjustment_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_GetPaymentAdjustment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_GetPaymentAdjustment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetPaymentAdjustment failed: unknown result');
};
InvoicingClient.prototype.CapturePaymentAdjustment = function(user, id, payment_id, adjustment_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CapturePaymentAdjustment(user, id, payment_id, adjustment_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CapturePaymentAdjustment(user, id, payment_id, adjustment_id);
  }
};

InvoicingClient.prototype.send_CapturePaymentAdjustment = function(user, id, payment_id, adjustment_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CapturePaymentAdjustment', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_CapturePaymentAdjustment_args();
  args.user = user;
  args.id = id;
  args.payment_id = payment_id;
  args.adjustment_id = adjustment_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_CapturePaymentAdjustment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_CapturePaymentAdjustment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  callback(null)
};
InvoicingClient.prototype.CancelPaymentAdjustment = function(user, id, payment_id, adjustment_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CancelPaymentAdjustment(user, id, payment_id, adjustment_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CancelPaymentAdjustment(user, id, payment_id, adjustment_id);
  }
};

InvoicingClient.prototype.send_CancelPaymentAdjustment = function(user, id, payment_id, adjustment_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CancelPaymentAdjustment', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_CancelPaymentAdjustment_args();
  args.user = user;
  args.id = id;
  args.payment_id = payment_id;
  args.adjustment_id = adjustment_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_CancelPaymentAdjustment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_CancelPaymentAdjustment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  callback(null)
};
InvoicingClient.prototype.RefundPayment = function(user, id, payment_id, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RefundPayment(user, id, payment_id, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RefundPayment(user, id, payment_id, params);
  }
};

InvoicingClient.prototype.send_RefundPayment = function(user, id, payment_id, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RefundPayment', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_RefundPayment_args();
  args.user = user;
  args.id = id;
  args.payment_id = payment_id;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_RefundPayment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_RefundPayment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  if (null !== result.ex7) {
    return callback(result.ex7);
  }
  if (null !== result.ex8) {
    return callback(result.ex8);
  }
  if (null !== result.ex9) {
    return callback(result.ex9);
  }
  if (null !== result.ex10) {
    return callback(result.ex10);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('RefundPayment failed: unknown result');
};
InvoicingClient.prototype.GetPaymentRefund = function(user, id, payment_id, refund_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetPaymentRefund(user, id, payment_id, refund_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetPaymentRefund(user, id, payment_id, refund_id);
  }
};

InvoicingClient.prototype.send_GetPaymentRefund = function(user, id, payment_id, refund_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetPaymentRefund', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_GetPaymentRefund_args();
  args.user = user;
  args.id = id;
  args.payment_id = payment_id;
  args.refund_id = refund_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_GetPaymentRefund = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_GetPaymentRefund_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetPaymentRefund failed: unknown result');
};
InvoicingClient.prototype.Fulfill = function(user, id, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Fulfill(user, id, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Fulfill(user, id, reason);
  }
};

InvoicingClient.prototype.send_Fulfill = function(user, id, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Fulfill', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_Fulfill_args();
  args.user = user;
  args.id = id;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_Fulfill = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_Fulfill_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  callback(null)
};
InvoicingClient.prototype.Rescind = function(user, id, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Rescind(user, id, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Rescind(user, id, reason);
  }
};

InvoicingClient.prototype.send_Rescind = function(user, id, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Rescind', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_Rescind_args();
  args.user = user;
  args.id = id;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_Rescind = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_Rescind_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  if (null !== result.ex4) {
    return callback(result.ex4);
  }
  if (null !== result.ex5) {
    return callback(result.ex5);
  }
  if (null !== result.ex6) {
    return callback(result.ex6);
  }
  if (null !== result.ex7) {
    return callback(result.ex7);
  }
  callback(null)
};
InvoicingClient.prototype.Repair = function(user, id, changes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Repair(user, id, changes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Repair(user, id, changes);
  }
};

InvoicingClient.prototype.send_Repair = function(user, id, changes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Repair', Thrift.MessageType.CALL, this.seqid());
  var args = new Invoicing_Repair_args();
  args.user = user;
  args.id = id;
  args.changes = changes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

InvoicingClient.prototype.recv_Repair = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Invoicing_Repair_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.ex3) {
    return callback(result.ex3);
  }
  callback(null)
};
var InvoicingProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
InvoicingProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

InvoicingProcessor.prototype.process_Create = function(seqid, input, output) {
  var args = new Invoicing_Create_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Create.length === 2) {
    Q.fcall(this._handler.Create, args.user, args.params)
      .then(function(result) {
        var result = new Invoicing_Create_result({success: result});
        output.writeMessageBegin("Create", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus) {
          var result = new Invoicing_Create_result(err);
          output.writeMessageBegin("Create", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Create", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Create(args.user, args.params, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.PartyNotFound || err instanceof ttypes.ShopNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus) {
        var result = new Invoicing_Create_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Create", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Create", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_CreateWithTemplate = function(seqid, input, output) {
  var args = new Invoicing_CreateWithTemplate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateWithTemplate.length === 2) {
    Q.fcall(this._handler.CreateWithTemplate, args.user, args.params)
      .then(function(result) {
        var result = new Invoicing_CreateWithTemplate_result({success: result});
        output.writeMessageBegin("CreateWithTemplate", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus || err instanceof ttypes.InvoiceTemplateNotFound || err instanceof ttypes.InvoiceTemplateRemoved) {
          var result = new Invoicing_CreateWithTemplate_result(err);
          output.writeMessageBegin("CreateWithTemplate", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CreateWithTemplate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CreateWithTemplate(args.user, args.params, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus || err instanceof ttypes.InvoiceTemplateNotFound || err instanceof ttypes.InvoiceTemplateRemoved) {
        var result = new Invoicing_CreateWithTemplate_result((err != null ? err : {success: result}));
        output.writeMessageBegin("CreateWithTemplate", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateWithTemplate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_Get = function(seqid, input, output) {
  var args = new Invoicing_Get_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Get.length === 2) {
    Q.fcall(this._handler.Get, args.user, args.id)
      .then(function(result) {
        var result = new Invoicing_Get_result({success: result});
        output.writeMessageBegin("Get", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound) {
          var result = new Invoicing_Get_result(err);
          output.writeMessageBegin("Get", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Get", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Get(args.user, args.id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound) {
        var result = new Invoicing_Get_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Get", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_GetEvents = function(seqid, input, output) {
  var args = new Invoicing_GetEvents_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEvents.length === 3) {
    Q.fcall(this._handler.GetEvents, args.user, args.id, args.range)
      .then(function(result) {
        var result = new Invoicing_GetEvents_result({success: result});
        output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.EventNotFound || err instanceof base_ttypes.InvalidRequest) {
          var result = new Invoicing_GetEvents_result(err);
          output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetEvents", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEvents(args.user, args.id, args.range, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.EventNotFound || err instanceof base_ttypes.InvalidRequest) {
        var result = new Invoicing_GetEvents_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEvents", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_ComputeTerms = function(seqid, input, output) {
  var args = new Invoicing_ComputeTerms_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ComputeTerms.length === 2) {
    Q.fcall(this._handler.ComputeTerms, args.user, args.id)
      .then(function(result) {
        var result = new Invoicing_ComputeTerms_result({success: result});
        output.writeMessageBegin("ComputeTerms", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound) {
          var result = new Invoicing_ComputeTerms_result(err);
          output.writeMessageBegin("ComputeTerms", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ComputeTerms", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ComputeTerms(args.user, args.id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound) {
        var result = new Invoicing_ComputeTerms_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ComputeTerms", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ComputeTerms", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_StartPayment = function(seqid, input, output) {
  var args = new Invoicing_StartPayment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.StartPayment.length === 3) {
    Q.fcall(this._handler.StartPayment, args.user, args.id, args.params)
      .then(function(result) {
        var result = new Invoicing_StartPayment_result({success: result});
        output.writeMessageBegin("StartPayment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvalidInvoiceStatus || err instanceof ttypes.InvoicePaymentPending || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus) {
          var result = new Invoicing_StartPayment_result(err);
          output.writeMessageBegin("StartPayment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("StartPayment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.StartPayment(args.user, args.id, args.params, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvalidInvoiceStatus || err instanceof ttypes.InvoicePaymentPending || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus) {
        var result = new Invoicing_StartPayment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("StartPayment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("StartPayment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_GetPayment = function(seqid, input, output) {
  var args = new Invoicing_GetPayment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetPayment.length === 3) {
    Q.fcall(this._handler.GetPayment, args.user, args.id, args.payment_id)
      .then(function(result) {
        var result = new Invoicing_GetPayment_result({success: result});
        output.writeMessageBegin("GetPayment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound) {
          var result = new Invoicing_GetPayment_result(err);
          output.writeMessageBegin("GetPayment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetPayment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetPayment(args.user, args.id, args.payment_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound) {
        var result = new Invoicing_GetPayment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetPayment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetPayment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_CancelPayment = function(seqid, input, output) {
  var args = new Invoicing_CancelPayment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CancelPayment.length === 4) {
    Q.fcall(this._handler.CancelPayment, args.user, args.id, args.payment_id, args.reason)
      .then(function(result) {
        var result = new Invoicing_CancelPayment_result({success: result});
        output.writeMessageBegin("CancelPayment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvalidPaymentStatus || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.OperationNotPermitted || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus) {
          var result = new Invoicing_CancelPayment_result(err);
          output.writeMessageBegin("CancelPayment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CancelPayment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CancelPayment(args.user, args.id, args.payment_id, args.reason, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvalidPaymentStatus || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.OperationNotPermitted || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus) {
        var result = new Invoicing_CancelPayment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("CancelPayment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CancelPayment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_CapturePayment = function(seqid, input, output) {
  var args = new Invoicing_CapturePayment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CapturePayment.length === 4) {
    Q.fcall(this._handler.CapturePayment, args.user, args.id, args.payment_id, args.reason)
      .then(function(result) {
        var result = new Invoicing_CapturePayment_result({success: result});
        output.writeMessageBegin("CapturePayment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvalidPaymentStatus || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.OperationNotPermitted || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus) {
          var result = new Invoicing_CapturePayment_result(err);
          output.writeMessageBegin("CapturePayment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CapturePayment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CapturePayment(args.user, args.id, args.payment_id, args.reason, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvalidPaymentStatus || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.OperationNotPermitted || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus) {
        var result = new Invoicing_CapturePayment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("CapturePayment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CapturePayment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_CreatePaymentAdjustment = function(seqid, input, output) {
  var args = new Invoicing_CreatePaymentAdjustment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreatePaymentAdjustment.length === 4) {
    Q.fcall(this._handler.CreatePaymentAdjustment, args.user, args.id, args.payment_id, args.params)
      .then(function(result) {
        var result = new Invoicing_CreatePaymentAdjustment_result({success: result});
        output.writeMessageBegin("CreatePaymentAdjustment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvalidPaymentStatus || err instanceof ttypes.InvoicePaymentAdjustmentPending) {
          var result = new Invoicing_CreatePaymentAdjustment_result(err);
          output.writeMessageBegin("CreatePaymentAdjustment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CreatePaymentAdjustment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CreatePaymentAdjustment(args.user, args.id, args.payment_id, args.params, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvalidPaymentStatus || err instanceof ttypes.InvoicePaymentAdjustmentPending) {
        var result = new Invoicing_CreatePaymentAdjustment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("CreatePaymentAdjustment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreatePaymentAdjustment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_GetPaymentAdjustment = function(seqid, input, output) {
  var args = new Invoicing_GetPaymentAdjustment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetPaymentAdjustment.length === 4) {
    Q.fcall(this._handler.GetPaymentAdjustment, args.user, args.id, args.payment_id, args.adjustment_id)
      .then(function(result) {
        var result = new Invoicing_GetPaymentAdjustment_result({success: result});
        output.writeMessageBegin("GetPaymentAdjustment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvoicePaymentAdjustmentNotFound) {
          var result = new Invoicing_GetPaymentAdjustment_result(err);
          output.writeMessageBegin("GetPaymentAdjustment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetPaymentAdjustment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetPaymentAdjustment(args.user, args.id, args.payment_id, args.adjustment_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvoicePaymentAdjustmentNotFound) {
        var result = new Invoicing_GetPaymentAdjustment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetPaymentAdjustment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetPaymentAdjustment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_CapturePaymentAdjustment = function(seqid, input, output) {
  var args = new Invoicing_CapturePaymentAdjustment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CapturePaymentAdjustment.length === 4) {
    Q.fcall(this._handler.CapturePaymentAdjustment, args.user, args.id, args.payment_id, args.adjustment_id)
      .then(function(result) {
        var result = new Invoicing_CapturePaymentAdjustment_result({success: result});
        output.writeMessageBegin("CapturePaymentAdjustment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvoicePaymentAdjustmentNotFound || err instanceof ttypes.InvalidPaymentAdjustmentStatus) {
          var result = new Invoicing_CapturePaymentAdjustment_result(err);
          output.writeMessageBegin("CapturePaymentAdjustment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CapturePaymentAdjustment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CapturePaymentAdjustment(args.user, args.id, args.payment_id, args.adjustment_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvoicePaymentAdjustmentNotFound || err instanceof ttypes.InvalidPaymentAdjustmentStatus) {
        var result = new Invoicing_CapturePaymentAdjustment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("CapturePaymentAdjustment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CapturePaymentAdjustment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_CancelPaymentAdjustment = function(seqid, input, output) {
  var args = new Invoicing_CancelPaymentAdjustment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CancelPaymentAdjustment.length === 4) {
    Q.fcall(this._handler.CancelPaymentAdjustment, args.user, args.id, args.payment_id, args.adjustment_id)
      .then(function(result) {
        var result = new Invoicing_CancelPaymentAdjustment_result({success: result});
        output.writeMessageBegin("CancelPaymentAdjustment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvoicePaymentAdjustmentNotFound || err instanceof ttypes.InvalidPaymentAdjustmentStatus) {
          var result = new Invoicing_CancelPaymentAdjustment_result(err);
          output.writeMessageBegin("CancelPaymentAdjustment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CancelPaymentAdjustment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CancelPaymentAdjustment(args.user, args.id, args.payment_id, args.adjustment_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvoicePaymentAdjustmentNotFound || err instanceof ttypes.InvalidPaymentAdjustmentStatus) {
        var result = new Invoicing_CancelPaymentAdjustment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("CancelPaymentAdjustment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CancelPaymentAdjustment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_RefundPayment = function(seqid, input, output) {
  var args = new Invoicing_RefundPayment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RefundPayment.length === 4) {
    Q.fcall(this._handler.RefundPayment, args.user, args.id, args.payment_id, args.params)
      .then(function(result) {
        var result = new Invoicing_RefundPayment_result({success: result});
        output.writeMessageBegin("RefundPayment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvalidPaymentStatus || err instanceof ttypes.OperationNotPermitted || err instanceof ttypes.InsufficientAccountBalance || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.InvoicePaymentAmountExceeded || err instanceof ttypes.InconsistentRefundCurrency) {
          var result = new Invoicing_RefundPayment_result(err);
          output.writeMessageBegin("RefundPayment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("RefundPayment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.RefundPayment(args.user, args.id, args.payment_id, args.params, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvalidPaymentStatus || err instanceof ttypes.OperationNotPermitted || err instanceof ttypes.InsufficientAccountBalance || err instanceof base_ttypes.InvalidRequest || err instanceof ttypes.InvoicePaymentAmountExceeded || err instanceof ttypes.InconsistentRefundCurrency) {
        var result = new Invoicing_RefundPayment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("RefundPayment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RefundPayment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_GetPaymentRefund = function(seqid, input, output) {
  var args = new Invoicing_GetPaymentRefund_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetPaymentRefund.length === 4) {
    Q.fcall(this._handler.GetPaymentRefund, args.user, args.id, args.payment_id, args.refund_id)
      .then(function(result) {
        var result = new Invoicing_GetPaymentRefund_result({success: result});
        output.writeMessageBegin("GetPaymentRefund", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvoicePaymentRefundNotFound) {
          var result = new Invoicing_GetPaymentRefund_result(err);
          output.writeMessageBegin("GetPaymentRefund", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetPaymentRefund", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetPaymentRefund(args.user, args.id, args.payment_id, args.refund_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvoicePaymentNotFound || err instanceof ttypes.InvoicePaymentRefundNotFound) {
        var result = new Invoicing_GetPaymentRefund_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetPaymentRefund", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetPaymentRefund", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_Fulfill = function(seqid, input, output) {
  var args = new Invoicing_Fulfill_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Fulfill.length === 3) {
    Q.fcall(this._handler.Fulfill, args.user, args.id, args.reason)
      .then(function(result) {
        var result = new Invoicing_Fulfill_result({success: result});
        output.writeMessageBegin("Fulfill", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvalidInvoiceStatus || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus) {
          var result = new Invoicing_Fulfill_result(err);
          output.writeMessageBegin("Fulfill", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Fulfill", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Fulfill(args.user, args.id, args.reason, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvalidInvoiceStatus || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus) {
        var result = new Invoicing_Fulfill_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Fulfill", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Fulfill", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_Rescind = function(seqid, input, output) {
  var args = new Invoicing_Rescind_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Rescind.length === 3) {
    Q.fcall(this._handler.Rescind, args.user, args.id, args.reason)
      .then(function(result) {
        var result = new Invoicing_Rescind_result({success: result});
        output.writeMessageBegin("Rescind", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvalidInvoiceStatus || err instanceof ttypes.InvoicePaymentPending || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus) {
          var result = new Invoicing_Rescind_result(err);
          output.writeMessageBegin("Rescind", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Rescind", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Rescind(args.user, args.id, args.reason, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof ttypes.InvalidInvoiceStatus || err instanceof ttypes.InvoicePaymentPending || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus) {
        var result = new Invoicing_Rescind_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Rescind", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Rescind", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

InvoicingProcessor.prototype.process_Repair = function(seqid, input, output) {
  var args = new Invoicing_Repair_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Repair.length === 3) {
    Q.fcall(this._handler.Repair, args.user, args.id, args.changes)
      .then(function(result) {
        var result = new Invoicing_Repair_result({success: result});
        output.writeMessageBegin("Repair", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof base_ttypes.InvalidRequest) {
          var result = new Invoicing_Repair_result(err);
          output.writeMessageBegin("Repair", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Repair", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Repair(args.user, args.id, args.changes, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvoiceNotFound || err instanceof base_ttypes.InvalidRequest) {
        var result = new Invoicing_Repair_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Repair", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Repair", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

