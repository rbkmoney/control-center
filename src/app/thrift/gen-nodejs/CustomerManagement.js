//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('woody_js/dist/thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');
var domain_ttypes = require('./domain_types');
var user_interaction_ttypes = require('./user_interaction_types');


var ttypes = require('./payment_processing_types');
//HELPER FUNCTIONS AND STRUCTURES

var CustomerManagement_Create_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.CustomerParams(args.params);
    }
  }
};
CustomerManagement_Create_args.prototype = {};
CustomerManagement_Create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.CustomerParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_Create_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_Create_args');
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 1);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_Create_result = function(args) {
  this.success = null;
  this.invalid_user = null;
  this.invalid_party_status = null;
  this.invalid_shop_status = null;
  this.shop_not_found = null;
  this.party_not_found = null;
  this.operation_not_permitted = null;
  if (args instanceof ttypes.InvalidUser) {
    this.invalid_user = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.invalid_party_status = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.invalid_shop_status = args;
    return;
  }
  if (args instanceof ttypes.ShopNotFound) {
    this.shop_not_found = args;
    return;
  }
  if (args instanceof ttypes.PartyNotFound) {
    this.party_not_found = args;
    return;
  }
  if (args instanceof ttypes.OperationNotPermitted) {
    this.operation_not_permitted = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Customer(args.success);
    }
    if (args.invalid_user !== undefined && args.invalid_user !== null) {
      this.invalid_user = args.invalid_user;
    }
    if (args.invalid_party_status !== undefined && args.invalid_party_status !== null) {
      this.invalid_party_status = args.invalid_party_status;
    }
    if (args.invalid_shop_status !== undefined && args.invalid_shop_status !== null) {
      this.invalid_shop_status = args.invalid_shop_status;
    }
    if (args.shop_not_found !== undefined && args.shop_not_found !== null) {
      this.shop_not_found = args.shop_not_found;
    }
    if (args.party_not_found !== undefined && args.party_not_found !== null) {
      this.party_not_found = args.party_not_found;
    }
    if (args.operation_not_permitted !== undefined && args.operation_not_permitted !== null) {
      this.operation_not_permitted = args.operation_not_permitted;
    }
  }
};
CustomerManagement_Create_result.prototype = {};
CustomerManagement_Create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Customer();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_user = new ttypes.InvalidUser();
        this.invalid_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_party_status = new ttypes.InvalidPartyStatus();
        this.invalid_party_status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_shop_status = new ttypes.InvalidShopStatus();
        this.invalid_shop_status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.shop_not_found = new ttypes.ShopNotFound();
        this.shop_not_found.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.party_not_found = new ttypes.PartyNotFound();
        this.party_not_found.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_not_permitted = new ttypes.OperationNotPermitted();
        this.operation_not_permitted.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_Create_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_Create_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_user !== null && this.invalid_user !== undefined) {
    output.writeFieldBegin('invalid_user', Thrift.Type.STRUCT, 1);
    this.invalid_user.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_party_status !== null && this.invalid_party_status !== undefined) {
    output.writeFieldBegin('invalid_party_status', Thrift.Type.STRUCT, 2);
    this.invalid_party_status.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_shop_status !== null && this.invalid_shop_status !== undefined) {
    output.writeFieldBegin('invalid_shop_status', Thrift.Type.STRUCT, 3);
    this.invalid_shop_status.write(output);
    output.writeFieldEnd();
  }
  if (this.shop_not_found !== null && this.shop_not_found !== undefined) {
    output.writeFieldBegin('shop_not_found', Thrift.Type.STRUCT, 4);
    this.shop_not_found.write(output);
    output.writeFieldEnd();
  }
  if (this.party_not_found !== null && this.party_not_found !== undefined) {
    output.writeFieldBegin('party_not_found', Thrift.Type.STRUCT, 5);
    this.party_not_found.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_not_permitted !== null && this.operation_not_permitted !== undefined) {
    output.writeFieldBegin('operation_not_permitted', Thrift.Type.STRUCT, 6);
    this.operation_not_permitted.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_Get_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
CustomerManagement_Get_args.prototype = {};
CustomerManagement_Get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_Get_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_Get_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_Get_result = function(args) {
  this.success = null;
  this.invalid_user = null;
  this.not_found = null;
  if (args instanceof ttypes.InvalidUser) {
    this.invalid_user = args;
    return;
  }
  if (args instanceof ttypes.CustomerNotFound) {
    this.not_found = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Customer(args.success);
    }
    if (args.invalid_user !== undefined && args.invalid_user !== null) {
      this.invalid_user = args.invalid_user;
    }
    if (args.not_found !== undefined && args.not_found !== null) {
      this.not_found = args.not_found;
    }
  }
};
CustomerManagement_Get_result.prototype = {};
CustomerManagement_Get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Customer();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_user = new ttypes.InvalidUser();
        this.invalid_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.not_found = new ttypes.CustomerNotFound();
        this.not_found.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_Get_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_Get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_user !== null && this.invalid_user !== undefined) {
    output.writeFieldBegin('invalid_user', Thrift.Type.STRUCT, 1);
    this.invalid_user.write(output);
    output.writeFieldEnd();
  }
  if (this.not_found !== null && this.not_found !== undefined) {
    output.writeFieldBegin('not_found', Thrift.Type.STRUCT, 2);
    this.not_found.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_Delete_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
CustomerManagement_Delete_args.prototype = {};
CustomerManagement_Delete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_Delete_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_Delete_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_Delete_result = function(args) {
  this.invalid_user = null;
  this.not_found = null;
  this.invalid_party_status = null;
  this.invalid_shop_status = null;
  if (args instanceof ttypes.InvalidUser) {
    this.invalid_user = args;
    return;
  }
  if (args instanceof ttypes.CustomerNotFound) {
    this.not_found = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.invalid_party_status = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.invalid_shop_status = args;
    return;
  }
  if (args) {
    if (args.invalid_user !== undefined && args.invalid_user !== null) {
      this.invalid_user = args.invalid_user;
    }
    if (args.not_found !== undefined && args.not_found !== null) {
      this.not_found = args.not_found;
    }
    if (args.invalid_party_status !== undefined && args.invalid_party_status !== null) {
      this.invalid_party_status = args.invalid_party_status;
    }
    if (args.invalid_shop_status !== undefined && args.invalid_shop_status !== null) {
      this.invalid_shop_status = args.invalid_shop_status;
    }
  }
};
CustomerManagement_Delete_result.prototype = {};
CustomerManagement_Delete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_user = new ttypes.InvalidUser();
        this.invalid_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.not_found = new ttypes.CustomerNotFound();
        this.not_found.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_party_status = new ttypes.InvalidPartyStatus();
        this.invalid_party_status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_shop_status = new ttypes.InvalidShopStatus();
        this.invalid_shop_status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_Delete_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_Delete_result');
  if (this.invalid_user !== null && this.invalid_user !== undefined) {
    output.writeFieldBegin('invalid_user', Thrift.Type.STRUCT, 1);
    this.invalid_user.write(output);
    output.writeFieldEnd();
  }
  if (this.not_found !== null && this.not_found !== undefined) {
    output.writeFieldBegin('not_found', Thrift.Type.STRUCT, 2);
    this.not_found.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_party_status !== null && this.invalid_party_status !== undefined) {
    output.writeFieldBegin('invalid_party_status', Thrift.Type.STRUCT, 3);
    this.invalid_party_status.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_shop_status !== null && this.invalid_shop_status !== undefined) {
    output.writeFieldBegin('invalid_shop_status', Thrift.Type.STRUCT, 4);
    this.invalid_shop_status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_StartBinding_args = function(args) {
  this.customer_id = null;
  this.params = null;
  if (args) {
    if (args.customer_id !== undefined && args.customer_id !== null) {
      this.customer_id = args.customer_id;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = new ttypes.CustomerBindingParams(args.params);
    }
  }
};
CustomerManagement_StartBinding_args.prototype = {};
CustomerManagement_StartBinding_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customer_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.params = new ttypes.CustomerBindingParams();
        this.params.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_StartBinding_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_StartBinding_args');
  if (this.customer_id !== null && this.customer_id !== undefined) {
    output.writeFieldBegin('customer_id', Thrift.Type.STRING, 1);
    output.writeString(this.customer_id);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRUCT, 2);
    this.params.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_StartBinding_result = function(args) {
  this.success = null;
  this.invalid_user = null;
  this.customer_not_found = null;
  this.invalid_party_status = null;
  this.invalid_shop_status = null;
  this.invalid_contract_status = null;
  this.operation_not_permitted = null;
  if (args instanceof ttypes.InvalidUser) {
    this.invalid_user = args;
    return;
  }
  if (args instanceof ttypes.CustomerNotFound) {
    this.customer_not_found = args;
    return;
  }
  if (args instanceof ttypes.InvalidPartyStatus) {
    this.invalid_party_status = args;
    return;
  }
  if (args instanceof ttypes.InvalidShopStatus) {
    this.invalid_shop_status = args;
    return;
  }
  if (args instanceof ttypes.InvalidContractStatus) {
    this.invalid_contract_status = args;
    return;
  }
  if (args instanceof ttypes.OperationNotPermitted) {
    this.operation_not_permitted = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CustomerBinding(args.success);
    }
    if (args.invalid_user !== undefined && args.invalid_user !== null) {
      this.invalid_user = args.invalid_user;
    }
    if (args.customer_not_found !== undefined && args.customer_not_found !== null) {
      this.customer_not_found = args.customer_not_found;
    }
    if (args.invalid_party_status !== undefined && args.invalid_party_status !== null) {
      this.invalid_party_status = args.invalid_party_status;
    }
    if (args.invalid_shop_status !== undefined && args.invalid_shop_status !== null) {
      this.invalid_shop_status = args.invalid_shop_status;
    }
    if (args.invalid_contract_status !== undefined && args.invalid_contract_status !== null) {
      this.invalid_contract_status = args.invalid_contract_status;
    }
    if (args.operation_not_permitted !== undefined && args.operation_not_permitted !== null) {
      this.operation_not_permitted = args.operation_not_permitted;
    }
  }
};
CustomerManagement_StartBinding_result.prototype = {};
CustomerManagement_StartBinding_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CustomerBinding();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_user = new ttypes.InvalidUser();
        this.invalid_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer_not_found = new ttypes.CustomerNotFound();
        this.customer_not_found.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_party_status = new ttypes.InvalidPartyStatus();
        this.invalid_party_status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_shop_status = new ttypes.InvalidShopStatus();
        this.invalid_shop_status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_contract_status = new ttypes.InvalidContractStatus();
        this.invalid_contract_status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.operation_not_permitted = new ttypes.OperationNotPermitted();
        this.operation_not_permitted.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_StartBinding_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_StartBinding_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_user !== null && this.invalid_user !== undefined) {
    output.writeFieldBegin('invalid_user', Thrift.Type.STRUCT, 1);
    this.invalid_user.write(output);
    output.writeFieldEnd();
  }
  if (this.customer_not_found !== null && this.customer_not_found !== undefined) {
    output.writeFieldBegin('customer_not_found', Thrift.Type.STRUCT, 2);
    this.customer_not_found.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_party_status !== null && this.invalid_party_status !== undefined) {
    output.writeFieldBegin('invalid_party_status', Thrift.Type.STRUCT, 3);
    this.invalid_party_status.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_shop_status !== null && this.invalid_shop_status !== undefined) {
    output.writeFieldBegin('invalid_shop_status', Thrift.Type.STRUCT, 4);
    this.invalid_shop_status.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_contract_status !== null && this.invalid_contract_status !== undefined) {
    output.writeFieldBegin('invalid_contract_status', Thrift.Type.STRUCT, 5);
    this.invalid_contract_status.write(output);
    output.writeFieldEnd();
  }
  if (this.operation_not_permitted !== null && this.operation_not_permitted !== undefined) {
    output.writeFieldBegin('operation_not_permitted', Thrift.Type.STRUCT, 6);
    this.operation_not_permitted.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_GetActiveBinding_args = function(args) {
  this.customer_id = null;
  if (args) {
    if (args.customer_id !== undefined && args.customer_id !== null) {
      this.customer_id = args.customer_id;
    }
  }
};
CustomerManagement_GetActiveBinding_args.prototype = {};
CustomerManagement_GetActiveBinding_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customer_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_GetActiveBinding_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_GetActiveBinding_args');
  if (this.customer_id !== null && this.customer_id !== undefined) {
    output.writeFieldBegin('customer_id', Thrift.Type.STRING, 1);
    output.writeString(this.customer_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_GetActiveBinding_result = function(args) {
  this.success = null;
  this.invalid_user = null;
  this.customer_not_found = null;
  this.invalid_customer_status = null;
  if (args instanceof ttypes.InvalidUser) {
    this.invalid_user = args;
    return;
  }
  if (args instanceof ttypes.CustomerNotFound) {
    this.customer_not_found = args;
    return;
  }
  if (args instanceof ttypes.InvalidCustomerStatus) {
    this.invalid_customer_status = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CustomerBinding(args.success);
    }
    if (args.invalid_user !== undefined && args.invalid_user !== null) {
      this.invalid_user = args.invalid_user;
    }
    if (args.customer_not_found !== undefined && args.customer_not_found !== null) {
      this.customer_not_found = args.customer_not_found;
    }
    if (args.invalid_customer_status !== undefined && args.invalid_customer_status !== null) {
      this.invalid_customer_status = args.invalid_customer_status;
    }
  }
};
CustomerManagement_GetActiveBinding_result.prototype = {};
CustomerManagement_GetActiveBinding_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CustomerBinding();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_user = new ttypes.InvalidUser();
        this.invalid_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer_not_found = new ttypes.CustomerNotFound();
        this.customer_not_found.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_customer_status = new ttypes.InvalidCustomerStatus();
        this.invalid_customer_status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_GetActiveBinding_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_GetActiveBinding_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_user !== null && this.invalid_user !== undefined) {
    output.writeFieldBegin('invalid_user', Thrift.Type.STRUCT, 1);
    this.invalid_user.write(output);
    output.writeFieldEnd();
  }
  if (this.customer_not_found !== null && this.customer_not_found !== undefined) {
    output.writeFieldBegin('customer_not_found', Thrift.Type.STRUCT, 2);
    this.customer_not_found.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_customer_status !== null && this.invalid_customer_status !== undefined) {
    output.writeFieldBegin('invalid_customer_status', Thrift.Type.STRUCT, 3);
    this.invalid_customer_status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_GetEvents_args = function(args) {
  this.customer_id = null;
  this.range = null;
  if (args) {
    if (args.customer_id !== undefined && args.customer_id !== null) {
      this.customer_id = args.customer_id;
    }
    if (args.range !== undefined && args.range !== null) {
      this.range = new ttypes.EventRange(args.range);
    }
  }
};
CustomerManagement_GetEvents_args.prototype = {};
CustomerManagement_GetEvents_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customer_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.EventRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_GetEvents_args.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_GetEvents_args');
  if (this.customer_id !== null && this.customer_id !== undefined) {
    output.writeFieldBegin('customer_id', Thrift.Type.STRING, 1);
    output.writeString(this.customer_id);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 2);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagement_GetEvents_result = function(args) {
  this.success = null;
  this.invalid_user = null;
  this.customer_not_found = null;
  this.event_not_found = null;
  if (args instanceof ttypes.InvalidUser) {
    this.invalid_user = args;
    return;
  }
  if (args instanceof ttypes.CustomerNotFound) {
    this.customer_not_found = args;
    return;
  }
  if (args instanceof ttypes.EventNotFound) {
    this.event_not_found = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.invalid_user !== undefined && args.invalid_user !== null) {
      this.invalid_user = args.invalid_user;
    }
    if (args.customer_not_found !== undefined && args.customer_not_found !== null) {
      this.customer_not_found = args.customer_not_found;
    }
    if (args.event_not_found !== undefined && args.event_not_found !== null) {
      this.event_not_found = args.event_not_found;
    }
  }
};
CustomerManagement_GetEvents_result.prototype = {};
CustomerManagement_GetEvents_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.success = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new ttypes.Event();
          elem134.read(input);
          this.success.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_user = new ttypes.InvalidUser();
        this.invalid_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer_not_found = new ttypes.CustomerNotFound();
        this.customer_not_found.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.event_not_found = new ttypes.EventNotFound();
        this.event_not_found.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerManagement_GetEvents_result.prototype.write = function(output) {
  output.writeStructBegin('CustomerManagement_GetEvents_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter135 in this.success)
    {
      if (this.success.hasOwnProperty(iter135))
      {
        iter135 = this.success[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invalid_user !== null && this.invalid_user !== undefined) {
    output.writeFieldBegin('invalid_user', Thrift.Type.STRUCT, 1);
    this.invalid_user.write(output);
    output.writeFieldEnd();
  }
  if (this.customer_not_found !== null && this.customer_not_found !== undefined) {
    output.writeFieldBegin('customer_not_found', Thrift.Type.STRUCT, 2);
    this.customer_not_found.write(output);
    output.writeFieldEnd();
  }
  if (this.event_not_found !== null && this.event_not_found !== undefined) {
    output.writeFieldBegin('event_not_found', Thrift.Type.STRUCT, 3);
    this.event_not_found.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerManagementClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
CustomerManagementClient.prototype = {};
CustomerManagementClient.prototype.seqid = function() { return this._seqid; }
CustomerManagementClient.prototype.new_seqid = function() { return this._seqid += 1; }
CustomerManagementClient.prototype.Create = function(params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Create(params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Create(params);
  }
};

CustomerManagementClient.prototype.send_Create = function(params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Create', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerManagement_Create_args();
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerManagementClient.prototype.recv_Create = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerManagement_Create_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.invalid_user) {
    return callback(result.invalid_user);
  }
  if (null !== result.invalid_party_status) {
    return callback(result.invalid_party_status);
  }
  if (null !== result.invalid_shop_status) {
    return callback(result.invalid_shop_status);
  }
  if (null !== result.shop_not_found) {
    return callback(result.shop_not_found);
  }
  if (null !== result.party_not_found) {
    return callback(result.party_not_found);
  }
  if (null !== result.operation_not_permitted) {
    return callback(result.operation_not_permitted);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Create failed: unknown result');
};
CustomerManagementClient.prototype.Get = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Get(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Get(id);
  }
};

CustomerManagementClient.prototype.send_Get = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Get', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerManagement_Get_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerManagementClient.prototype.recv_Get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerManagement_Get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.invalid_user) {
    return callback(result.invalid_user);
  }
  if (null !== result.not_found) {
    return callback(result.not_found);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Get failed: unknown result');
};
CustomerManagementClient.prototype.Delete = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Delete(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Delete(id);
  }
};

CustomerManagementClient.prototype.send_Delete = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Delete', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerManagement_Delete_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerManagementClient.prototype.recv_Delete = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerManagement_Delete_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.invalid_user) {
    return callback(result.invalid_user);
  }
  if (null !== result.not_found) {
    return callback(result.not_found);
  }
  if (null !== result.invalid_party_status) {
    return callback(result.invalid_party_status);
  }
  if (null !== result.invalid_shop_status) {
    return callback(result.invalid_shop_status);
  }
  callback(null)
};
CustomerManagementClient.prototype.StartBinding = function(customer_id, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_StartBinding(customer_id, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_StartBinding(customer_id, params);
  }
};

CustomerManagementClient.prototype.send_StartBinding = function(customer_id, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('StartBinding', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerManagement_StartBinding_args();
  args.customer_id = customer_id;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerManagementClient.prototype.recv_StartBinding = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerManagement_StartBinding_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.invalid_user) {
    return callback(result.invalid_user);
  }
  if (null !== result.customer_not_found) {
    return callback(result.customer_not_found);
  }
  if (null !== result.invalid_party_status) {
    return callback(result.invalid_party_status);
  }
  if (null !== result.invalid_shop_status) {
    return callback(result.invalid_shop_status);
  }
  if (null !== result.invalid_contract_status) {
    return callback(result.invalid_contract_status);
  }
  if (null !== result.operation_not_permitted) {
    return callback(result.operation_not_permitted);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('StartBinding failed: unknown result');
};
CustomerManagementClient.prototype.GetActiveBinding = function(customer_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetActiveBinding(customer_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetActiveBinding(customer_id);
  }
};

CustomerManagementClient.prototype.send_GetActiveBinding = function(customer_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetActiveBinding', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerManagement_GetActiveBinding_args();
  args.customer_id = customer_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerManagementClient.prototype.recv_GetActiveBinding = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerManagement_GetActiveBinding_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.invalid_user) {
    return callback(result.invalid_user);
  }
  if (null !== result.customer_not_found) {
    return callback(result.customer_not_found);
  }
  if (null !== result.invalid_customer_status) {
    return callback(result.invalid_customer_status);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetActiveBinding failed: unknown result');
};
CustomerManagementClient.prototype.GetEvents = function(customer_id, range, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEvents(customer_id, range);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEvents(customer_id, range);
  }
};

CustomerManagementClient.prototype.send_GetEvents = function(customer_id, range) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEvents', Thrift.MessageType.CALL, this.seqid());
  var args = new CustomerManagement_GetEvents_args();
  args.customer_id = customer_id;
  args.range = range;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CustomerManagementClient.prototype.recv_GetEvents = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CustomerManagement_GetEvents_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.invalid_user) {
    return callback(result.invalid_user);
  }
  if (null !== result.customer_not_found) {
    return callback(result.customer_not_found);
  }
  if (null !== result.event_not_found) {
    return callback(result.event_not_found);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEvents failed: unknown result');
};
var CustomerManagementProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
CustomerManagementProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

CustomerManagementProcessor.prototype.process_Create = function(seqid, input, output) {
  var args = new CustomerManagement_Create_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Create.length === 1) {
    Q.fcall(this._handler.Create, args.params)
      .then(function(result) {
        var result = new CustomerManagement_Create_result({success: result});
        output.writeMessageBegin("Create", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.ShopNotFound || err instanceof ttypes.PartyNotFound || err instanceof ttypes.OperationNotPermitted) {
          var result = new CustomerManagement_Create_result(err);
          output.writeMessageBegin("Create", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Create", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Create(args.params, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.ShopNotFound || err instanceof ttypes.PartyNotFound || err instanceof ttypes.OperationNotPermitted) {
        var result = new CustomerManagement_Create_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Create", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Create", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CustomerManagementProcessor.prototype.process_Get = function(seqid, input, output) {
  var args = new CustomerManagement_Get_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Get.length === 1) {
    Q.fcall(this._handler.Get, args.id)
      .then(function(result) {
        var result = new CustomerManagement_Get_result({success: result});
        output.writeMessageBegin("Get", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.CustomerNotFound) {
          var result = new CustomerManagement_Get_result(err);
          output.writeMessageBegin("Get", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Get", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Get(args.id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.CustomerNotFound) {
        var result = new CustomerManagement_Get_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Get", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CustomerManagementProcessor.prototype.process_Delete = function(seqid, input, output) {
  var args = new CustomerManagement_Delete_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.Delete.length === 1) {
    Q.fcall(this._handler.Delete, args.id)
      .then(function(result) {
        var result = new CustomerManagement_Delete_result({success: result});
        output.writeMessageBegin("Delete", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.CustomerNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus) {
          var result = new CustomerManagement_Delete_result(err);
          output.writeMessageBegin("Delete", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("Delete", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.Delete(args.id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.CustomerNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus) {
        var result = new CustomerManagement_Delete_result((err != null ? err : {success: result}));
        output.writeMessageBegin("Delete", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("Delete", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CustomerManagementProcessor.prototype.process_StartBinding = function(seqid, input, output) {
  var args = new CustomerManagement_StartBinding_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.StartBinding.length === 2) {
    Q.fcall(this._handler.StartBinding, args.customer_id, args.params)
      .then(function(result) {
        var result = new CustomerManagement_StartBinding_result({success: result});
        output.writeMessageBegin("StartBinding", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.CustomerNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus || err instanceof ttypes.OperationNotPermitted) {
          var result = new CustomerManagement_StartBinding_result(err);
          output.writeMessageBegin("StartBinding", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("StartBinding", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.StartBinding(args.customer_id, args.params, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.CustomerNotFound || err instanceof ttypes.InvalidPartyStatus || err instanceof ttypes.InvalidShopStatus || err instanceof ttypes.InvalidContractStatus || err instanceof ttypes.OperationNotPermitted) {
        var result = new CustomerManagement_StartBinding_result((err != null ? err : {success: result}));
        output.writeMessageBegin("StartBinding", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("StartBinding", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CustomerManagementProcessor.prototype.process_GetActiveBinding = function(seqid, input, output) {
  var args = new CustomerManagement_GetActiveBinding_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetActiveBinding.length === 1) {
    Q.fcall(this._handler.GetActiveBinding, args.customer_id)
      .then(function(result) {
        var result = new CustomerManagement_GetActiveBinding_result({success: result});
        output.writeMessageBegin("GetActiveBinding", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.CustomerNotFound || err instanceof ttypes.InvalidCustomerStatus) {
          var result = new CustomerManagement_GetActiveBinding_result(err);
          output.writeMessageBegin("GetActiveBinding", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetActiveBinding", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetActiveBinding(args.customer_id, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.CustomerNotFound || err instanceof ttypes.InvalidCustomerStatus) {
        var result = new CustomerManagement_GetActiveBinding_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetActiveBinding", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetActiveBinding", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CustomerManagementProcessor.prototype.process_GetEvents = function(seqid, input, output) {
  var args = new CustomerManagement_GetEvents_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEvents.length === 2) {
    Q.fcall(this._handler.GetEvents, args.customer_id, args.range)
      .then(function(result) {
        var result = new CustomerManagement_GetEvents_result({success: result});
        output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidUser || err instanceof ttypes.CustomerNotFound || err instanceof ttypes.EventNotFound) {
          var result = new CustomerManagement_GetEvents_result(err);
          output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetEvents", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEvents(args.customer_id, args.range, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidUser || err instanceof ttypes.CustomerNotFound || err instanceof ttypes.EventNotFound) {
        var result = new CustomerManagement_GetEvents_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetEvents", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEvents", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

