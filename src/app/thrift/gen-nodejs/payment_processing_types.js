//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('woody_js/dist/thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var base_ttypes = require('./base_types');
var domain_ttypes = require('./domain_types');
var user_interaction_ttypes = require('./user_interaction_types');


var ttypes = module.exports = {};
var UserInfo = module.exports.UserInfo = function(args) {
  this.id = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = new ttypes.UserType(args.type);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
  }
};
UserInfo.prototype = {};
UserInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.type = new ttypes.UserType();
        this.type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInfo.prototype.write = function(output) {
  output.writeStructBegin('UserInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 2);
    this.type.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserType = module.exports.UserType = function(args) {
  this.internal_user = null;
  this.external_user = null;
  this.service_user = null;
  if (args) {
    if (args.internal_user !== undefined && args.internal_user !== null) {
      this.internal_user = new ttypes.InternalUser(args.internal_user);
    }
    if (args.external_user !== undefined && args.external_user !== null) {
      this.external_user = new ttypes.ExternalUser(args.external_user);
    }
    if (args.service_user !== undefined && args.service_user !== null) {
      this.service_user = new ttypes.ServiceUser(args.service_user);
    }
  }
};
UserType.prototype = {};
UserType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.internal_user = new ttypes.InternalUser();
        this.internal_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.external_user = new ttypes.ExternalUser();
        this.external_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.service_user = new ttypes.ServiceUser();
        this.service_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserType.prototype.write = function(output) {
  output.writeStructBegin('UserType');
  if (this.internal_user !== null && this.internal_user !== undefined) {
    output.writeFieldBegin('internal_user', Thrift.Type.STRUCT, 1);
    this.internal_user.write(output);
    output.writeFieldEnd();
  }
  if (this.external_user !== null && this.external_user !== undefined) {
    output.writeFieldBegin('external_user', Thrift.Type.STRUCT, 2);
    this.external_user.write(output);
    output.writeFieldEnd();
  }
  if (this.service_user !== null && this.service_user !== undefined) {
    output.writeFieldBegin('service_user', Thrift.Type.STRUCT, 3);
    this.service_user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InternalUser = module.exports.InternalUser = function(args) {
};
InternalUser.prototype = {};
InternalUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InternalUser.prototype.write = function(output) {
  output.writeStructBegin('InternalUser');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExternalUser = module.exports.ExternalUser = function(args) {
};
ExternalUser.prototype = {};
ExternalUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExternalUser.prototype.write = function(output) {
  output.writeStructBegin('ExternalUser');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ServiceUser = module.exports.ServiceUser = function(args) {
};
ServiceUser.prototype = {};
ServiceUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceUser.prototype.write = function(output) {
  output.writeStructBegin('ServiceUser');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Event = module.exports.Event = function(args) {
  this.id = null;
  this.created_at = null;
  this.source = null;
  this.payload = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = new ttypes.EventSource(args.source);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field source is unset!');
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = new ttypes.EventPayload(args.payload);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payload is unset!');
    }
  }
};
Event.prototype = {};
Event.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new ttypes.EventSource();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.payload = new ttypes.EventPayload();
        this.payload.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Event.prototype.write = function(output) {
  output.writeStructBegin('Event');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 2);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 3);
    this.source.write(output);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRUCT, 4);
    this.payload.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventSource = module.exports.EventSource = function(args) {
  this.invoice_id = null;
  this.party_id = null;
  this.invoice_template_id = null;
  this.customer_id = null;
  if (args) {
    if (args.invoice_id !== undefined && args.invoice_id !== null) {
      this.invoice_id = args.invoice_id;
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    }
    if (args.invoice_template_id !== undefined && args.invoice_template_id !== null) {
      this.invoice_template_id = args.invoice_template_id;
    }
    if (args.customer_id !== undefined && args.customer_id !== null) {
      this.customer_id = args.customer_id;
    }
  }
};
EventSource.prototype = {};
EventSource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.invoice_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.invoice_template_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.customer_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventSource.prototype.write = function(output) {
  output.writeStructBegin('EventSource');
  if (this.invoice_id !== null && this.invoice_id !== undefined) {
    output.writeFieldBegin('invoice_id', Thrift.Type.STRING, 1);
    output.writeString(this.invoice_id);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 2);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.invoice_template_id !== null && this.invoice_template_id !== undefined) {
    output.writeFieldBegin('invoice_template_id', Thrift.Type.STRING, 3);
    output.writeString(this.invoice_template_id);
    output.writeFieldEnd();
  }
  if (this.customer_id !== null && this.customer_id !== undefined) {
    output.writeFieldBegin('customer_id', Thrift.Type.STRING, 4);
    output.writeString(this.customer_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventPayload = module.exports.EventPayload = function(args) {
  this.invoice_changes = null;
  this.party_changes = null;
  this.invoice_template_changes = null;
  this.customer_changes = null;
  if (args) {
    if (args.invoice_changes !== undefined && args.invoice_changes !== null) {
      this.invoice_changes = Thrift.copyList(args.invoice_changes, [null]);
    }
    if (args.party_changes !== undefined && args.party_changes !== null) {
      this.party_changes = Thrift.copyList(args.party_changes, [null]);
    }
    if (args.invoice_template_changes !== undefined && args.invoice_template_changes !== null) {
      this.invoice_template_changes = Thrift.copyList(args.invoice_template_changes, [null]);
    }
    if (args.customer_changes !== undefined && args.customer_changes !== null) {
      this.customer_changes = Thrift.copyList(args.customer_changes, [null]);
    }
  }
};
EventPayload.prototype = {};
EventPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.invoice_changes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.InvoiceChange();
          elem6.read(input);
          this.invoice_changes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.party_changes = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.PartyChange();
          elem13.read(input);
          this.party_changes.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.invoice_template_changes = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new ttypes.InvoiceTemplateChange();
          elem20.read(input);
          this.invoice_template_changes.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.customer_changes = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new ttypes.CustomerChange();
          elem27.read(input);
          this.customer_changes.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventPayload.prototype.write = function(output) {
  output.writeStructBegin('EventPayload');
  if (this.invoice_changes !== null && this.invoice_changes !== undefined) {
    output.writeFieldBegin('invoice_changes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.invoice_changes.length);
    for (var iter28 in this.invoice_changes)
    {
      if (this.invoice_changes.hasOwnProperty(iter28))
      {
        iter28 = this.invoice_changes[iter28];
        iter28.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.party_changes !== null && this.party_changes !== undefined) {
    output.writeFieldBegin('party_changes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.party_changes.length);
    for (var iter29 in this.party_changes)
    {
      if (this.party_changes.hasOwnProperty(iter29))
      {
        iter29 = this.party_changes[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invoice_template_changes !== null && this.invoice_template_changes !== undefined) {
    output.writeFieldBegin('invoice_template_changes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.invoice_template_changes.length);
    for (var iter30 in this.invoice_template_changes)
    {
      if (this.invoice_template_changes.hasOwnProperty(iter30))
      {
        iter30 = this.invoice_template_changes[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.customer_changes !== null && this.customer_changes !== undefined) {
    output.writeFieldBegin('customer_changes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.customer_changes.length);
    for (var iter31 in this.customer_changes)
    {
      if (this.customer_changes.hasOwnProperty(iter31))
      {
        iter31 = this.customer_changes[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceChange = module.exports.InvoiceChange = function(args) {
  this.invoice_created = null;
  this.invoice_status_changed = null;
  this.invoice_payment_change = null;
  if (args) {
    if (args.invoice_created !== undefined && args.invoice_created !== null) {
      this.invoice_created = new ttypes.InvoiceCreated(args.invoice_created);
    }
    if (args.invoice_status_changed !== undefined && args.invoice_status_changed !== null) {
      this.invoice_status_changed = new ttypes.InvoiceStatusChanged(args.invoice_status_changed);
    }
    if (args.invoice_payment_change !== undefined && args.invoice_payment_change !== null) {
      this.invoice_payment_change = new ttypes.InvoicePaymentChange(args.invoice_payment_change);
    }
  }
};
InvoiceChange.prototype = {};
InvoiceChange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_created = new ttypes.InvoiceCreated();
        this.invoice_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_status_changed = new ttypes.InvoiceStatusChanged();
        this.invoice_status_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_change = new ttypes.InvoicePaymentChange();
        this.invoice_payment_change.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceChange.prototype.write = function(output) {
  output.writeStructBegin('InvoiceChange');
  if (this.invoice_created !== null && this.invoice_created !== undefined) {
    output.writeFieldBegin('invoice_created', Thrift.Type.STRUCT, 1);
    this.invoice_created.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_status_changed !== null && this.invoice_status_changed !== undefined) {
    output.writeFieldBegin('invoice_status_changed', Thrift.Type.STRUCT, 2);
    this.invoice_status_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_payment_change !== null && this.invoice_payment_change !== undefined) {
    output.writeFieldBegin('invoice_payment_change', Thrift.Type.STRUCT, 3);
    this.invoice_payment_change.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateChange = module.exports.InvoiceTemplateChange = function(args) {
  this.invoice_template_created = null;
  this.invoice_template_updated = null;
  this.invoice_template_deleted = null;
  if (args) {
    if (args.invoice_template_created !== undefined && args.invoice_template_created !== null) {
      this.invoice_template_created = new ttypes.InvoiceTemplateCreated(args.invoice_template_created);
    }
    if (args.invoice_template_updated !== undefined && args.invoice_template_updated !== null) {
      this.invoice_template_updated = new ttypes.InvoiceTemplateUpdated(args.invoice_template_updated);
    }
    if (args.invoice_template_deleted !== undefined && args.invoice_template_deleted !== null) {
      this.invoice_template_deleted = new ttypes.InvoiceTemplateDeleted(args.invoice_template_deleted);
    }
  }
};
InvoiceTemplateChange.prototype = {};
InvoiceTemplateChange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_template_created = new ttypes.InvoiceTemplateCreated();
        this.invoice_template_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_template_updated = new ttypes.InvoiceTemplateUpdated();
        this.invoice_template_updated.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_template_deleted = new ttypes.InvoiceTemplateDeleted();
        this.invoice_template_deleted.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateChange.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateChange');
  if (this.invoice_template_created !== null && this.invoice_template_created !== undefined) {
    output.writeFieldBegin('invoice_template_created', Thrift.Type.STRUCT, 1);
    this.invoice_template_created.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_template_updated !== null && this.invoice_template_updated !== undefined) {
    output.writeFieldBegin('invoice_template_updated', Thrift.Type.STRUCT, 2);
    this.invoice_template_updated.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_template_deleted !== null && this.invoice_template_deleted !== undefined) {
    output.writeFieldBegin('invoice_template_deleted', Thrift.Type.STRUCT, 3);
    this.invoice_template_deleted.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceCreated = module.exports.InvoiceCreated = function(args) {
  this.invoice = null;
  if (args) {
    if (args.invoice !== undefined && args.invoice !== null) {
      this.invoice = new domain_ttypes.Invoice(args.invoice);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field invoice is unset!');
    }
  }
};
InvoiceCreated.prototype = {};
InvoiceCreated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice = new domain_ttypes.Invoice();
        this.invoice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceCreated.prototype.write = function(output) {
  output.writeStructBegin('InvoiceCreated');
  if (this.invoice !== null && this.invoice !== undefined) {
    output.writeFieldBegin('invoice', Thrift.Type.STRUCT, 1);
    this.invoice.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceStatusChanged = module.exports.InvoiceStatusChanged = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new domain_ttypes.InvoiceStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
InvoiceStatusChanged.prototype = {};
InvoiceStatusChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new domain_ttypes.InvoiceStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceStatusChanged.prototype.write = function(output) {
  output.writeStructBegin('InvoiceStatusChanged');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentChange = module.exports.InvoicePaymentChange = function(args) {
  this.id = null;
  this.payload = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = new ttypes.InvoicePaymentChangePayload(args.payload);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payload is unset!');
    }
  }
};
InvoicePaymentChange.prototype = {};
InvoicePaymentChange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.payload = new ttypes.InvoicePaymentChangePayload();
        this.payload.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentChange.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentChange');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRUCT, 2);
    this.payload.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentChangePayload = module.exports.InvoicePaymentChangePayload = function(args) {
  this.invoice_payment_started = null;
  this.invoice_payment_status_changed = null;
  this.invoice_payment_session_change = null;
  this.invoice_payment_refund_change = null;
  this.invoice_payment_adjustment_change = null;
  if (args) {
    if (args.invoice_payment_started !== undefined && args.invoice_payment_started !== null) {
      this.invoice_payment_started = new ttypes.InvoicePaymentStarted(args.invoice_payment_started);
    }
    if (args.invoice_payment_status_changed !== undefined && args.invoice_payment_status_changed !== null) {
      this.invoice_payment_status_changed = new ttypes.InvoicePaymentStatusChanged(args.invoice_payment_status_changed);
    }
    if (args.invoice_payment_session_change !== undefined && args.invoice_payment_session_change !== null) {
      this.invoice_payment_session_change = new ttypes.InvoicePaymentSessionChange(args.invoice_payment_session_change);
    }
    if (args.invoice_payment_refund_change !== undefined && args.invoice_payment_refund_change !== null) {
      this.invoice_payment_refund_change = new ttypes.InvoicePaymentRefundChange(args.invoice_payment_refund_change);
    }
    if (args.invoice_payment_adjustment_change !== undefined && args.invoice_payment_adjustment_change !== null) {
      this.invoice_payment_adjustment_change = new ttypes.InvoicePaymentAdjustmentChange(args.invoice_payment_adjustment_change);
    }
  }
};
InvoicePaymentChangePayload.prototype = {};
InvoicePaymentChangePayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_started = new ttypes.InvoicePaymentStarted();
        this.invoice_payment_started.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_status_changed = new ttypes.InvoicePaymentStatusChanged();
        this.invoice_payment_status_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_session_change = new ttypes.InvoicePaymentSessionChange();
        this.invoice_payment_session_change.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_refund_change = new ttypes.InvoicePaymentRefundChange();
        this.invoice_payment_refund_change.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_adjustment_change = new ttypes.InvoicePaymentAdjustmentChange();
        this.invoice_payment_adjustment_change.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentChangePayload.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentChangePayload');
  if (this.invoice_payment_started !== null && this.invoice_payment_started !== undefined) {
    output.writeFieldBegin('invoice_payment_started', Thrift.Type.STRUCT, 1);
    this.invoice_payment_started.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_payment_status_changed !== null && this.invoice_payment_status_changed !== undefined) {
    output.writeFieldBegin('invoice_payment_status_changed', Thrift.Type.STRUCT, 3);
    this.invoice_payment_status_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_payment_session_change !== null && this.invoice_payment_session_change !== undefined) {
    output.writeFieldBegin('invoice_payment_session_change', Thrift.Type.STRUCT, 2);
    this.invoice_payment_session_change.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_payment_refund_change !== null && this.invoice_payment_refund_change !== undefined) {
    output.writeFieldBegin('invoice_payment_refund_change', Thrift.Type.STRUCT, 7);
    this.invoice_payment_refund_change.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_payment_adjustment_change !== null && this.invoice_payment_adjustment_change !== undefined) {
    output.writeFieldBegin('invoice_payment_adjustment_change', Thrift.Type.STRUCT, 6);
    this.invoice_payment_adjustment_change.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentStarted = module.exports.InvoicePaymentStarted = function(args) {
  this.payment = null;
  this.risk_score = null;
  this.route = null;
  this.cash_flow = null;
  if (args) {
    if (args.payment !== undefined && args.payment !== null) {
      this.payment = new domain_ttypes.InvoicePayment(args.payment);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment is unset!');
    }
    if (args.risk_score !== undefined && args.risk_score !== null) {
      this.risk_score = args.risk_score;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field risk_score is unset!');
    }
    if (args.route !== undefined && args.route !== null) {
      this.route = new domain_ttypes.PaymentRoute(args.route);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field route is unset!');
    }
    if (args.cash_flow !== undefined && args.cash_flow !== null) {
      this.cash_flow = Thrift.copyList(args.cash_flow, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cash_flow is unset!');
    }
  }
};
InvoicePaymentStarted.prototype = {};
InvoicePaymentStarted.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment = new domain_ttypes.InvoicePayment();
        this.payment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.risk_score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.route = new domain_ttypes.PaymentRoute();
        this.route.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.cash_flow = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new domain_ttypes.FinalCashFlowPosting();
          elem38.read(input);
          this.cash_flow.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentStarted.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentStarted');
  if (this.payment !== null && this.payment !== undefined) {
    output.writeFieldBegin('payment', Thrift.Type.STRUCT, 1);
    this.payment.write(output);
    output.writeFieldEnd();
  }
  if (this.risk_score !== null && this.risk_score !== undefined) {
    output.writeFieldBegin('risk_score', Thrift.Type.I32, 4);
    output.writeI32(this.risk_score);
    output.writeFieldEnd();
  }
  if (this.route !== null && this.route !== undefined) {
    output.writeFieldBegin('route', Thrift.Type.STRUCT, 2);
    this.route.write(output);
    output.writeFieldEnd();
  }
  if (this.cash_flow !== null && this.cash_flow !== undefined) {
    output.writeFieldBegin('cash_flow', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.cash_flow.length);
    for (var iter39 in this.cash_flow)
    {
      if (this.cash_flow.hasOwnProperty(iter39))
      {
        iter39 = this.cash_flow[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentStatusChanged = module.exports.InvoicePaymentStatusChanged = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new domain_ttypes.InvoicePaymentStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
InvoicePaymentStatusChanged.prototype = {};
InvoicePaymentStatusChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new domain_ttypes.InvoicePaymentStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentStatusChanged.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentStatusChanged');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentSessionChange = module.exports.InvoicePaymentSessionChange = function(args) {
  this.target = null;
  this.payload = null;
  if (args) {
    if (args.target !== undefined && args.target !== null) {
      this.target = new domain_ttypes.TargetInvoicePaymentStatus(args.target);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field target is unset!');
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = new ttypes.SessionChangePayload(args.payload);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payload is unset!');
    }
  }
};
InvoicePaymentSessionChange.prototype = {};
InvoicePaymentSessionChange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.target = new domain_ttypes.TargetInvoicePaymentStatus();
        this.target.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.payload = new ttypes.SessionChangePayload();
        this.payload.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentSessionChange.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentSessionChange');
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRUCT, 1);
    this.target.write(output);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRUCT, 2);
    this.payload.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionChangePayload = module.exports.SessionChangePayload = function(args) {
  this.session_started = null;
  this.session_finished = null;
  this.session_suspended = null;
  this.session_activated = null;
  this.session_transaction_bound = null;
  this.session_proxy_state_changed = null;
  this.session_interaction_requested = null;
  if (args) {
    if (args.session_started !== undefined && args.session_started !== null) {
      this.session_started = new ttypes.SessionStarted(args.session_started);
    }
    if (args.session_finished !== undefined && args.session_finished !== null) {
      this.session_finished = new ttypes.SessionFinished(args.session_finished);
    }
    if (args.session_suspended !== undefined && args.session_suspended !== null) {
      this.session_suspended = new ttypes.SessionSuspended(args.session_suspended);
    }
    if (args.session_activated !== undefined && args.session_activated !== null) {
      this.session_activated = new ttypes.SessionActivated(args.session_activated);
    }
    if (args.session_transaction_bound !== undefined && args.session_transaction_bound !== null) {
      this.session_transaction_bound = new ttypes.SessionTransactionBound(args.session_transaction_bound);
    }
    if (args.session_proxy_state_changed !== undefined && args.session_proxy_state_changed !== null) {
      this.session_proxy_state_changed = new ttypes.SessionProxyStateChanged(args.session_proxy_state_changed);
    }
    if (args.session_interaction_requested !== undefined && args.session_interaction_requested !== null) {
      this.session_interaction_requested = new ttypes.SessionInteractionRequested(args.session_interaction_requested);
    }
  }
};
SessionChangePayload.prototype = {};
SessionChangePayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.session_started = new ttypes.SessionStarted();
        this.session_started.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.session_finished = new ttypes.SessionFinished();
        this.session_finished.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.session_suspended = new ttypes.SessionSuspended();
        this.session_suspended.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.session_activated = new ttypes.SessionActivated();
        this.session_activated.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.session_transaction_bound = new ttypes.SessionTransactionBound();
        this.session_transaction_bound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.session_proxy_state_changed = new ttypes.SessionProxyStateChanged();
        this.session_proxy_state_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.session_interaction_requested = new ttypes.SessionInteractionRequested();
        this.session_interaction_requested.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionChangePayload.prototype.write = function(output) {
  output.writeStructBegin('SessionChangePayload');
  if (this.session_started !== null && this.session_started !== undefined) {
    output.writeFieldBegin('session_started', Thrift.Type.STRUCT, 1);
    this.session_started.write(output);
    output.writeFieldEnd();
  }
  if (this.session_finished !== null && this.session_finished !== undefined) {
    output.writeFieldBegin('session_finished', Thrift.Type.STRUCT, 2);
    this.session_finished.write(output);
    output.writeFieldEnd();
  }
  if (this.session_suspended !== null && this.session_suspended !== undefined) {
    output.writeFieldBegin('session_suspended', Thrift.Type.STRUCT, 3);
    this.session_suspended.write(output);
    output.writeFieldEnd();
  }
  if (this.session_activated !== null && this.session_activated !== undefined) {
    output.writeFieldBegin('session_activated', Thrift.Type.STRUCT, 4);
    this.session_activated.write(output);
    output.writeFieldEnd();
  }
  if (this.session_transaction_bound !== null && this.session_transaction_bound !== undefined) {
    output.writeFieldBegin('session_transaction_bound', Thrift.Type.STRUCT, 5);
    this.session_transaction_bound.write(output);
    output.writeFieldEnd();
  }
  if (this.session_proxy_state_changed !== null && this.session_proxy_state_changed !== undefined) {
    output.writeFieldBegin('session_proxy_state_changed', Thrift.Type.STRUCT, 6);
    this.session_proxy_state_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.session_interaction_requested !== null && this.session_interaction_requested !== undefined) {
    output.writeFieldBegin('session_interaction_requested', Thrift.Type.STRUCT, 7);
    this.session_interaction_requested.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionStarted = module.exports.SessionStarted = function(args) {
};
SessionStarted.prototype = {};
SessionStarted.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionStarted.prototype.write = function(output) {
  output.writeStructBegin('SessionStarted');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionFinished = module.exports.SessionFinished = function(args) {
  this.result = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new ttypes.SessionResult(args.result);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field result is unset!');
    }
  }
};
SessionFinished.prototype = {};
SessionFinished.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new ttypes.SessionResult();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionFinished.prototype.write = function(output) {
  output.writeStructBegin('SessionFinished');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionSuspended = module.exports.SessionSuspended = function(args) {
  this.tag = null;
  if (args) {
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
  }
};
SessionSuspended.prototype = {};
SessionSuspended.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionSuspended.prototype.write = function(output) {
  output.writeStructBegin('SessionSuspended');
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 1);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionActivated = module.exports.SessionActivated = function(args) {
};
SessionActivated.prototype = {};
SessionActivated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionActivated.prototype.write = function(output) {
  output.writeStructBegin('SessionActivated');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionResult = module.exports.SessionResult = function(args) {
  this.succeeded = null;
  this.failed = null;
  if (args) {
    if (args.succeeded !== undefined && args.succeeded !== null) {
      this.succeeded = new ttypes.SessionSucceeded(args.succeeded);
    }
    if (args.failed !== undefined && args.failed !== null) {
      this.failed = new ttypes.SessionFailed(args.failed);
    }
  }
};
SessionResult.prototype = {};
SessionResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.succeeded = new ttypes.SessionSucceeded();
        this.succeeded.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.failed = new ttypes.SessionFailed();
        this.failed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionResult.prototype.write = function(output) {
  output.writeStructBegin('SessionResult');
  if (this.succeeded !== null && this.succeeded !== undefined) {
    output.writeFieldBegin('succeeded', Thrift.Type.STRUCT, 1);
    this.succeeded.write(output);
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.STRUCT, 2);
    this.failed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionSucceeded = module.exports.SessionSucceeded = function(args) {
};
SessionSucceeded.prototype = {};
SessionSucceeded.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionSucceeded.prototype.write = function(output) {
  output.writeStructBegin('SessionSucceeded');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionFailed = module.exports.SessionFailed = function(args) {
  this.failure = null;
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = new domain_ttypes.OperationFailure(args.failure);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field failure is unset!');
    }
  }
};
SessionFailed.prototype = {};
SessionFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new domain_ttypes.OperationFailure();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionFailed.prototype.write = function(output) {
  output.writeStructBegin('SessionFailed');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateCreated = module.exports.InvoiceTemplateCreated = function(args) {
  this.invoice_template = null;
  if (args) {
    if (args.invoice_template !== undefined && args.invoice_template !== null) {
      this.invoice_template = new domain_ttypes.InvoiceTemplate(args.invoice_template);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field invoice_template is unset!');
    }
  }
};
InvoiceTemplateCreated.prototype = {};
InvoiceTemplateCreated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_template = new domain_ttypes.InvoiceTemplate();
        this.invoice_template.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateCreated.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateCreated');
  if (this.invoice_template !== null && this.invoice_template !== undefined) {
    output.writeFieldBegin('invoice_template', Thrift.Type.STRUCT, 1);
    this.invoice_template.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateUpdated = module.exports.InvoiceTemplateUpdated = function(args) {
  this.diff = null;
  if (args) {
    if (args.diff !== undefined && args.diff !== null) {
      this.diff = new ttypes.InvoiceTemplateUpdateParams(args.diff);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field diff is unset!');
    }
  }
};
InvoiceTemplateUpdated.prototype = {};
InvoiceTemplateUpdated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.diff = new ttypes.InvoiceTemplateUpdateParams();
        this.diff.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateUpdated.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateUpdated');
  if (this.diff !== null && this.diff !== undefined) {
    output.writeFieldBegin('diff', Thrift.Type.STRUCT, 1);
    this.diff.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateDeleted = module.exports.InvoiceTemplateDeleted = function(args) {
};
InvoiceTemplateDeleted.prototype = {};
InvoiceTemplateDeleted.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateDeleted.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateDeleted');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionTransactionBound = module.exports.SessionTransactionBound = function(args) {
  this.trx = null;
  if (args) {
    if (args.trx !== undefined && args.trx !== null) {
      this.trx = new domain_ttypes.TransactionInfo(args.trx);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field trx is unset!');
    }
  }
};
SessionTransactionBound.prototype = {};
SessionTransactionBound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.trx = new domain_ttypes.TransactionInfo();
        this.trx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionTransactionBound.prototype.write = function(output) {
  output.writeStructBegin('SessionTransactionBound');
  if (this.trx !== null && this.trx !== undefined) {
    output.writeFieldBegin('trx', Thrift.Type.STRUCT, 1);
    this.trx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionProxyStateChanged = module.exports.SessionProxyStateChanged = function(args) {
  this.proxy_state = null;
  if (args) {
    if (args.proxy_state !== undefined && args.proxy_state !== null) {
      this.proxy_state = args.proxy_state;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field proxy_state is unset!');
    }
  }
};
SessionProxyStateChanged.prototype = {};
SessionProxyStateChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.proxy_state = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionProxyStateChanged.prototype.write = function(output) {
  output.writeStructBegin('SessionProxyStateChanged');
  if (this.proxy_state !== null && this.proxy_state !== undefined) {
    output.writeFieldBegin('proxy_state', Thrift.Type.STRING, 1);
    output.writeBinary(this.proxy_state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionInteractionRequested = module.exports.SessionInteractionRequested = function(args) {
  this.interaction = null;
  if (args) {
    if (args.interaction !== undefined && args.interaction !== null) {
      this.interaction = new user_interaction_ttypes.UserInteraction(args.interaction);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field interaction is unset!');
    }
  }
};
SessionInteractionRequested.prototype = {};
SessionInteractionRequested.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.interaction = new user_interaction_ttypes.UserInteraction();
        this.interaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionInteractionRequested.prototype.write = function(output) {
  output.writeStructBegin('SessionInteractionRequested');
  if (this.interaction !== null && this.interaction !== undefined) {
    output.writeFieldBegin('interaction', Thrift.Type.STRUCT, 1);
    this.interaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundChange = module.exports.InvoicePaymentRefundChange = function(args) {
  this.id = null;
  this.payload = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = new ttypes.InvoicePaymentRefundChangePayload(args.payload);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payload is unset!');
    }
  }
};
InvoicePaymentRefundChange.prototype = {};
InvoicePaymentRefundChange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.payload = new ttypes.InvoicePaymentRefundChangePayload();
        this.payload.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundChange.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundChange');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRUCT, 2);
    this.payload.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundChangePayload = module.exports.InvoicePaymentRefundChangePayload = function(args) {
  this.invoice_payment_refund_created = null;
  this.invoice_payment_refund_status_changed = null;
  this.invoice_payment_session_change = null;
  if (args) {
    if (args.invoice_payment_refund_created !== undefined && args.invoice_payment_refund_created !== null) {
      this.invoice_payment_refund_created = new ttypes.InvoicePaymentRefundCreated(args.invoice_payment_refund_created);
    }
    if (args.invoice_payment_refund_status_changed !== undefined && args.invoice_payment_refund_status_changed !== null) {
      this.invoice_payment_refund_status_changed = new ttypes.InvoicePaymentRefundStatusChanged(args.invoice_payment_refund_status_changed);
    }
    if (args.invoice_payment_session_change !== undefined && args.invoice_payment_session_change !== null) {
      this.invoice_payment_session_change = new ttypes.InvoicePaymentSessionChange(args.invoice_payment_session_change);
    }
  }
};
InvoicePaymentRefundChangePayload.prototype = {};
InvoicePaymentRefundChangePayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_refund_created = new ttypes.InvoicePaymentRefundCreated();
        this.invoice_payment_refund_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_refund_status_changed = new ttypes.InvoicePaymentRefundStatusChanged();
        this.invoice_payment_refund_status_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_session_change = new ttypes.InvoicePaymentSessionChange();
        this.invoice_payment_session_change.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundChangePayload.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundChangePayload');
  if (this.invoice_payment_refund_created !== null && this.invoice_payment_refund_created !== undefined) {
    output.writeFieldBegin('invoice_payment_refund_created', Thrift.Type.STRUCT, 1);
    this.invoice_payment_refund_created.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_payment_refund_status_changed !== null && this.invoice_payment_refund_status_changed !== undefined) {
    output.writeFieldBegin('invoice_payment_refund_status_changed', Thrift.Type.STRUCT, 2);
    this.invoice_payment_refund_status_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_payment_session_change !== null && this.invoice_payment_session_change !== undefined) {
    output.writeFieldBegin('invoice_payment_session_change', Thrift.Type.STRUCT, 3);
    this.invoice_payment_session_change.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundCreated = module.exports.InvoicePaymentRefundCreated = function(args) {
  this.refund = null;
  this.cash_flow = null;
  if (args) {
    if (args.refund !== undefined && args.refund !== null) {
      this.refund = new domain_ttypes.InvoicePaymentRefund(args.refund);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refund is unset!');
    }
    if (args.cash_flow !== undefined && args.cash_flow !== null) {
      this.cash_flow = Thrift.copyList(args.cash_flow, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cash_flow is unset!');
    }
  }
};
InvoicePaymentRefundCreated.prototype = {};
InvoicePaymentRefundCreated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.refund = new domain_ttypes.InvoicePaymentRefund();
        this.refund.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.cash_flow = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new domain_ttypes.FinalCashFlowPosting();
          elem46.read(input);
          this.cash_flow.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundCreated.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundCreated');
  if (this.refund !== null && this.refund !== undefined) {
    output.writeFieldBegin('refund', Thrift.Type.STRUCT, 1);
    this.refund.write(output);
    output.writeFieldEnd();
  }
  if (this.cash_flow !== null && this.cash_flow !== undefined) {
    output.writeFieldBegin('cash_flow', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cash_flow.length);
    for (var iter47 in this.cash_flow)
    {
      if (this.cash_flow.hasOwnProperty(iter47))
      {
        iter47 = this.cash_flow[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundStatusChanged = module.exports.InvoicePaymentRefundStatusChanged = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new domain_ttypes.InvoicePaymentRefundStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
InvoicePaymentRefundStatusChanged.prototype = {};
InvoicePaymentRefundStatusChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new domain_ttypes.InvoicePaymentRefundStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundStatusChanged.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundStatusChanged');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentChange = module.exports.InvoicePaymentAdjustmentChange = function(args) {
  this.id = null;
  this.payload = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = new ttypes.InvoicePaymentAdjustmentChangePayload(args.payload);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payload is unset!');
    }
  }
};
InvoicePaymentAdjustmentChange.prototype = {};
InvoicePaymentAdjustmentChange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.payload = new ttypes.InvoicePaymentAdjustmentChangePayload();
        this.payload.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentChange.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentChange');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRUCT, 2);
    this.payload.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentChangePayload = module.exports.InvoicePaymentAdjustmentChangePayload = function(args) {
  this.invoice_payment_adjustment_created = null;
  this.invoice_payment_adjustment_status_changed = null;
  if (args) {
    if (args.invoice_payment_adjustment_created !== undefined && args.invoice_payment_adjustment_created !== null) {
      this.invoice_payment_adjustment_created = new ttypes.InvoicePaymentAdjustmentCreated(args.invoice_payment_adjustment_created);
    }
    if (args.invoice_payment_adjustment_status_changed !== undefined && args.invoice_payment_adjustment_status_changed !== null) {
      this.invoice_payment_adjustment_status_changed = new ttypes.InvoicePaymentAdjustmentStatusChanged(args.invoice_payment_adjustment_status_changed);
    }
  }
};
InvoicePaymentAdjustmentChangePayload.prototype = {};
InvoicePaymentAdjustmentChangePayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_adjustment_created = new ttypes.InvoicePaymentAdjustmentCreated();
        this.invoice_payment_adjustment_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_payment_adjustment_status_changed = new ttypes.InvoicePaymentAdjustmentStatusChanged();
        this.invoice_payment_adjustment_status_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentChangePayload.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentChangePayload');
  if (this.invoice_payment_adjustment_created !== null && this.invoice_payment_adjustment_created !== undefined) {
    output.writeFieldBegin('invoice_payment_adjustment_created', Thrift.Type.STRUCT, 1);
    this.invoice_payment_adjustment_created.write(output);
    output.writeFieldEnd();
  }
  if (this.invoice_payment_adjustment_status_changed !== null && this.invoice_payment_adjustment_status_changed !== undefined) {
    output.writeFieldBegin('invoice_payment_adjustment_status_changed', Thrift.Type.STRUCT, 2);
    this.invoice_payment_adjustment_status_changed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentCreated = module.exports.InvoicePaymentAdjustmentCreated = function(args) {
  this.adjustment = null;
  if (args) {
    if (args.adjustment !== undefined && args.adjustment !== null) {
      this.adjustment = new domain_ttypes.InvoicePaymentAdjustment(args.adjustment);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field adjustment is unset!');
    }
  }
};
InvoicePaymentAdjustmentCreated.prototype = {};
InvoicePaymentAdjustmentCreated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.adjustment = new domain_ttypes.InvoicePaymentAdjustment();
        this.adjustment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentCreated.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentCreated');
  if (this.adjustment !== null && this.adjustment !== undefined) {
    output.writeFieldBegin('adjustment', Thrift.Type.STRUCT, 1);
    this.adjustment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentStatusChanged = module.exports.InvoicePaymentAdjustmentStatusChanged = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new domain_ttypes.InvoicePaymentAdjustmentStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
InvoicePaymentAdjustmentStatusChanged.prototype = {};
InvoicePaymentAdjustmentStatusChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new domain_ttypes.InvoicePaymentAdjustmentStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentStatusChanged.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentStatusChanged');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventRange = module.exports.EventRange = function(args) {
  this.after = null;
  this.limit = null;
  if (args) {
    if (args.after !== undefined && args.after !== null) {
      this.after = args.after;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field limit is unset!');
    }
  }
};
EventRange.prototype = {};
EventRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.after = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventRange.prototype.write = function(output) {
  output.writeStructBegin('EventRange');
  if (this.after !== null && this.after !== undefined) {
    output.writeFieldBegin('after', Thrift.Type.I64, 1);
    output.writeI64(this.after);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 2);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceParams = module.exports.InvoiceParams = function(args) {
  this.party_id = null;
  this.shop_id = null;
  this.details = null;
  this.due = null;
  this.cost = null;
  this.context = null;
  if (args) {
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field party_id is unset!');
    }
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new domain_ttypes.InvoiceDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
    if (args.due !== undefined && args.due !== null) {
      this.due = args.due;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field due is unset!');
    }
    if (args.cost !== undefined && args.cost !== null) {
      this.cost = new domain_ttypes.Cash(args.cost);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cost is unset!');
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new base_ttypes.Content(args.context);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field context is unset!');
    }
  }
};
InvoiceParams.prototype = {};
InvoiceParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new domain_ttypes.InvoiceDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.due = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.cost = new domain_ttypes.Cash();
        this.cost.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new base_ttypes.Content();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceParams.prototype.write = function(output) {
  output.writeStructBegin('InvoiceParams');
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 1);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 2);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 3);
    this.details.write(output);
    output.writeFieldEnd();
  }
  if (this.due !== null && this.due !== undefined) {
    output.writeFieldBegin('due', Thrift.Type.STRING, 4);
    output.writeString(this.due);
    output.writeFieldEnd();
  }
  if (this.cost !== null && this.cost !== undefined) {
    output.writeFieldBegin('cost', Thrift.Type.STRUCT, 5);
    this.cost.write(output);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 6);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceWithTemplateParams = module.exports.InvoiceWithTemplateParams = function(args) {
  this.template_id = null;
  this.cost = null;
  this.context = null;
  if (args) {
    if (args.template_id !== undefined && args.template_id !== null) {
      this.template_id = args.template_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field template_id is unset!');
    }
    if (args.cost !== undefined && args.cost !== null) {
      this.cost = new domain_ttypes.Cash(args.cost);
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new base_ttypes.Content(args.context);
    }
  }
};
InvoiceWithTemplateParams.prototype = {};
InvoiceWithTemplateParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.template_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cost = new domain_ttypes.Cash();
        this.cost.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new base_ttypes.Content();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceWithTemplateParams.prototype.write = function(output) {
  output.writeStructBegin('InvoiceWithTemplateParams');
  if (this.template_id !== null && this.template_id !== undefined) {
    output.writeFieldBegin('template_id', Thrift.Type.STRING, 1);
    output.writeString(this.template_id);
    output.writeFieldEnd();
  }
  if (this.cost !== null && this.cost !== undefined) {
    output.writeFieldBegin('cost', Thrift.Type.STRUCT, 2);
    this.cost.write(output);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 3);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateCreateParams = module.exports.InvoiceTemplateCreateParams = function(args) {
  this.party_id = null;
  this.shop_id = null;
  this.invoice_lifetime = null;
  this.product = null;
  this.description = null;
  this.details = null;
  this.context = null;
  if (args) {
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field party_id is unset!');
    }
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.invoice_lifetime !== undefined && args.invoice_lifetime !== null) {
      this.invoice_lifetime = new domain_ttypes.LifetimeInterval(args.invoice_lifetime);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field invoice_lifetime is unset!');
    }
    if (args.product !== undefined && args.product !== null) {
      this.product = args.product;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field product is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new domain_ttypes.InvoiceTemplateDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new base_ttypes.Content(args.context);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field context is unset!');
    }
  }
};
InvoiceTemplateCreateParams.prototype = {};
InvoiceTemplateCreateParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_lifetime = new domain_ttypes.LifetimeInterval();
        this.invoice_lifetime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.product = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new domain_ttypes.InvoiceTemplateDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new base_ttypes.Content();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateCreateParams.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateCreateParams');
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 1);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 2);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.invoice_lifetime !== null && this.invoice_lifetime !== undefined) {
    output.writeFieldBegin('invoice_lifetime', Thrift.Type.STRUCT, 4);
    this.invoice_lifetime.write(output);
    output.writeFieldEnd();
  }
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRING, 7);
    output.writeString(this.product);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 8);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 9);
    this.details.write(output);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 6);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateUpdateParams = module.exports.InvoiceTemplateUpdateParams = function(args) {
  this.invoice_lifetime = null;
  this.product = null;
  this.description = null;
  this.details = null;
  this.context = null;
  if (args) {
    if (args.invoice_lifetime !== undefined && args.invoice_lifetime !== null) {
      this.invoice_lifetime = new domain_ttypes.LifetimeInterval(args.invoice_lifetime);
    }
    if (args.product !== undefined && args.product !== null) {
      this.product = args.product;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new domain_ttypes.InvoiceTemplateDetails(args.details);
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = new base_ttypes.Content(args.context);
    }
  }
};
InvoiceTemplateUpdateParams.prototype = {};
InvoiceTemplateUpdateParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice_lifetime = new domain_ttypes.LifetimeInterval();
        this.invoice_lifetime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.product = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new domain_ttypes.InvoiceTemplateDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.context = new base_ttypes.Content();
        this.context.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateUpdateParams.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateUpdateParams');
  if (this.invoice_lifetime !== null && this.invoice_lifetime !== undefined) {
    output.writeFieldBegin('invoice_lifetime', Thrift.Type.STRUCT, 2);
    this.invoice_lifetime.write(output);
    output.writeFieldEnd();
  }
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.STRING, 5);
    output.writeString(this.product);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 7);
    this.details.write(output);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRUCT, 4);
    this.context.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentParams = module.exports.InvoicePaymentParams = function(args) {
  this.payer = null;
  this.flow = null;
  if (args) {
    if (args.payer !== undefined && args.payer !== null) {
      this.payer = new ttypes.PayerParams(args.payer);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payer is unset!');
    }
    if (args.flow !== undefined && args.flow !== null) {
      this.flow = new ttypes.InvoicePaymentParamsFlow(args.flow);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field flow is unset!');
    }
  }
};
InvoicePaymentParams.prototype = {};
InvoicePaymentParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payer = new ttypes.PayerParams();
        this.payer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.flow = new ttypes.InvoicePaymentParamsFlow();
        this.flow.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentParams.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentParams');
  if (this.payer !== null && this.payer !== undefined) {
    output.writeFieldBegin('payer', Thrift.Type.STRUCT, 1);
    this.payer.write(output);
    output.writeFieldEnd();
  }
  if (this.flow !== null && this.flow !== undefined) {
    output.writeFieldBegin('flow', Thrift.Type.STRUCT, 2);
    this.flow.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayerParams = module.exports.PayerParams = function(args) {
  this.payment_resource = null;
  this.customer = null;
  if (args) {
    if (args.payment_resource !== undefined && args.payment_resource !== null) {
      this.payment_resource = new ttypes.PaymentResourcePayerParams(args.payment_resource);
    }
    if (args.customer !== undefined && args.customer !== null) {
      this.customer = new ttypes.CustomerPayerParams(args.customer);
    }
  }
};
PayerParams.prototype = {};
PayerParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_resource = new ttypes.PaymentResourcePayerParams();
        this.payment_resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer = new ttypes.CustomerPayerParams();
        this.customer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayerParams.prototype.write = function(output) {
  output.writeStructBegin('PayerParams');
  if (this.payment_resource !== null && this.payment_resource !== undefined) {
    output.writeFieldBegin('payment_resource', Thrift.Type.STRUCT, 1);
    this.payment_resource.write(output);
    output.writeFieldEnd();
  }
  if (this.customer !== null && this.customer !== undefined) {
    output.writeFieldBegin('customer', Thrift.Type.STRUCT, 2);
    this.customer.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentResourcePayerParams = module.exports.PaymentResourcePayerParams = function(args) {
  this.resource = null;
  this.contact_info = null;
  if (args) {
    if (args.resource !== undefined && args.resource !== null) {
      this.resource = new domain_ttypes.DisposablePaymentResource(args.resource);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resource is unset!');
    }
    if (args.contact_info !== undefined && args.contact_info !== null) {
      this.contact_info = new domain_ttypes.ContactInfo(args.contact_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contact_info is unset!');
    }
  }
};
PaymentResourcePayerParams.prototype = {};
PaymentResourcePayerParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.resource = new domain_ttypes.DisposablePaymentResource();
        this.resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact_info = new domain_ttypes.ContactInfo();
        this.contact_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentResourcePayerParams.prototype.write = function(output) {
  output.writeStructBegin('PaymentResourcePayerParams');
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRUCT, 1);
    this.resource.write(output);
    output.writeFieldEnd();
  }
  if (this.contact_info !== null && this.contact_info !== undefined) {
    output.writeFieldBegin('contact_info', Thrift.Type.STRUCT, 2);
    this.contact_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerPayerParams = module.exports.CustomerPayerParams = function(args) {
  this.customer_id = null;
  if (args) {
    if (args.customer_id !== undefined && args.customer_id !== null) {
      this.customer_id = args.customer_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customer_id is unset!');
    }
  }
};
CustomerPayerParams.prototype = {};
CustomerPayerParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customer_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerPayerParams.prototype.write = function(output) {
  output.writeStructBegin('CustomerPayerParams');
  if (this.customer_id !== null && this.customer_id !== undefined) {
    output.writeFieldBegin('customer_id', Thrift.Type.STRING, 1);
    output.writeString(this.customer_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentParamsFlow = module.exports.InvoicePaymentParamsFlow = function(args) {
  this.instant = null;
  this.hold = null;
  if (args) {
    if (args.instant !== undefined && args.instant !== null) {
      this.instant = new ttypes.InvoicePaymentParamsFlowInstant(args.instant);
    }
    if (args.hold !== undefined && args.hold !== null) {
      this.hold = new ttypes.InvoicePaymentParamsFlowHold(args.hold);
    }
  }
};
InvoicePaymentParamsFlow.prototype = {};
InvoicePaymentParamsFlow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.instant = new ttypes.InvoicePaymentParamsFlowInstant();
        this.instant.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.hold = new ttypes.InvoicePaymentParamsFlowHold();
        this.hold.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentParamsFlow.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentParamsFlow');
  if (this.instant !== null && this.instant !== undefined) {
    output.writeFieldBegin('instant', Thrift.Type.STRUCT, 1);
    this.instant.write(output);
    output.writeFieldEnd();
  }
  if (this.hold !== null && this.hold !== undefined) {
    output.writeFieldBegin('hold', Thrift.Type.STRUCT, 2);
    this.hold.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentParamsFlowInstant = module.exports.InvoicePaymentParamsFlowInstant = function(args) {
};
InvoicePaymentParamsFlowInstant.prototype = {};
InvoicePaymentParamsFlowInstant.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentParamsFlowInstant.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentParamsFlowInstant');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentParamsFlowHold = module.exports.InvoicePaymentParamsFlowHold = function(args) {
  this.on_hold_expiration = null;
  if (args) {
    if (args.on_hold_expiration !== undefined && args.on_hold_expiration !== null) {
      this.on_hold_expiration = args.on_hold_expiration;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field on_hold_expiration is unset!');
    }
  }
};
InvoicePaymentParamsFlowHold.prototype = {};
InvoicePaymentParamsFlowHold.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.on_hold_expiration = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentParamsFlowHold.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentParamsFlowHold');
  if (this.on_hold_expiration !== null && this.on_hold_expiration !== undefined) {
    output.writeFieldBegin('on_hold_expiration', Thrift.Type.I32, 1);
    output.writeI32(this.on_hold_expiration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Invoice = module.exports.Invoice = function(args) {
  this.invoice = null;
  this.payments = null;
  if (args) {
    if (args.invoice !== undefined && args.invoice !== null) {
      this.invoice = new domain_ttypes.Invoice(args.invoice);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field invoice is unset!');
    }
    if (args.payments !== undefined && args.payments !== null) {
      this.payments = Thrift.copyList(args.payments, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payments is unset!');
    }
  }
};
Invoice.prototype = {};
Invoice.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invoice = new domain_ttypes.Invoice();
        this.invoice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.payments = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.InvoicePayment();
          elem54.read(input);
          this.payments.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Invoice.prototype.write = function(output) {
  output.writeStructBegin('Invoice');
  if (this.invoice !== null && this.invoice !== undefined) {
    output.writeFieldBegin('invoice', Thrift.Type.STRUCT, 1);
    this.invoice.write(output);
    output.writeFieldEnd();
  }
  if (this.payments !== null && this.payments !== undefined) {
    output.writeFieldBegin('payments', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.payments.length);
    for (var iter55 in this.payments)
    {
      if (this.payments.hasOwnProperty(iter55))
      {
        iter55 = this.payments[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePayment = module.exports.InvoicePayment = function(args) {
  this.payment = null;
  this.refunds = null;
  this.adjustments = null;
  if (args) {
    if (args.payment !== undefined && args.payment !== null) {
      this.payment = new domain_ttypes.InvoicePayment(args.payment);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment is unset!');
    }
    if (args.refunds !== undefined && args.refunds !== null) {
      this.refunds = Thrift.copyList(args.refunds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refunds is unset!');
    }
    if (args.adjustments !== undefined && args.adjustments !== null) {
      this.adjustments = Thrift.copyList(args.adjustments, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field adjustments is unset!');
    }
  }
};
InvoicePayment.prototype = {};
InvoicePayment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment = new domain_ttypes.InvoicePayment();
        this.payment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.refunds = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new domain_ttypes.InvoicePaymentRefund();
          elem62.read(input);
          this.refunds.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.adjustments = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new domain_ttypes.InvoicePaymentAdjustment();
          elem69.read(input);
          this.adjustments.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePayment.prototype.write = function(output) {
  output.writeStructBegin('InvoicePayment');
  if (this.payment !== null && this.payment !== undefined) {
    output.writeFieldBegin('payment', Thrift.Type.STRUCT, 1);
    this.payment.write(output);
    output.writeFieldEnd();
  }
  if (this.refunds !== null && this.refunds !== undefined) {
    output.writeFieldBegin('refunds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.refunds.length);
    for (var iter70 in this.refunds)
    {
      if (this.refunds.hasOwnProperty(iter70))
      {
        iter70 = this.refunds[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.adjustments !== null && this.adjustments !== undefined) {
    output.writeFieldBegin('adjustments', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.adjustments.length);
    for (var iter71 in this.adjustments)
    {
      if (this.adjustments.hasOwnProperty(iter71))
      {
        iter71 = this.adjustments[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundParams = module.exports.InvoicePaymentRefundParams = function(args) {
  this.reason = null;
  this.cash = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.cash !== undefined && args.cash !== null) {
      this.cash = new domain_ttypes.Cash(args.cash);
    }
  }
};
InvoicePaymentRefundParams.prototype = {};
InvoicePaymentRefundParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash = new domain_ttypes.Cash();
        this.cash.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundParams.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundParams');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.cash !== null && this.cash !== undefined) {
    output.writeFieldBegin('cash', Thrift.Type.STRUCT, 2);
    this.cash.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentParams = module.exports.InvoicePaymentAdjustmentParams = function(args) {
  this.domain_revision = null;
  this.reason = null;
  if (args) {
    if (args.domain_revision !== undefined && args.domain_revision !== null) {
      this.domain_revision = args.domain_revision;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
InvoicePaymentAdjustmentParams.prototype = {};
InvoicePaymentAdjustmentParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.domain_revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentParams.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentParams');
  if (this.domain_revision !== null && this.domain_revision !== undefined) {
    output.writeFieldBegin('domain_revision', Thrift.Type.I64, 1);
    output.writeI64(this.domain_revision);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyNotFound = module.exports.PartyNotFound = function(args) {
  Thrift.TException.call(this, "PartyNotFound")
  this.name = "PartyNotFound"
};
Thrift.inherits(PartyNotFound, Thrift.TException);
PartyNotFound.prototype.name = 'PartyNotFound';
PartyNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyNotFound.prototype.write = function(output) {
  output.writeStructBegin('PartyNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyNotExistsYet = module.exports.PartyNotExistsYet = function(args) {
  Thrift.TException.call(this, "PartyNotExistsYet")
  this.name = "PartyNotExistsYet"
};
Thrift.inherits(PartyNotExistsYet, Thrift.TException);
PartyNotExistsYet.prototype.name = 'PartyNotExistsYet';
PartyNotExistsYet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyNotExistsYet.prototype.write = function(output) {
  output.writeStructBegin('PartyNotExistsYet');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidPartyRevision = module.exports.InvalidPartyRevision = function(args) {
  Thrift.TException.call(this, "InvalidPartyRevision")
  this.name = "InvalidPartyRevision"
};
Thrift.inherits(InvalidPartyRevision, Thrift.TException);
InvalidPartyRevision.prototype.name = 'InvalidPartyRevision';
InvalidPartyRevision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPartyRevision.prototype.write = function(output) {
  output.writeStructBegin('InvalidPartyRevision');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopNotFound = module.exports.ShopNotFound = function(args) {
  Thrift.TException.call(this, "ShopNotFound")
  this.name = "ShopNotFound"
};
Thrift.inherits(ShopNotFound, Thrift.TException);
ShopNotFound.prototype.name = 'ShopNotFound';
ShopNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopNotFound.prototype.write = function(output) {
  output.writeStructBegin('ShopNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidPartyStatus = module.exports.InvalidPartyStatus = function(args) {
  Thrift.TException.call(this, "InvalidPartyStatus")
  this.name = "InvalidPartyStatus"
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.InvalidStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
Thrift.inherits(InvalidPartyStatus, Thrift.TException);
InvalidPartyStatus.prototype.name = 'InvalidPartyStatus';
InvalidPartyStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.InvalidStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPartyStatus.prototype.write = function(output) {
  output.writeStructBegin('InvalidPartyStatus');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidShopStatus = module.exports.InvalidShopStatus = function(args) {
  Thrift.TException.call(this, "InvalidShopStatus")
  this.name = "InvalidShopStatus"
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.InvalidStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
Thrift.inherits(InvalidShopStatus, Thrift.TException);
InvalidShopStatus.prototype.name = 'InvalidShopStatus';
InvalidShopStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.InvalidStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidShopStatus.prototype.write = function(output) {
  output.writeStructBegin('InvalidShopStatus');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidContractStatus = module.exports.InvalidContractStatus = function(args) {
  Thrift.TException.call(this, "InvalidContractStatus")
  this.name = "InvalidContractStatus"
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new domain_ttypes.ContractStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
Thrift.inherits(InvalidContractStatus, Thrift.TException);
InvalidContractStatus.prototype.name = 'InvalidContractStatus';
InvalidContractStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new domain_ttypes.ContractStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidContractStatus.prototype.write = function(output) {
  output.writeStructBegin('InvalidContractStatus');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidStatus = module.exports.InvalidStatus = function(args) {
  this.blocking = null;
  this.suspension = null;
  if (args) {
    if (args.blocking !== undefined && args.blocking !== null) {
      this.blocking = new domain_ttypes.Blocking(args.blocking);
    }
    if (args.suspension !== undefined && args.suspension !== null) {
      this.suspension = new domain_ttypes.Suspension(args.suspension);
    }
  }
};
InvalidStatus.prototype = {};
InvalidStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.blocking = new domain_ttypes.Blocking();
        this.blocking.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.suspension = new domain_ttypes.Suspension();
        this.suspension.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidStatus.prototype.write = function(output) {
  output.writeStructBegin('InvalidStatus');
  if (this.blocking !== null && this.blocking !== undefined) {
    output.writeFieldBegin('blocking', Thrift.Type.STRUCT, 1);
    this.blocking.write(output);
    output.writeFieldEnd();
  }
  if (this.suspension !== null && this.suspension !== undefined) {
    output.writeFieldBegin('suspension', Thrift.Type.STRUCT, 2);
    this.suspension.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidUser = module.exports.InvalidUser = function(args) {
  Thrift.TException.call(this, "InvalidUser")
  this.name = "InvalidUser"
};
Thrift.inherits(InvalidUser, Thrift.TException);
InvalidUser.prototype.name = 'InvalidUser';
InvalidUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidUser.prototype.write = function(output) {
  output.writeStructBegin('InvalidUser');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceNotFound = module.exports.InvoiceNotFound = function(args) {
  Thrift.TException.call(this, "InvoiceNotFound")
  this.name = "InvoiceNotFound"
};
Thrift.inherits(InvoiceNotFound, Thrift.TException);
InvoiceNotFound.prototype.name = 'InvoiceNotFound';
InvoiceNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceNotFound.prototype.write = function(output) {
  output.writeStructBegin('InvoiceNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentNotFound = module.exports.InvoicePaymentNotFound = function(args) {
  Thrift.TException.call(this, "InvoicePaymentNotFound")
  this.name = "InvoicePaymentNotFound"
};
Thrift.inherits(InvoicePaymentNotFound, Thrift.TException);
InvoicePaymentNotFound.prototype.name = 'InvoicePaymentNotFound';
InvoicePaymentNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentNotFound.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundNotFound = module.exports.InvoicePaymentRefundNotFound = function(args) {
  Thrift.TException.call(this, "InvoicePaymentRefundNotFound")
  this.name = "InvoicePaymentRefundNotFound"
};
Thrift.inherits(InvoicePaymentRefundNotFound, Thrift.TException);
InvoicePaymentRefundNotFound.prototype.name = 'InvoicePaymentRefundNotFound';
InvoicePaymentRefundNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundNotFound.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentNotFound = module.exports.InvoicePaymentAdjustmentNotFound = function(args) {
  Thrift.TException.call(this, "InvoicePaymentAdjustmentNotFound")
  this.name = "InvoicePaymentAdjustmentNotFound"
};
Thrift.inherits(InvoicePaymentAdjustmentNotFound, Thrift.TException);
InvoicePaymentAdjustmentNotFound.prototype.name = 'InvoicePaymentAdjustmentNotFound';
InvoicePaymentAdjustmentNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentNotFound.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventNotFound = module.exports.EventNotFound = function(args) {
  Thrift.TException.call(this, "EventNotFound")
  this.name = "EventNotFound"
};
Thrift.inherits(EventNotFound, Thrift.TException);
EventNotFound.prototype.name = 'EventNotFound';
EventNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventNotFound.prototype.write = function(output) {
  output.writeStructBegin('EventNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OperationNotPermitted = module.exports.OperationNotPermitted = function(args) {
  Thrift.TException.call(this, "OperationNotPermitted")
  this.name = "OperationNotPermitted"
};
Thrift.inherits(OperationNotPermitted, Thrift.TException);
OperationNotPermitted.prototype.name = 'OperationNotPermitted';
OperationNotPermitted.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationNotPermitted.prototype.write = function(output) {
  output.writeStructBegin('OperationNotPermitted');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InsufficientAccountBalance = module.exports.InsufficientAccountBalance = function(args) {
  Thrift.TException.call(this, "InsufficientAccountBalance")
  this.name = "InsufficientAccountBalance"
};
Thrift.inherits(InsufficientAccountBalance, Thrift.TException);
InsufficientAccountBalance.prototype.name = 'InsufficientAccountBalance';
InsufficientAccountBalance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InsufficientAccountBalance.prototype.write = function(output) {
  output.writeStructBegin('InsufficientAccountBalance');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentPending = module.exports.InvoicePaymentPending = function(args) {
  Thrift.TException.call(this, "InvoicePaymentPending")
  this.name = "InvoicePaymentPending"
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
Thrift.inherits(InvoicePaymentPending, Thrift.TException);
InvoicePaymentPending.prototype.name = 'InvoicePaymentPending';
InvoicePaymentPending.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentPending.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentPending');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentRefundPending = module.exports.InvoicePaymentRefundPending = function(args) {
  Thrift.TException.call(this, "InvoicePaymentRefundPending")
  this.name = "InvoicePaymentRefundPending"
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
Thrift.inherits(InvoicePaymentRefundPending, Thrift.TException);
InvoicePaymentRefundPending.prototype.name = 'InvoicePaymentRefundPending';
InvoicePaymentRefundPending.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentRefundPending.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentRefundPending');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAdjustmentPending = module.exports.InvoicePaymentAdjustmentPending = function(args) {
  Thrift.TException.call(this, "InvoicePaymentAdjustmentPending")
  this.name = "InvoicePaymentAdjustmentPending"
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
Thrift.inherits(InvoicePaymentAdjustmentPending, Thrift.TException);
InvoicePaymentAdjustmentPending.prototype.name = 'InvoicePaymentAdjustmentPending';
InvoicePaymentAdjustmentPending.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAdjustmentPending.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAdjustmentPending');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidInvoiceStatus = module.exports.InvalidInvoiceStatus = function(args) {
  Thrift.TException.call(this, "InvalidInvoiceStatus")
  this.name = "InvalidInvoiceStatus"
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new domain_ttypes.InvoiceStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
Thrift.inherits(InvalidInvoiceStatus, Thrift.TException);
InvalidInvoiceStatus.prototype.name = 'InvalidInvoiceStatus';
InvalidInvoiceStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new domain_ttypes.InvoiceStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidInvoiceStatus.prototype.write = function(output) {
  output.writeStructBegin('InvalidInvoiceStatus');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidPaymentStatus = module.exports.InvalidPaymentStatus = function(args) {
  Thrift.TException.call(this, "InvalidPaymentStatus")
  this.name = "InvalidPaymentStatus"
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new domain_ttypes.InvoicePaymentStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
Thrift.inherits(InvalidPaymentStatus, Thrift.TException);
InvalidPaymentStatus.prototype.name = 'InvalidPaymentStatus';
InvalidPaymentStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new domain_ttypes.InvoicePaymentStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPaymentStatus.prototype.write = function(output) {
  output.writeStructBegin('InvalidPaymentStatus');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidPaymentAdjustmentStatus = module.exports.InvalidPaymentAdjustmentStatus = function(args) {
  Thrift.TException.call(this, "InvalidPaymentAdjustmentStatus")
  this.name = "InvalidPaymentAdjustmentStatus"
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new domain_ttypes.InvoicePaymentAdjustmentStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
Thrift.inherits(InvalidPaymentAdjustmentStatus, Thrift.TException);
InvalidPaymentAdjustmentStatus.prototype.name = 'InvalidPaymentAdjustmentStatus';
InvalidPaymentAdjustmentStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new domain_ttypes.InvoicePaymentAdjustmentStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPaymentAdjustmentStatus.prototype.write = function(output) {
  output.writeStructBegin('InvalidPaymentAdjustmentStatus');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateNotFound = module.exports.InvoiceTemplateNotFound = function(args) {
  Thrift.TException.call(this, "InvoiceTemplateNotFound")
  this.name = "InvoiceTemplateNotFound"
};
Thrift.inherits(InvoiceTemplateNotFound, Thrift.TException);
InvoiceTemplateNotFound.prototype.name = 'InvoiceTemplateNotFound';
InvoiceTemplateNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateNotFound.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoiceTemplateRemoved = module.exports.InvoiceTemplateRemoved = function(args) {
  Thrift.TException.call(this, "InvoiceTemplateRemoved")
  this.name = "InvoiceTemplateRemoved"
};
Thrift.inherits(InvoiceTemplateRemoved, Thrift.TException);
InvoiceTemplateRemoved.prototype.name = 'InvoiceTemplateRemoved';
InvoiceTemplateRemoved.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoiceTemplateRemoved.prototype.write = function(output) {
  output.writeStructBegin('InvoiceTemplateRemoved');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvoicePaymentAmountExceeded = module.exports.InvoicePaymentAmountExceeded = function(args) {
  Thrift.TException.call(this, "InvoicePaymentAmountExceeded")
  this.name = "InvoicePaymentAmountExceeded"
  this.maximum = null;
  if (args) {
    if (args.maximum !== undefined && args.maximum !== null) {
      this.maximum = new domain_ttypes.Cash(args.maximum);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maximum is unset!');
    }
  }
};
Thrift.inherits(InvoicePaymentAmountExceeded, Thrift.TException);
InvoicePaymentAmountExceeded.prototype.name = 'InvoicePaymentAmountExceeded';
InvoicePaymentAmountExceeded.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.maximum = new domain_ttypes.Cash();
        this.maximum.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvoicePaymentAmountExceeded.prototype.write = function(output) {
  output.writeStructBegin('InvoicePaymentAmountExceeded');
  if (this.maximum !== null && this.maximum !== undefined) {
    output.writeFieldBegin('maximum', Thrift.Type.STRUCT, 1);
    this.maximum.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InconsistentRefundCurrency = module.exports.InconsistentRefundCurrency = function(args) {
  Thrift.TException.call(this, "InconsistentRefundCurrency")
  this.name = "InconsistentRefundCurrency"
  this.currency = null;
  if (args) {
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currency is unset!');
    }
  }
};
Thrift.inherits(InconsistentRefundCurrency, Thrift.TException);
InconsistentRefundCurrency.prototype.name = 'InconsistentRefundCurrency';
InconsistentRefundCurrency.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InconsistentRefundCurrency.prototype.write = function(output) {
  output.writeStructBegin('InconsistentRefundCurrency');
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 1);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerParams = module.exports.CustomerParams = function(args) {
  this.party_id = null;
  this.shop_id = null;
  this.contact_info = null;
  this.metadata = null;
  if (args) {
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field party_id is unset!');
    }
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.contact_info !== undefined && args.contact_info !== null) {
      this.contact_info = new domain_ttypes.ContactInfo(args.contact_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contact_info is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new json_ttypes.Value(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
  }
};
CustomerParams.prototype = {};
CustomerParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact_info = new domain_ttypes.ContactInfo();
        this.contact_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new json_ttypes.Value();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerParams.prototype.write = function(output) {
  output.writeStructBegin('CustomerParams');
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 1);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 2);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.contact_info !== null && this.contact_info !== undefined) {
    output.writeFieldBegin('contact_info', Thrift.Type.STRUCT, 3);
    this.contact_info.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 4);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Customer = module.exports.Customer = function(args) {
  this.id = null;
  this.owner_id = null;
  this.shop_id = null;
  this.status = null;
  this.created_at = null;
  this.bindings = null;
  this.contact_info = null;
  this.metadata = null;
  this.active_binding_id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field owner_id is unset!');
    }
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.CustomerStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.bindings !== undefined && args.bindings !== null) {
      this.bindings = Thrift.copyList(args.bindings, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bindings is unset!');
    }
    if (args.contact_info !== undefined && args.contact_info !== null) {
      this.contact_info = new domain_ttypes.ContactInfo(args.contact_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contact_info is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new json_ttypes.Value(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.active_binding_id !== undefined && args.active_binding_id !== null) {
      this.active_binding_id = args.active_binding_id;
    }
  }
};
Customer.prototype = {};
Customer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.owner_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.CustomerStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.bindings = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.CustomerBinding();
          elem78.read(input);
          this.bindings.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact_info = new domain_ttypes.ContactInfo();
        this.contact_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new json_ttypes.Value();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.active_binding_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Customer.prototype.write = function(output) {
  output.writeStructBegin('Customer');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.STRING, 2);
    output.writeString(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 3);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 4);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 5);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.bindings !== null && this.bindings !== undefined) {
    output.writeFieldBegin('bindings', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.bindings.length);
    for (var iter79 in this.bindings)
    {
      if (this.bindings.hasOwnProperty(iter79))
      {
        iter79 = this.bindings[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contact_info !== null && this.contact_info !== undefined) {
    output.writeFieldBegin('contact_info', Thrift.Type.STRUCT, 7);
    this.contact_info.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 8);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.active_binding_id !== null && this.active_binding_id !== undefined) {
    output.writeFieldBegin('active_binding_id', Thrift.Type.STRING, 9);
    output.writeString(this.active_binding_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerStatus = module.exports.CustomerStatus = function(args) {
  this.unready = null;
  this.ready = null;
  if (args) {
    if (args.unready !== undefined && args.unready !== null) {
      this.unready = new ttypes.CustomerUnready(args.unready);
    }
    if (args.ready !== undefined && args.ready !== null) {
      this.ready = new ttypes.CustomerReady(args.ready);
    }
  }
};
CustomerStatus.prototype = {};
CustomerStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.unready = new ttypes.CustomerUnready();
        this.unready.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ready = new ttypes.CustomerReady();
        this.ready.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerStatus.prototype.write = function(output) {
  output.writeStructBegin('CustomerStatus');
  if (this.unready !== null && this.unready !== undefined) {
    output.writeFieldBegin('unready', Thrift.Type.STRUCT, 1);
    this.unready.write(output);
    output.writeFieldEnd();
  }
  if (this.ready !== null && this.ready !== undefined) {
    output.writeFieldBegin('ready', Thrift.Type.STRUCT, 2);
    this.ready.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerUnready = module.exports.CustomerUnready = function(args) {
};
CustomerUnready.prototype = {};
CustomerUnready.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerUnready.prototype.write = function(output) {
  output.writeStructBegin('CustomerUnready');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerReady = module.exports.CustomerReady = function(args) {
};
CustomerReady.prototype = {};
CustomerReady.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerReady.prototype.write = function(output) {
  output.writeStructBegin('CustomerReady');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerChange = module.exports.CustomerChange = function(args) {
  this.customer_created = null;
  this.customer_deleted = null;
  this.customer_status_changed = null;
  this.customer_binding_changed = null;
  if (args) {
    if (args.customer_created !== undefined && args.customer_created !== null) {
      this.customer_created = new ttypes.CustomerCreated(args.customer_created);
    }
    if (args.customer_deleted !== undefined && args.customer_deleted !== null) {
      this.customer_deleted = new ttypes.CustomerDeleted(args.customer_deleted);
    }
    if (args.customer_status_changed !== undefined && args.customer_status_changed !== null) {
      this.customer_status_changed = new ttypes.CustomerStatusChanged(args.customer_status_changed);
    }
    if (args.customer_binding_changed !== undefined && args.customer_binding_changed !== null) {
      this.customer_binding_changed = new ttypes.CustomerBindingChanged(args.customer_binding_changed);
    }
  }
};
CustomerChange.prototype = {};
CustomerChange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer_created = new ttypes.CustomerCreated();
        this.customer_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer_deleted = new ttypes.CustomerDeleted();
        this.customer_deleted.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer_status_changed = new ttypes.CustomerStatusChanged();
        this.customer_status_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer_binding_changed = new ttypes.CustomerBindingChanged();
        this.customer_binding_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerChange.prototype.write = function(output) {
  output.writeStructBegin('CustomerChange');
  if (this.customer_created !== null && this.customer_created !== undefined) {
    output.writeFieldBegin('customer_created', Thrift.Type.STRUCT, 1);
    this.customer_created.write(output);
    output.writeFieldEnd();
  }
  if (this.customer_deleted !== null && this.customer_deleted !== undefined) {
    output.writeFieldBegin('customer_deleted', Thrift.Type.STRUCT, 2);
    this.customer_deleted.write(output);
    output.writeFieldEnd();
  }
  if (this.customer_status_changed !== null && this.customer_status_changed !== undefined) {
    output.writeFieldBegin('customer_status_changed', Thrift.Type.STRUCT, 3);
    this.customer_status_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.customer_binding_changed !== null && this.customer_binding_changed !== undefined) {
    output.writeFieldBegin('customer_binding_changed', Thrift.Type.STRUCT, 4);
    this.customer_binding_changed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerCreated = module.exports.CustomerCreated = function(args) {
  this.customer_id = null;
  this.owner_id = null;
  this.shop_id = null;
  this.metadata = null;
  this.contact_info = null;
  this.created_at = null;
  if (args) {
    if (args.customer_id !== undefined && args.customer_id !== null) {
      this.customer_id = args.customer_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customer_id is unset!');
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field owner_id is unset!');
    }
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new json_ttypes.Value(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.contact_info !== undefined && args.contact_info !== null) {
      this.contact_info = new domain_ttypes.ContactInfo(args.contact_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contact_info is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
  }
};
CustomerCreated.prototype = {};
CustomerCreated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.customer_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.owner_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new json_ttypes.Value();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact_info = new domain_ttypes.ContactInfo();
        this.contact_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerCreated.prototype.write = function(output) {
  output.writeStructBegin('CustomerCreated');
  if (this.customer_id !== null && this.customer_id !== undefined) {
    output.writeFieldBegin('customer_id', Thrift.Type.STRING, 2);
    output.writeString(this.customer_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.STRING, 3);
    output.writeString(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 4);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 5);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.contact_info !== null && this.contact_info !== undefined) {
    output.writeFieldBegin('contact_info', Thrift.Type.STRUCT, 6);
    this.contact_info.write(output);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 7);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerDeleted = module.exports.CustomerDeleted = function(args) {
};
CustomerDeleted.prototype = {};
CustomerDeleted.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerDeleted.prototype.write = function(output) {
  output.writeStructBegin('CustomerDeleted');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerStatusChanged = module.exports.CustomerStatusChanged = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.CustomerStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
CustomerStatusChanged.prototype = {};
CustomerStatusChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.CustomerStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerStatusChanged.prototype.write = function(output) {
  output.writeStructBegin('CustomerStatusChanged');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBindingChanged = module.exports.CustomerBindingChanged = function(args) {
  this.id = null;
  this.payload = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = new ttypes.CustomerBindingChangePayload(args.payload);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payload is unset!');
    }
  }
};
CustomerBindingChanged.prototype = {};
CustomerBindingChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.payload = new ttypes.CustomerBindingChangePayload();
        this.payload.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBindingChanged.prototype.write = function(output) {
  output.writeStructBegin('CustomerBindingChanged');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRUCT, 2);
    this.payload.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBindingParams = module.exports.CustomerBindingParams = function(args) {
  this.payment_resource = null;
  if (args) {
    if (args.payment_resource !== undefined && args.payment_resource !== null) {
      this.payment_resource = new domain_ttypes.DisposablePaymentResource(args.payment_resource);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_resource is unset!');
    }
  }
};
CustomerBindingParams.prototype = {};
CustomerBindingParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_resource = new domain_ttypes.DisposablePaymentResource();
        this.payment_resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBindingParams.prototype.write = function(output) {
  output.writeStructBegin('CustomerBindingParams');
  if (this.payment_resource !== null && this.payment_resource !== undefined) {
    output.writeFieldBegin('payment_resource', Thrift.Type.STRUCT, 1);
    this.payment_resource.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBinding = module.exports.CustomerBinding = function(args) {
  this.id = null;
  this.rec_payment_tool_id = null;
  this.payment_resource = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.rec_payment_tool_id !== undefined && args.rec_payment_tool_id !== null) {
      this.rec_payment_tool_id = args.rec_payment_tool_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rec_payment_tool_id is unset!');
    }
    if (args.payment_resource !== undefined && args.payment_resource !== null) {
      this.payment_resource = new domain_ttypes.DisposablePaymentResource(args.payment_resource);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_resource is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.CustomerBindingStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
CustomerBinding.prototype = {};
CustomerBinding.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rec_payment_tool_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_resource = new domain_ttypes.DisposablePaymentResource();
        this.payment_resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.CustomerBindingStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBinding.prototype.write = function(output) {
  output.writeStructBegin('CustomerBinding');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.rec_payment_tool_id !== null && this.rec_payment_tool_id !== undefined) {
    output.writeFieldBegin('rec_payment_tool_id', Thrift.Type.STRING, 2);
    output.writeString(this.rec_payment_tool_id);
    output.writeFieldEnd();
  }
  if (this.payment_resource !== null && this.payment_resource !== undefined) {
    output.writeFieldBegin('payment_resource', Thrift.Type.STRUCT, 3);
    this.payment_resource.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 4);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBindingStatus = module.exports.CustomerBindingStatus = function(args) {
  this.pending = null;
  this.succeeded = null;
  this.failed = null;
  if (args) {
    if (args.pending !== undefined && args.pending !== null) {
      this.pending = new ttypes.CustomerBindingPending(args.pending);
    }
    if (args.succeeded !== undefined && args.succeeded !== null) {
      this.succeeded = new ttypes.CustomerBindingSucceeded(args.succeeded);
    }
    if (args.failed !== undefined && args.failed !== null) {
      this.failed = new ttypes.CustomerBindingFailed(args.failed);
    }
  }
};
CustomerBindingStatus.prototype = {};
CustomerBindingStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending = new ttypes.CustomerBindingPending();
        this.pending.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.succeeded = new ttypes.CustomerBindingSucceeded();
        this.succeeded.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.failed = new ttypes.CustomerBindingFailed();
        this.failed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBindingStatus.prototype.write = function(output) {
  output.writeStructBegin('CustomerBindingStatus');
  if (this.pending !== null && this.pending !== undefined) {
    output.writeFieldBegin('pending', Thrift.Type.STRUCT, 1);
    this.pending.write(output);
    output.writeFieldEnd();
  }
  if (this.succeeded !== null && this.succeeded !== undefined) {
    output.writeFieldBegin('succeeded', Thrift.Type.STRUCT, 2);
    this.succeeded.write(output);
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.STRUCT, 3);
    this.failed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBindingPending = module.exports.CustomerBindingPending = function(args) {
};
CustomerBindingPending.prototype = {};
CustomerBindingPending.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBindingPending.prototype.write = function(output) {
  output.writeStructBegin('CustomerBindingPending');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBindingSucceeded = module.exports.CustomerBindingSucceeded = function(args) {
};
CustomerBindingSucceeded.prototype = {};
CustomerBindingSucceeded.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBindingSucceeded.prototype.write = function(output) {
  output.writeStructBegin('CustomerBindingSucceeded');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBindingFailed = module.exports.CustomerBindingFailed = function(args) {
  this.failure = null;
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = new domain_ttypes.OperationFailure(args.failure);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field failure is unset!');
    }
  }
};
CustomerBindingFailed.prototype = {};
CustomerBindingFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new domain_ttypes.OperationFailure();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBindingFailed.prototype.write = function(output) {
  output.writeStructBegin('CustomerBindingFailed');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBindingChangePayload = module.exports.CustomerBindingChangePayload = function(args) {
  this.started = null;
  this.status_changed = null;
  this.interaction_requested = null;
  if (args) {
    if (args.started !== undefined && args.started !== null) {
      this.started = new ttypes.CustomerBindingStarted(args.started);
    }
    if (args.status_changed !== undefined && args.status_changed !== null) {
      this.status_changed = new ttypes.CustomerBindingStatusChanged(args.status_changed);
    }
    if (args.interaction_requested !== undefined && args.interaction_requested !== null) {
      this.interaction_requested = new ttypes.CustomerBindingInteractionRequested(args.interaction_requested);
    }
  }
};
CustomerBindingChangePayload.prototype = {};
CustomerBindingChangePayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.started = new ttypes.CustomerBindingStarted();
        this.started.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status_changed = new ttypes.CustomerBindingStatusChanged();
        this.status_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.interaction_requested = new ttypes.CustomerBindingInteractionRequested();
        this.interaction_requested.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBindingChangePayload.prototype.write = function(output) {
  output.writeStructBegin('CustomerBindingChangePayload');
  if (this.started !== null && this.started !== undefined) {
    output.writeFieldBegin('started', Thrift.Type.STRUCT, 1);
    this.started.write(output);
    output.writeFieldEnd();
  }
  if (this.status_changed !== null && this.status_changed !== undefined) {
    output.writeFieldBegin('status_changed', Thrift.Type.STRUCT, 2);
    this.status_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.interaction_requested !== null && this.interaction_requested !== undefined) {
    output.writeFieldBegin('interaction_requested', Thrift.Type.STRUCT, 3);
    this.interaction_requested.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBindingStarted = module.exports.CustomerBindingStarted = function(args) {
  this.binding = null;
  if (args) {
    if (args.binding !== undefined && args.binding !== null) {
      this.binding = new ttypes.CustomerBinding(args.binding);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field binding is unset!');
    }
  }
};
CustomerBindingStarted.prototype = {};
CustomerBindingStarted.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.binding = new ttypes.CustomerBinding();
        this.binding.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBindingStarted.prototype.write = function(output) {
  output.writeStructBegin('CustomerBindingStarted');
  if (this.binding !== null && this.binding !== undefined) {
    output.writeFieldBegin('binding', Thrift.Type.STRUCT, 1);
    this.binding.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBindingStatusChanged = module.exports.CustomerBindingStatusChanged = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.CustomerBindingStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
CustomerBindingStatusChanged.prototype = {};
CustomerBindingStatusChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.CustomerBindingStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBindingStatusChanged.prototype.write = function(output) {
  output.writeStructBegin('CustomerBindingStatusChanged');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerBindingInteractionRequested = module.exports.CustomerBindingInteractionRequested = function(args) {
  this.interaction = null;
  if (args) {
    if (args.interaction !== undefined && args.interaction !== null) {
      this.interaction = new user_interaction_ttypes.UserInteraction(args.interaction);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field interaction is unset!');
    }
  }
};
CustomerBindingInteractionRequested.prototype = {};
CustomerBindingInteractionRequested.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.interaction = new user_interaction_ttypes.UserInteraction();
        this.interaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerBindingInteractionRequested.prototype.write = function(output) {
  output.writeStructBegin('CustomerBindingInteractionRequested');
  if (this.interaction !== null && this.interaction !== undefined) {
    output.writeFieldBegin('interaction', Thrift.Type.STRUCT, 1);
    this.interaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidCustomerStatus = module.exports.InvalidCustomerStatus = function(args) {
  Thrift.TException.call(this, "InvalidCustomerStatus")
  this.name = "InvalidCustomerStatus"
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.CustomerStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
Thrift.inherits(InvalidCustomerStatus, Thrift.TException);
InvalidCustomerStatus.prototype.name = 'InvalidCustomerStatus';
InvalidCustomerStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.CustomerStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidCustomerStatus.prototype.write = function(output) {
  output.writeStructBegin('InvalidCustomerStatus');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerNotFound = module.exports.CustomerNotFound = function(args) {
  Thrift.TException.call(this, "CustomerNotFound")
  this.name = "CustomerNotFound"
};
Thrift.inherits(CustomerNotFound, Thrift.TException);
CustomerNotFound.prototype.name = 'CustomerNotFound';
CustomerNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerNotFound.prototype.write = function(output) {
  output.writeStructBegin('CustomerNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidPaymentTool = module.exports.InvalidPaymentTool = function(args) {
  Thrift.TException.call(this, "InvalidPaymentTool")
  this.name = "InvalidPaymentTool"
};
Thrift.inherits(InvalidPaymentTool, Thrift.TException);
InvalidPaymentTool.prototype.name = 'InvalidPaymentTool';
InvalidPaymentTool.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPaymentTool.prototype.write = function(output) {
  output.writeStructBegin('InvalidPaymentTool');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentTool = module.exports.RecurrentPaymentTool = function(args) {
  this.id = null;
  this.shop_id = null;
  this.party_id = null;
  this.domain_revision = null;
  this.status = null;
  this.created_at = null;
  this.payment_resource = null;
  this.rec_token = null;
  this.route = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field party_id is unset!');
    }
    if (args.domain_revision !== undefined && args.domain_revision !== null) {
      this.domain_revision = args.domain_revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field domain_revision is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.RecurrentPaymentToolStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.payment_resource !== undefined && args.payment_resource !== null) {
      this.payment_resource = new domain_ttypes.DisposablePaymentResource(args.payment_resource);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_resource is unset!');
    }
    if (args.rec_token !== undefined && args.rec_token !== null) {
      this.rec_token = args.rec_token;
    }
    if (args.route !== undefined && args.route !== null) {
      this.route = new domain_ttypes.PaymentRoute(args.route);
    }
  }
};
RecurrentPaymentTool.prototype = {};
RecurrentPaymentTool.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.domain_revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.RecurrentPaymentToolStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_resource = new domain_ttypes.DisposablePaymentResource();
        this.payment_resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.rec_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.route = new domain_ttypes.PaymentRoute();
        this.route.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentTool.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentTool');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 2);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 3);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.domain_revision !== null && this.domain_revision !== undefined) {
    output.writeFieldBegin('domain_revision', Thrift.Type.I64, 4);
    output.writeI64(this.domain_revision);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 6);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 7);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.payment_resource !== null && this.payment_resource !== undefined) {
    output.writeFieldBegin('payment_resource', Thrift.Type.STRUCT, 8);
    this.payment_resource.write(output);
    output.writeFieldEnd();
  }
  if (this.rec_token !== null && this.rec_token !== undefined) {
    output.writeFieldBegin('rec_token', Thrift.Type.STRING, 9);
    output.writeString(this.rec_token);
    output.writeFieldEnd();
  }
  if (this.route !== null && this.route !== undefined) {
    output.writeFieldBegin('route', Thrift.Type.STRUCT, 10);
    this.route.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolParams = module.exports.RecurrentPaymentToolParams = function(args) {
  this.party_id = null;
  this.shop_id = null;
  this.payment_resource = null;
  if (args) {
    if (args.party_id !== undefined && args.party_id !== null) {
      this.party_id = args.party_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field party_id is unset!');
    }
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.payment_resource !== undefined && args.payment_resource !== null) {
      this.payment_resource = new domain_ttypes.DisposablePaymentResource(args.payment_resource);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payment_resource is unset!');
    }
  }
};
RecurrentPaymentToolParams.prototype = {};
RecurrentPaymentToolParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.party_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_resource = new domain_ttypes.DisposablePaymentResource();
        this.payment_resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolParams.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolParams');
  if (this.party_id !== null && this.party_id !== undefined) {
    output.writeFieldBegin('party_id', Thrift.Type.STRING, 1);
    output.writeString(this.party_id);
    output.writeFieldEnd();
  }
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 2);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.payment_resource !== null && this.payment_resource !== undefined) {
    output.writeFieldBegin('payment_resource', Thrift.Type.STRUCT, 3);
    this.payment_resource.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolCreated = module.exports.RecurrentPaymentToolCreated = function(args) {
};
RecurrentPaymentToolCreated.prototype = {};
RecurrentPaymentToolCreated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolCreated.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolCreated');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolAcquired = module.exports.RecurrentPaymentToolAcquired = function(args) {
};
RecurrentPaymentToolAcquired.prototype = {};
RecurrentPaymentToolAcquired.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolAcquired.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolAcquired');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolAbandoned = module.exports.RecurrentPaymentToolAbandoned = function(args) {
};
RecurrentPaymentToolAbandoned.prototype = {};
RecurrentPaymentToolAbandoned.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolAbandoned.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolAbandoned');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolFailed = module.exports.RecurrentPaymentToolFailed = function(args) {
  this.failure = null;
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = new domain_ttypes.OperationFailure(args.failure);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field failure is unset!');
    }
  }
};
RecurrentPaymentToolFailed.prototype = {};
RecurrentPaymentToolFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new domain_ttypes.OperationFailure();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolFailed.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolFailed');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolStatus = module.exports.RecurrentPaymentToolStatus = function(args) {
  this.created = null;
  this.acquired = null;
  this.abandoned = null;
  this.failed = null;
  if (args) {
    if (args.created !== undefined && args.created !== null) {
      this.created = new ttypes.RecurrentPaymentToolCreated(args.created);
    }
    if (args.acquired !== undefined && args.acquired !== null) {
      this.acquired = new ttypes.RecurrentPaymentToolAcquired(args.acquired);
    }
    if (args.abandoned !== undefined && args.abandoned !== null) {
      this.abandoned = new ttypes.RecurrentPaymentToolAbandoned(args.abandoned);
    }
    if (args.failed !== undefined && args.failed !== null) {
      this.failed = new ttypes.RecurrentPaymentToolFailed(args.failed);
    }
  }
};
RecurrentPaymentToolStatus.prototype = {};
RecurrentPaymentToolStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.created = new ttypes.RecurrentPaymentToolCreated();
        this.created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.acquired = new ttypes.RecurrentPaymentToolAcquired();
        this.acquired.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.abandoned = new ttypes.RecurrentPaymentToolAbandoned();
        this.abandoned.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.failed = new ttypes.RecurrentPaymentToolFailed();
        this.failed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolStatus.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolStatus');
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.STRUCT, 1);
    this.created.write(output);
    output.writeFieldEnd();
  }
  if (this.acquired !== null && this.acquired !== undefined) {
    output.writeFieldBegin('acquired', Thrift.Type.STRUCT, 2);
    this.acquired.write(output);
    output.writeFieldEnd();
  }
  if (this.abandoned !== null && this.abandoned !== undefined) {
    output.writeFieldBegin('abandoned', Thrift.Type.STRUCT, 3);
    this.abandoned.write(output);
    output.writeFieldEnd();
  }
  if (this.failed !== null && this.failed !== undefined) {
    output.writeFieldBegin('failed', Thrift.Type.STRUCT, 4);
    this.failed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolEvent = module.exports.RecurrentPaymentToolEvent = function(args) {
  this.id = null;
  this.created_at = null;
  this.source = null;
  this.payload = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field source is unset!');
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = Thrift.copyList(args.payload, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payload is unset!');
    }
  }
};
RecurrentPaymentToolEvent.prototype = {};
RecurrentPaymentToolEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.payload = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.RecurrentPaymentToolChange();
          elem86.read(input);
          this.payload.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolEvent.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolEvent');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 2);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 3);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.payload.length);
    for (var iter87 in this.payload)
    {
      if (this.payload.hasOwnProperty(iter87))
      {
        iter87 = this.payload[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolSessionChange = module.exports.RecurrentPaymentToolSessionChange = function(args) {
  this.payload = null;
  if (args) {
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = new ttypes.SessionChangePayload(args.payload);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payload is unset!');
    }
  }
};
RecurrentPaymentToolSessionChange.prototype = {};
RecurrentPaymentToolSessionChange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.payload = new ttypes.SessionChangePayload();
        this.payload.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolSessionChange.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolSessionChange');
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRUCT, 1);
    this.payload.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolChange = module.exports.RecurrentPaymentToolChange = function(args) {
  this.rec_payment_tool_created = null;
  this.rec_payment_tool_acquired = null;
  this.rec_payment_tool_abandoned = null;
  this.rec_payment_tool_failed = null;
  this.rec_payment_tool_session_changed = null;
  if (args) {
    if (args.rec_payment_tool_created !== undefined && args.rec_payment_tool_created !== null) {
      this.rec_payment_tool_created = new ttypes.RecurrentPaymentToolHasCreated(args.rec_payment_tool_created);
    }
    if (args.rec_payment_tool_acquired !== undefined && args.rec_payment_tool_acquired !== null) {
      this.rec_payment_tool_acquired = new ttypes.RecurrentPaymentToolHasAcquired(args.rec_payment_tool_acquired);
    }
    if (args.rec_payment_tool_abandoned !== undefined && args.rec_payment_tool_abandoned !== null) {
      this.rec_payment_tool_abandoned = new ttypes.RecurrentPaymentToolHasAbandoned(args.rec_payment_tool_abandoned);
    }
    if (args.rec_payment_tool_failed !== undefined && args.rec_payment_tool_failed !== null) {
      this.rec_payment_tool_failed = new ttypes.RecurrentPaymentToolHasFailed(args.rec_payment_tool_failed);
    }
    if (args.rec_payment_tool_session_changed !== undefined && args.rec_payment_tool_session_changed !== null) {
      this.rec_payment_tool_session_changed = new ttypes.RecurrentPaymentToolSessionChange(args.rec_payment_tool_session_changed);
    }
  }
};
RecurrentPaymentToolChange.prototype = {};
RecurrentPaymentToolChange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rec_payment_tool_created = new ttypes.RecurrentPaymentToolHasCreated();
        this.rec_payment_tool_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rec_payment_tool_acquired = new ttypes.RecurrentPaymentToolHasAcquired();
        this.rec_payment_tool_acquired.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.rec_payment_tool_abandoned = new ttypes.RecurrentPaymentToolHasAbandoned();
        this.rec_payment_tool_abandoned.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.rec_payment_tool_failed = new ttypes.RecurrentPaymentToolHasFailed();
        this.rec_payment_tool_failed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.rec_payment_tool_session_changed = new ttypes.RecurrentPaymentToolSessionChange();
        this.rec_payment_tool_session_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolChange.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolChange');
  if (this.rec_payment_tool_created !== null && this.rec_payment_tool_created !== undefined) {
    output.writeFieldBegin('rec_payment_tool_created', Thrift.Type.STRUCT, 1);
    this.rec_payment_tool_created.write(output);
    output.writeFieldEnd();
  }
  if (this.rec_payment_tool_acquired !== null && this.rec_payment_tool_acquired !== undefined) {
    output.writeFieldBegin('rec_payment_tool_acquired', Thrift.Type.STRUCT, 2);
    this.rec_payment_tool_acquired.write(output);
    output.writeFieldEnd();
  }
  if (this.rec_payment_tool_abandoned !== null && this.rec_payment_tool_abandoned !== undefined) {
    output.writeFieldBegin('rec_payment_tool_abandoned', Thrift.Type.STRUCT, 3);
    this.rec_payment_tool_abandoned.write(output);
    output.writeFieldEnd();
  }
  if (this.rec_payment_tool_failed !== null && this.rec_payment_tool_failed !== undefined) {
    output.writeFieldBegin('rec_payment_tool_failed', Thrift.Type.STRUCT, 4);
    this.rec_payment_tool_failed.write(output);
    output.writeFieldEnd();
  }
  if (this.rec_payment_tool_session_changed !== null && this.rec_payment_tool_session_changed !== undefined) {
    output.writeFieldBegin('rec_payment_tool_session_changed', Thrift.Type.STRUCT, 5);
    this.rec_payment_tool_session_changed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolHasCreated = module.exports.RecurrentPaymentToolHasCreated = function(args) {
  this.rec_payment_tool = null;
  this.risk_score = null;
  this.route = null;
  if (args) {
    if (args.rec_payment_tool !== undefined && args.rec_payment_tool !== null) {
      this.rec_payment_tool = new ttypes.RecurrentPaymentTool(args.rec_payment_tool);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rec_payment_tool is unset!');
    }
    if (args.risk_score !== undefined && args.risk_score !== null) {
      this.risk_score = args.risk_score;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field risk_score is unset!');
    }
    if (args.route !== undefined && args.route !== null) {
      this.route = new domain_ttypes.PaymentRoute(args.route);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field route is unset!');
    }
  }
};
RecurrentPaymentToolHasCreated.prototype = {};
RecurrentPaymentToolHasCreated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rec_payment_tool = new ttypes.RecurrentPaymentTool();
        this.rec_payment_tool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.risk_score = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.route = new domain_ttypes.PaymentRoute();
        this.route.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolHasCreated.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolHasCreated');
  if (this.rec_payment_tool !== null && this.rec_payment_tool !== undefined) {
    output.writeFieldBegin('rec_payment_tool', Thrift.Type.STRUCT, 1);
    this.rec_payment_tool.write(output);
    output.writeFieldEnd();
  }
  if (this.risk_score !== null && this.risk_score !== undefined) {
    output.writeFieldBegin('risk_score', Thrift.Type.I32, 2);
    output.writeI32(this.risk_score);
    output.writeFieldEnd();
  }
  if (this.route !== null && this.route !== undefined) {
    output.writeFieldBegin('route', Thrift.Type.STRUCT, 3);
    this.route.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolHasAcquired = module.exports.RecurrentPaymentToolHasAcquired = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
  }
};
RecurrentPaymentToolHasAcquired.prototype = {};
RecurrentPaymentToolHasAcquired.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolHasAcquired.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolHasAcquired');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolHasAbandoned = module.exports.RecurrentPaymentToolHasAbandoned = function(args) {
};
RecurrentPaymentToolHasAbandoned.prototype = {};
RecurrentPaymentToolHasAbandoned.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolHasAbandoned.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolHasAbandoned');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolHasFailed = module.exports.RecurrentPaymentToolHasFailed = function(args) {
  this.failure = null;
  if (args) {
    if (args.failure !== undefined && args.failure !== null) {
      this.failure = new domain_ttypes.OperationFailure(args.failure);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field failure is unset!');
    }
  }
};
RecurrentPaymentToolHasFailed.prototype = {};
RecurrentPaymentToolHasFailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failure = new domain_ttypes.OperationFailure();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolHasFailed.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolHasFailed');
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidBinding = module.exports.InvalidBinding = function(args) {
  Thrift.TException.call(this, "InvalidBinding")
  this.name = "InvalidBinding"
};
Thrift.inherits(InvalidBinding, Thrift.TException);
InvalidBinding.prototype.name = 'InvalidBinding';
InvalidBinding.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidBinding.prototype.write = function(output) {
  output.writeStructBegin('InvalidBinding');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BindingNotFound = module.exports.BindingNotFound = function(args) {
  Thrift.TException.call(this, "BindingNotFound")
  this.name = "BindingNotFound"
};
Thrift.inherits(BindingNotFound, Thrift.TException);
BindingNotFound.prototype.name = 'BindingNotFound';
BindingNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BindingNotFound.prototype.write = function(output) {
  output.writeStructBegin('BindingNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecurrentPaymentToolNotFound = module.exports.RecurrentPaymentToolNotFound = function(args) {
  Thrift.TException.call(this, "RecurrentPaymentToolNotFound")
  this.name = "RecurrentPaymentToolNotFound"
};
Thrift.inherits(RecurrentPaymentToolNotFound, Thrift.TException);
RecurrentPaymentToolNotFound.prototype.name = 'RecurrentPaymentToolNotFound';
RecurrentPaymentToolNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecurrentPaymentToolNotFound.prototype.write = function(output) {
  output.writeStructBegin('RecurrentPaymentToolNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidPaymentMethod = module.exports.InvalidPaymentMethod = function(args) {
  Thrift.TException.call(this, "InvalidPaymentMethod")
  this.name = "InvalidPaymentMethod"
};
Thrift.inherits(InvalidPaymentMethod, Thrift.TException);
InvalidPaymentMethod.prototype.name = 'InvalidPaymentMethod';
InvalidPaymentMethod.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPaymentMethod.prototype.write = function(output) {
  output.writeStructBegin('InvalidPaymentMethod');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidRecurrentPaymentToolStatus = module.exports.InvalidRecurrentPaymentToolStatus = function(args) {
  Thrift.TException.call(this, "InvalidRecurrentPaymentToolStatus")
  this.name = "InvalidRecurrentPaymentToolStatus"
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.RecurrentPaymentToolStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
Thrift.inherits(InvalidRecurrentPaymentToolStatus, Thrift.TException);
InvalidRecurrentPaymentToolStatus.prototype.name = 'InvalidRecurrentPaymentToolStatus';
InvalidRecurrentPaymentToolStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.RecurrentPaymentToolStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidRecurrentPaymentToolStatus.prototype.write = function(output) {
  output.writeStructBegin('InvalidRecurrentPaymentToolStatus');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoLastEvent = module.exports.NoLastEvent = function(args) {
  Thrift.TException.call(this, "NoLastEvent")
  this.name = "NoLastEvent"
};
Thrift.inherits(NoLastEvent, Thrift.TException);
NoLastEvent.prototype.name = 'NoLastEvent';
NoLastEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoLastEvent.prototype.write = function(output) {
  output.writeStructBegin('NoLastEvent');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Varset = module.exports.Varset = function(args) {
  this.category = null;
  this.currency = null;
  this.amount = null;
  this.payment_method = null;
  this.payout_method = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = new domain_ttypes.CategoryRef(args.category);
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = new domain_ttypes.CurrencyRef(args.currency);
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = new domain_ttypes.Cash(args.amount);
    }
    if (args.payment_method !== undefined && args.payment_method !== null) {
      this.payment_method = new domain_ttypes.PaymentMethodRef(args.payment_method);
    }
    if (args.payout_method !== undefined && args.payout_method !== null) {
      this.payout_method = new domain_ttypes.PayoutMethodRef(args.payout_method);
    }
  }
};
Varset.prototype = {};
Varset.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.category = new domain_ttypes.CategoryRef();
        this.category.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.currency = new domain_ttypes.CurrencyRef();
        this.currency.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.amount = new domain_ttypes.Cash();
        this.amount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_method = new domain_ttypes.PaymentMethodRef();
        this.payment_method.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_method = new domain_ttypes.PayoutMethodRef();
        this.payout_method.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Varset.prototype.write = function(output) {
  output.writeStructBegin('Varset');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRUCT, 1);
    this.category.write(output);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRUCT, 2);
    this.currency.write(output);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRUCT, 3);
    this.amount.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_method !== null && this.payment_method !== undefined) {
    output.writeFieldBegin('payment_method', Thrift.Type.STRUCT, 4);
    this.payment_method.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_method !== null && this.payout_method !== undefined) {
    output.writeFieldBegin('payout_method', Thrift.Type.STRUCT, 5);
    this.payout_method.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyParams = module.exports.PartyParams = function(args) {
  this.contact_info = null;
  if (args) {
    if (args.contact_info !== undefined && args.contact_info !== null) {
      this.contact_info = new domain_ttypes.PartyContactInfo(args.contact_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contact_info is unset!');
    }
  }
};
PartyParams.prototype = {};
PartyParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact_info = new domain_ttypes.PartyContactInfo();
        this.contact_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyParams.prototype.write = function(output) {
  output.writeStructBegin('PartyParams');
  if (this.contact_info !== null && this.contact_info !== undefined) {
    output.writeFieldBegin('contact_info', Thrift.Type.STRUCT, 1);
    this.contact_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutToolParams = module.exports.PayoutToolParams = function(args) {
  this.currency = null;
  this.tool_info = null;
  if (args) {
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = new domain_ttypes.CurrencyRef(args.currency);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currency is unset!');
    }
    if (args.tool_info !== undefined && args.tool_info !== null) {
      this.tool_info = new domain_ttypes.PayoutToolInfo(args.tool_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tool_info is unset!');
    }
  }
};
PayoutToolParams.prototype = {};
PayoutToolParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.currency = new domain_ttypes.CurrencyRef();
        this.currency.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tool_info = new domain_ttypes.PayoutToolInfo();
        this.tool_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutToolParams.prototype.write = function(output) {
  output.writeStructBegin('PayoutToolParams');
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRUCT, 1);
    this.currency.write(output);
    output.writeFieldEnd();
  }
  if (this.tool_info !== null && this.tool_info !== undefined) {
    output.writeFieldBegin('tool_info', Thrift.Type.STRUCT, 2);
    this.tool_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopParams = module.exports.ShopParams = function(args) {
  this.category = null;
  this.location = null;
  this.details = null;
  this.contract_id = null;
  this.payout_tool_id = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = new domain_ttypes.CategoryRef(args.category);
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new domain_ttypes.ShopLocation(args.location);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field location is unset!');
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = new domain_ttypes.ShopDetails(args.details);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field details is unset!');
    }
    if (args.contract_id !== undefined && args.contract_id !== null) {
      this.contract_id = args.contract_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contract_id is unset!');
    }
    if (args.payout_tool_id !== undefined && args.payout_tool_id !== null) {
      this.payout_tool_id = args.payout_tool_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payout_tool_id is unset!');
    }
  }
};
ShopParams.prototype = {};
ShopParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.category = new domain_ttypes.CategoryRef();
        this.category.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new domain_ttypes.ShopLocation();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.details = new domain_ttypes.ShopDetails();
        this.details.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contract_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.payout_tool_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopParams.prototype.write = function(output) {
  output.writeStructBegin('ShopParams');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRUCT, 1);
    this.category.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 6);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRUCT, 2);
    this.details.write(output);
    output.writeFieldEnd();
  }
  if (this.contract_id !== null && this.contract_id !== undefined) {
    output.writeFieldBegin('contract_id', Thrift.Type.STRING, 3);
    output.writeString(this.contract_id);
    output.writeFieldEnd();
  }
  if (this.payout_tool_id !== null && this.payout_tool_id !== undefined) {
    output.writeFieldBegin('payout_tool_id', Thrift.Type.STRING, 4);
    output.writeString(this.payout_tool_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopAccountParams = module.exports.ShopAccountParams = function(args) {
  this.currency = null;
  if (args) {
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = new domain_ttypes.CurrencyRef(args.currency);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currency is unset!');
    }
  }
};
ShopAccountParams.prototype = {};
ShopAccountParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.currency = new domain_ttypes.CurrencyRef();
        this.currency.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopAccountParams.prototype.write = function(output) {
  output.writeStructBegin('ShopAccountParams');
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRUCT, 1);
    this.currency.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractParams = module.exports.ContractParams = function(args) {
  this.contractor = null;
  this.template = null;
  this.payment_institution = null;
  if (args) {
    if (args.contractor !== undefined && args.contractor !== null) {
      this.contractor = new domain_ttypes.Contractor(args.contractor);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contractor is unset!');
    }
    if (args.template !== undefined && args.template !== null) {
      this.template = new domain_ttypes.ContractTemplateRef(args.template);
    }
    if (args.payment_institution !== undefined && args.payment_institution !== null) {
      this.payment_institution = new domain_ttypes.PaymentInstitutionRef(args.payment_institution);
    }
  }
};
ContractParams.prototype = {};
ContractParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.contractor = new domain_ttypes.Contractor();
        this.contractor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.template = new domain_ttypes.ContractTemplateRef();
        this.template.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.payment_institution = new domain_ttypes.PaymentInstitutionRef();
        this.payment_institution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractParams.prototype.write = function(output) {
  output.writeStructBegin('ContractParams');
  if (this.contractor !== null && this.contractor !== undefined) {
    output.writeFieldBegin('contractor', Thrift.Type.STRUCT, 1);
    this.contractor.write(output);
    output.writeFieldEnd();
  }
  if (this.template !== null && this.template !== undefined) {
    output.writeFieldBegin('template', Thrift.Type.STRUCT, 2);
    this.template.write(output);
    output.writeFieldEnd();
  }
  if (this.payment_institution !== null && this.payment_institution !== undefined) {
    output.writeFieldBegin('payment_institution', Thrift.Type.STRUCT, 3);
    this.payment_institution.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractAdjustmentParams = module.exports.ContractAdjustmentParams = function(args) {
  this.template = null;
  if (args) {
    if (args.template !== undefined && args.template !== null) {
      this.template = new domain_ttypes.ContractTemplateRef(args.template);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field template is unset!');
    }
  }
};
ContractAdjustmentParams.prototype = {};
ContractAdjustmentParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.template = new domain_ttypes.ContractTemplateRef();
        this.template.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractAdjustmentParams.prototype.write = function(output) {
  output.writeStructBegin('ContractAdjustmentParams');
  if (this.template !== null && this.template !== undefined) {
    output.writeFieldBegin('template', Thrift.Type.STRUCT, 1);
    this.template.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyModification = module.exports.PartyModification = function(args) {
  this.contract_modification = null;
  this.shop_modification = null;
  if (args) {
    if (args.contract_modification !== undefined && args.contract_modification !== null) {
      this.contract_modification = new ttypes.ContractModificationUnit(args.contract_modification);
    }
    if (args.shop_modification !== undefined && args.shop_modification !== null) {
      this.shop_modification = new ttypes.ShopModificationUnit(args.shop_modification);
    }
  }
};
PartyModification.prototype = {};
PartyModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.contract_modification = new ttypes.ContractModificationUnit();
        this.contract_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.shop_modification = new ttypes.ShopModificationUnit();
        this.shop_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyModification.prototype.write = function(output) {
  output.writeStructBegin('PartyModification');
  if (this.contract_modification !== null && this.contract_modification !== undefined) {
    output.writeFieldBegin('contract_modification', Thrift.Type.STRUCT, 4);
    this.contract_modification.write(output);
    output.writeFieldEnd();
  }
  if (this.shop_modification !== null && this.shop_modification !== undefined) {
    output.writeFieldBegin('shop_modification', Thrift.Type.STRUCT, 6);
    this.shop_modification.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractModificationUnit = module.exports.ContractModificationUnit = function(args) {
  this.id = null;
  this.modification = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.modification !== undefined && args.modification !== null) {
      this.modification = new ttypes.ContractModification(args.modification);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modification is unset!');
    }
  }
};
ContractModificationUnit.prototype = {};
ContractModificationUnit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modification = new ttypes.ContractModification();
        this.modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractModificationUnit.prototype.write = function(output) {
  output.writeStructBegin('ContractModificationUnit');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.modification !== null && this.modification !== undefined) {
    output.writeFieldBegin('modification', Thrift.Type.STRUCT, 2);
    this.modification.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractModification = module.exports.ContractModification = function(args) {
  this.creation = null;
  this.termination = null;
  this.adjustment_modification = null;
  this.payout_tool_modification = null;
  this.legal_agreement_binding = null;
  this.report_preferences_modification = null;
  if (args) {
    if (args.creation !== undefined && args.creation !== null) {
      this.creation = new ttypes.ContractParams(args.creation);
    }
    if (args.termination !== undefined && args.termination !== null) {
      this.termination = new ttypes.ContractTermination(args.termination);
    }
    if (args.adjustment_modification !== undefined && args.adjustment_modification !== null) {
      this.adjustment_modification = new ttypes.ContractAdjustmentModificationUnit(args.adjustment_modification);
    }
    if (args.payout_tool_modification !== undefined && args.payout_tool_modification !== null) {
      this.payout_tool_modification = new ttypes.PayoutToolModificationUnit(args.payout_tool_modification);
    }
    if (args.legal_agreement_binding !== undefined && args.legal_agreement_binding !== null) {
      this.legal_agreement_binding = new domain_ttypes.LegalAgreement(args.legal_agreement_binding);
    }
    if (args.report_preferences_modification !== undefined && args.report_preferences_modification !== null) {
      this.report_preferences_modification = new domain_ttypes.ReportPreferences(args.report_preferences_modification);
    }
  }
};
ContractModification.prototype = {};
ContractModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.creation = new ttypes.ContractParams();
        this.creation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.termination = new ttypes.ContractTermination();
        this.termination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.adjustment_modification = new ttypes.ContractAdjustmentModificationUnit();
        this.adjustment_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_tool_modification = new ttypes.PayoutToolModificationUnit();
        this.payout_tool_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.legal_agreement_binding = new domain_ttypes.LegalAgreement();
        this.legal_agreement_binding.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.report_preferences_modification = new domain_ttypes.ReportPreferences();
        this.report_preferences_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractModification.prototype.write = function(output) {
  output.writeStructBegin('ContractModification');
  if (this.creation !== null && this.creation !== undefined) {
    output.writeFieldBegin('creation', Thrift.Type.STRUCT, 1);
    this.creation.write(output);
    output.writeFieldEnd();
  }
  if (this.termination !== null && this.termination !== undefined) {
    output.writeFieldBegin('termination', Thrift.Type.STRUCT, 2);
    this.termination.write(output);
    output.writeFieldEnd();
  }
  if (this.adjustment_modification !== null && this.adjustment_modification !== undefined) {
    output.writeFieldBegin('adjustment_modification', Thrift.Type.STRUCT, 3);
    this.adjustment_modification.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_tool_modification !== null && this.payout_tool_modification !== undefined) {
    output.writeFieldBegin('payout_tool_modification', Thrift.Type.STRUCT, 4);
    this.payout_tool_modification.write(output);
    output.writeFieldEnd();
  }
  if (this.legal_agreement_binding !== null && this.legal_agreement_binding !== undefined) {
    output.writeFieldBegin('legal_agreement_binding', Thrift.Type.STRUCT, 5);
    this.legal_agreement_binding.write(output);
    output.writeFieldEnd();
  }
  if (this.report_preferences_modification !== null && this.report_preferences_modification !== undefined) {
    output.writeFieldBegin('report_preferences_modification', Thrift.Type.STRUCT, 6);
    this.report_preferences_modification.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractTermination = module.exports.ContractTermination = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
ContractTermination.prototype = {};
ContractTermination.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractTermination.prototype.write = function(output) {
  output.writeStructBegin('ContractTermination');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractAdjustmentModificationUnit = module.exports.ContractAdjustmentModificationUnit = function(args) {
  this.adjustment_id = null;
  this.modification = null;
  if (args) {
    if (args.adjustment_id !== undefined && args.adjustment_id !== null) {
      this.adjustment_id = args.adjustment_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field adjustment_id is unset!');
    }
    if (args.modification !== undefined && args.modification !== null) {
      this.modification = new ttypes.ContractAdjustmentModification(args.modification);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modification is unset!');
    }
  }
};
ContractAdjustmentModificationUnit.prototype = {};
ContractAdjustmentModificationUnit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.adjustment_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modification = new ttypes.ContractAdjustmentModification();
        this.modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractAdjustmentModificationUnit.prototype.write = function(output) {
  output.writeStructBegin('ContractAdjustmentModificationUnit');
  if (this.adjustment_id !== null && this.adjustment_id !== undefined) {
    output.writeFieldBegin('adjustment_id', Thrift.Type.STRING, 1);
    output.writeString(this.adjustment_id);
    output.writeFieldEnd();
  }
  if (this.modification !== null && this.modification !== undefined) {
    output.writeFieldBegin('modification', Thrift.Type.STRUCT, 2);
    this.modification.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractAdjustmentModification = module.exports.ContractAdjustmentModification = function(args) {
  this.creation = null;
  if (args) {
    if (args.creation !== undefined && args.creation !== null) {
      this.creation = new ttypes.ContractAdjustmentParams(args.creation);
    }
  }
};
ContractAdjustmentModification.prototype = {};
ContractAdjustmentModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.creation = new ttypes.ContractAdjustmentParams();
        this.creation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractAdjustmentModification.prototype.write = function(output) {
  output.writeStructBegin('ContractAdjustmentModification');
  if (this.creation !== null && this.creation !== undefined) {
    output.writeFieldBegin('creation', Thrift.Type.STRUCT, 1);
    this.creation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutToolModificationUnit = module.exports.PayoutToolModificationUnit = function(args) {
  this.payout_tool_id = null;
  this.modification = null;
  if (args) {
    if (args.payout_tool_id !== undefined && args.payout_tool_id !== null) {
      this.payout_tool_id = args.payout_tool_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payout_tool_id is unset!');
    }
    if (args.modification !== undefined && args.modification !== null) {
      this.modification = new ttypes.PayoutToolModification(args.modification);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modification is unset!');
    }
  }
};
PayoutToolModificationUnit.prototype = {};
PayoutToolModificationUnit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.payout_tool_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modification = new ttypes.PayoutToolModification();
        this.modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutToolModificationUnit.prototype.write = function(output) {
  output.writeStructBegin('PayoutToolModificationUnit');
  if (this.payout_tool_id !== null && this.payout_tool_id !== undefined) {
    output.writeFieldBegin('payout_tool_id', Thrift.Type.STRING, 1);
    output.writeString(this.payout_tool_id);
    output.writeFieldEnd();
  }
  if (this.modification !== null && this.modification !== undefined) {
    output.writeFieldBegin('modification', Thrift.Type.STRUCT, 2);
    this.modification.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutToolModification = module.exports.PayoutToolModification = function(args) {
  this.creation = null;
  if (args) {
    if (args.creation !== undefined && args.creation !== null) {
      this.creation = new ttypes.PayoutToolParams(args.creation);
    }
  }
};
PayoutToolModification.prototype = {};
PayoutToolModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.creation = new ttypes.PayoutToolParams();
        this.creation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutToolModification.prototype.write = function(output) {
  output.writeStructBegin('PayoutToolModification');
  if (this.creation !== null && this.creation !== undefined) {
    output.writeFieldBegin('creation', Thrift.Type.STRUCT, 1);
    this.creation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopModificationUnit = module.exports.ShopModificationUnit = function(args) {
  this.id = null;
  this.modification = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.modification !== undefined && args.modification !== null) {
      this.modification = new ttypes.ShopModification(args.modification);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modification is unset!');
    }
  }
};
ShopModificationUnit.prototype = {};
ShopModificationUnit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modification = new ttypes.ShopModification();
        this.modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopModificationUnit.prototype.write = function(output) {
  output.writeStructBegin('ShopModificationUnit');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.modification !== null && this.modification !== undefined) {
    output.writeFieldBegin('modification', Thrift.Type.STRUCT, 2);
    this.modification.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopModification = module.exports.ShopModification = function(args) {
  this.creation = null;
  this.category_modification = null;
  this.details_modification = null;
  this.contract_modification = null;
  this.payout_tool_modification = null;
  this.location_modification = null;
  this.shop_account_creation = null;
  this.payout_schedule_modification = null;
  this.proxy_modification = null;
  if (args) {
    if (args.creation !== undefined && args.creation !== null) {
      this.creation = new ttypes.ShopParams(args.creation);
    }
    if (args.category_modification !== undefined && args.category_modification !== null) {
      this.category_modification = new domain_ttypes.CategoryRef(args.category_modification);
    }
    if (args.details_modification !== undefined && args.details_modification !== null) {
      this.details_modification = new domain_ttypes.ShopDetails(args.details_modification);
    }
    if (args.contract_modification !== undefined && args.contract_modification !== null) {
      this.contract_modification = new ttypes.ShopContractModification(args.contract_modification);
    }
    if (args.payout_tool_modification !== undefined && args.payout_tool_modification !== null) {
      this.payout_tool_modification = args.payout_tool_modification;
    }
    if (args.location_modification !== undefined && args.location_modification !== null) {
      this.location_modification = new domain_ttypes.ShopLocation(args.location_modification);
    }
    if (args.shop_account_creation !== undefined && args.shop_account_creation !== null) {
      this.shop_account_creation = new ttypes.ShopAccountParams(args.shop_account_creation);
    }
    if (args.payout_schedule_modification !== undefined && args.payout_schedule_modification !== null) {
      this.payout_schedule_modification = new ttypes.ScheduleModification(args.payout_schedule_modification);
    }
    if (args.proxy_modification !== undefined && args.proxy_modification !== null) {
      this.proxy_modification = new ttypes.ProxyModification(args.proxy_modification);
    }
  }
};
ShopModification.prototype = {};
ShopModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.creation = new ttypes.ShopParams();
        this.creation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.category_modification = new domain_ttypes.CategoryRef();
        this.category_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.details_modification = new domain_ttypes.ShopDetails();
        this.details_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.contract_modification = new ttypes.ShopContractModification();
        this.contract_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.payout_tool_modification = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.location_modification = new domain_ttypes.ShopLocation();
        this.location_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.shop_account_creation = new ttypes.ShopAccountParams();
        this.shop_account_creation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_schedule_modification = new ttypes.ScheduleModification();
        this.payout_schedule_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxy_modification = new ttypes.ProxyModification();
        this.proxy_modification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopModification.prototype.write = function(output) {
  output.writeStructBegin('ShopModification');
  if (this.creation !== null && this.creation !== undefined) {
    output.writeFieldBegin('creation', Thrift.Type.STRUCT, 5);
    this.creation.write(output);
    output.writeFieldEnd();
  }
  if (this.category_modification !== null && this.category_modification !== undefined) {
    output.writeFieldBegin('category_modification', Thrift.Type.STRUCT, 6);
    this.category_modification.write(output);
    output.writeFieldEnd();
  }
  if (this.details_modification !== null && this.details_modification !== undefined) {
    output.writeFieldBegin('details_modification', Thrift.Type.STRUCT, 7);
    this.details_modification.write(output);
    output.writeFieldEnd();
  }
  if (this.contract_modification !== null && this.contract_modification !== undefined) {
    output.writeFieldBegin('contract_modification', Thrift.Type.STRUCT, 8);
    this.contract_modification.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_tool_modification !== null && this.payout_tool_modification !== undefined) {
    output.writeFieldBegin('payout_tool_modification', Thrift.Type.STRING, 9);
    output.writeString(this.payout_tool_modification);
    output.writeFieldEnd();
  }
  if (this.location_modification !== null && this.location_modification !== undefined) {
    output.writeFieldBegin('location_modification', Thrift.Type.STRUCT, 11);
    this.location_modification.write(output);
    output.writeFieldEnd();
  }
  if (this.shop_account_creation !== null && this.shop_account_creation !== undefined) {
    output.writeFieldBegin('shop_account_creation', Thrift.Type.STRUCT, 12);
    this.shop_account_creation.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_schedule_modification !== null && this.payout_schedule_modification !== undefined) {
    output.writeFieldBegin('payout_schedule_modification', Thrift.Type.STRUCT, 13);
    this.payout_schedule_modification.write(output);
    output.writeFieldEnd();
  }
  if (this.proxy_modification !== null && this.proxy_modification !== undefined) {
    output.writeFieldBegin('proxy_modification', Thrift.Type.STRUCT, 10);
    this.proxy_modification.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopContractModification = module.exports.ShopContractModification = function(args) {
  this.contract_id = null;
  this.payout_tool_id = null;
  if (args) {
    if (args.contract_id !== undefined && args.contract_id !== null) {
      this.contract_id = args.contract_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contract_id is unset!');
    }
    if (args.payout_tool_id !== undefined && args.payout_tool_id !== null) {
      this.payout_tool_id = args.payout_tool_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payout_tool_id is unset!');
    }
  }
};
ShopContractModification.prototype = {};
ShopContractModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contract_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.payout_tool_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopContractModification.prototype.write = function(output) {
  output.writeStructBegin('ShopContractModification');
  if (this.contract_id !== null && this.contract_id !== undefined) {
    output.writeFieldBegin('contract_id', Thrift.Type.STRING, 1);
    output.writeString(this.contract_id);
    output.writeFieldEnd();
  }
  if (this.payout_tool_id !== null && this.payout_tool_id !== undefined) {
    output.writeFieldBegin('payout_tool_id', Thrift.Type.STRING, 2);
    output.writeString(this.payout_tool_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScheduleModification = module.exports.ScheduleModification = function(args) {
  this.schedule = null;
  if (args) {
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = new domain_ttypes.BusinessScheduleRef(args.schedule);
    }
  }
};
ScheduleModification.prototype = {};
ScheduleModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedule = new domain_ttypes.BusinessScheduleRef();
        this.schedule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScheduleModification.prototype.write = function(output) {
  output.writeStructBegin('ScheduleModification');
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRUCT, 1);
    this.schedule.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProxyModification = module.exports.ProxyModification = function(args) {
  this.proxy = null;
  if (args) {
    if (args.proxy !== undefined && args.proxy !== null) {
      this.proxy = new domain_ttypes.Proxy(args.proxy);
    }
  }
};
ProxyModification.prototype = {};
ProxyModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxy = new domain_ttypes.Proxy();
        this.proxy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProxyModification.prototype.write = function(output) {
  output.writeStructBegin('ProxyModification');
  if (this.proxy !== null && this.proxy !== undefined) {
    output.writeFieldBegin('proxy', Thrift.Type.STRUCT, 1);
    this.proxy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Claim = module.exports.Claim = function(args) {
  this.id = null;
  this.status = null;
  this.changeset = null;
  this.revision = null;
  this.created_at = null;
  this.updated_at = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.ClaimStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.changeset !== undefined && args.changeset !== null) {
      this.changeset = Thrift.copyList(args.changeset, [ttypes.PartyModification]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field changeset is unset!');
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field revision is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
    if (args.updated_at !== undefined && args.updated_at !== null) {
      this.updated_at = args.updated_at;
    }
  }
};
Claim.prototype = {};
Claim.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.ClaimStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.changeset = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.PartyModification();
          elem94.read(input);
          this.changeset.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.revision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.updated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Claim.prototype.write = function(output) {
  output.writeStructBegin('Claim');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.changeset !== null && this.changeset !== undefined) {
    output.writeFieldBegin('changeset', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.changeset.length);
    for (var iter95 in this.changeset)
    {
      if (this.changeset.hasOwnProperty(iter95))
      {
        iter95 = this.changeset[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I32, 4);
    output.writeI32(this.revision);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 5);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  if (this.updated_at !== null && this.updated_at !== undefined) {
    output.writeFieldBegin('updated_at', Thrift.Type.STRING, 6);
    output.writeString(this.updated_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClaimStatus = module.exports.ClaimStatus = function(args) {
  this.pending = null;
  this.accepted = null;
  this.denied = null;
  this.revoked = null;
  if (args) {
    if (args.pending !== undefined && args.pending !== null) {
      this.pending = new ttypes.ClaimPending(args.pending);
    }
    if (args.accepted !== undefined && args.accepted !== null) {
      this.accepted = new ttypes.ClaimAccepted(args.accepted);
    }
    if (args.denied !== undefined && args.denied !== null) {
      this.denied = new ttypes.ClaimDenied(args.denied);
    }
    if (args.revoked !== undefined && args.revoked !== null) {
      this.revoked = new ttypes.ClaimRevoked(args.revoked);
    }
  }
};
ClaimStatus.prototype = {};
ClaimStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pending = new ttypes.ClaimPending();
        this.pending.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.accepted = new ttypes.ClaimAccepted();
        this.accepted.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.denied = new ttypes.ClaimDenied();
        this.denied.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.revoked = new ttypes.ClaimRevoked();
        this.revoked.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClaimStatus.prototype.write = function(output) {
  output.writeStructBegin('ClaimStatus');
  if (this.pending !== null && this.pending !== undefined) {
    output.writeFieldBegin('pending', Thrift.Type.STRUCT, 1);
    this.pending.write(output);
    output.writeFieldEnd();
  }
  if (this.accepted !== null && this.accepted !== undefined) {
    output.writeFieldBegin('accepted', Thrift.Type.STRUCT, 2);
    this.accepted.write(output);
    output.writeFieldEnd();
  }
  if (this.denied !== null && this.denied !== undefined) {
    output.writeFieldBegin('denied', Thrift.Type.STRUCT, 3);
    this.denied.write(output);
    output.writeFieldEnd();
  }
  if (this.revoked !== null && this.revoked !== undefined) {
    output.writeFieldBegin('revoked', Thrift.Type.STRUCT, 4);
    this.revoked.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClaimPending = module.exports.ClaimPending = function(args) {
};
ClaimPending.prototype = {};
ClaimPending.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClaimPending.prototype.write = function(output) {
  output.writeStructBegin('ClaimPending');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClaimAccepted = module.exports.ClaimAccepted = function(args) {
  this.effects = null;
  if (args) {
    if (args.effects !== undefined && args.effects !== null) {
      this.effects = Thrift.copyList(args.effects, [null]);
    }
  }
};
ClaimAccepted.prototype = {};
ClaimAccepted.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.effects = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.ClaimEffect();
          elem102.read(input);
          this.effects.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClaimAccepted.prototype.write = function(output) {
  output.writeStructBegin('ClaimAccepted');
  if (this.effects !== null && this.effects !== undefined) {
    output.writeFieldBegin('effects', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.effects.length);
    for (var iter103 in this.effects)
    {
      if (this.effects.hasOwnProperty(iter103))
      {
        iter103 = this.effects[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClaimDenied = module.exports.ClaimDenied = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
ClaimDenied.prototype = {};
ClaimDenied.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClaimDenied.prototype.write = function(output) {
  output.writeStructBegin('ClaimDenied');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClaimRevoked = module.exports.ClaimRevoked = function(args) {
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
ClaimRevoked.prototype = {};
ClaimRevoked.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClaimRevoked.prototype.write = function(output) {
  output.writeStructBegin('ClaimRevoked');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClaimEffect = module.exports.ClaimEffect = function(args) {
  this.contract_effect = null;
  this.shop_effect = null;
  if (args) {
    if (args.contract_effect !== undefined && args.contract_effect !== null) {
      this.contract_effect = new ttypes.ContractEffectUnit(args.contract_effect);
    }
    if (args.shop_effect !== undefined && args.shop_effect !== null) {
      this.shop_effect = new ttypes.ShopEffectUnit(args.shop_effect);
    }
  }
};
ClaimEffect.prototype = {};
ClaimEffect.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.contract_effect = new ttypes.ContractEffectUnit();
        this.contract_effect.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.shop_effect = new ttypes.ShopEffectUnit();
        this.shop_effect.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClaimEffect.prototype.write = function(output) {
  output.writeStructBegin('ClaimEffect');
  if (this.contract_effect !== null && this.contract_effect !== undefined) {
    output.writeFieldBegin('contract_effect', Thrift.Type.STRUCT, 2);
    this.contract_effect.write(output);
    output.writeFieldEnd();
  }
  if (this.shop_effect !== null && this.shop_effect !== undefined) {
    output.writeFieldBegin('shop_effect', Thrift.Type.STRUCT, 3);
    this.shop_effect.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractEffectUnit = module.exports.ContractEffectUnit = function(args) {
  this.contract_id = null;
  this.effect = null;
  if (args) {
    if (args.contract_id !== undefined && args.contract_id !== null) {
      this.contract_id = args.contract_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contract_id is unset!');
    }
    if (args.effect !== undefined && args.effect !== null) {
      this.effect = new ttypes.ContractEffect(args.effect);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field effect is unset!');
    }
  }
};
ContractEffectUnit.prototype = {};
ContractEffectUnit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contract_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.effect = new ttypes.ContractEffect();
        this.effect.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractEffectUnit.prototype.write = function(output) {
  output.writeStructBegin('ContractEffectUnit');
  if (this.contract_id !== null && this.contract_id !== undefined) {
    output.writeFieldBegin('contract_id', Thrift.Type.STRING, 1);
    output.writeString(this.contract_id);
    output.writeFieldEnd();
  }
  if (this.effect !== null && this.effect !== undefined) {
    output.writeFieldBegin('effect', Thrift.Type.STRUCT, 2);
    this.effect.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractEffect = module.exports.ContractEffect = function(args) {
  this.created = null;
  this.status_changed = null;
  this.adjustment_created = null;
  this.legal_agreement_bound = null;
  this.payout_tool_created = null;
  this.report_preferences_changed = null;
  if (args) {
    if (args.created !== undefined && args.created !== null) {
      this.created = new domain_ttypes.Contract(args.created);
    }
    if (args.status_changed !== undefined && args.status_changed !== null) {
      this.status_changed = new domain_ttypes.ContractStatus(args.status_changed);
    }
    if (args.adjustment_created !== undefined && args.adjustment_created !== null) {
      this.adjustment_created = new domain_ttypes.ContractAdjustment(args.adjustment_created);
    }
    if (args.legal_agreement_bound !== undefined && args.legal_agreement_bound !== null) {
      this.legal_agreement_bound = new domain_ttypes.LegalAgreement(args.legal_agreement_bound);
    }
    if (args.payout_tool_created !== undefined && args.payout_tool_created !== null) {
      this.payout_tool_created = new domain_ttypes.PayoutTool(args.payout_tool_created);
    }
    if (args.report_preferences_changed !== undefined && args.report_preferences_changed !== null) {
      this.report_preferences_changed = new domain_ttypes.ReportPreferences(args.report_preferences_changed);
    }
  }
};
ContractEffect.prototype = {};
ContractEffect.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.created = new domain_ttypes.Contract();
        this.created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status_changed = new domain_ttypes.ContractStatus();
        this.status_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.adjustment_created = new domain_ttypes.ContractAdjustment();
        this.adjustment_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.legal_agreement_bound = new domain_ttypes.LegalAgreement();
        this.legal_agreement_bound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_tool_created = new domain_ttypes.PayoutTool();
        this.payout_tool_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.report_preferences_changed = new domain_ttypes.ReportPreferences();
        this.report_preferences_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractEffect.prototype.write = function(output) {
  output.writeStructBegin('ContractEffect');
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.STRUCT, 1);
    this.created.write(output);
    output.writeFieldEnd();
  }
  if (this.status_changed !== null && this.status_changed !== undefined) {
    output.writeFieldBegin('status_changed', Thrift.Type.STRUCT, 2);
    this.status_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.adjustment_created !== null && this.adjustment_created !== undefined) {
    output.writeFieldBegin('adjustment_created', Thrift.Type.STRUCT, 3);
    this.adjustment_created.write(output);
    output.writeFieldEnd();
  }
  if (this.legal_agreement_bound !== null && this.legal_agreement_bound !== undefined) {
    output.writeFieldBegin('legal_agreement_bound', Thrift.Type.STRUCT, 5);
    this.legal_agreement_bound.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_tool_created !== null && this.payout_tool_created !== undefined) {
    output.writeFieldBegin('payout_tool_created', Thrift.Type.STRUCT, 4);
    this.payout_tool_created.write(output);
    output.writeFieldEnd();
  }
  if (this.report_preferences_changed !== null && this.report_preferences_changed !== undefined) {
    output.writeFieldBegin('report_preferences_changed', Thrift.Type.STRUCT, 6);
    this.report_preferences_changed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopEffectUnit = module.exports.ShopEffectUnit = function(args) {
  this.shop_id = null;
  this.effect = null;
  if (args) {
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.effect !== undefined && args.effect !== null) {
      this.effect = new ttypes.ShopEffect(args.effect);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field effect is unset!');
    }
  }
};
ShopEffectUnit.prototype = {};
ShopEffectUnit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.effect = new ttypes.ShopEffect();
        this.effect.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopEffectUnit.prototype.write = function(output) {
  output.writeStructBegin('ShopEffectUnit');
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 1);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.effect !== null && this.effect !== undefined) {
    output.writeFieldBegin('effect', Thrift.Type.STRUCT, 2);
    this.effect.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopEffect = module.exports.ShopEffect = function(args) {
  this.created = null;
  this.category_changed = null;
  this.details_changed = null;
  this.contract_changed = null;
  this.payout_tool_changed = null;
  this.location_changed = null;
  this.account_created = null;
  this.payout_schedule_changed = null;
  this.proxy_changed = null;
  if (args) {
    if (args.created !== undefined && args.created !== null) {
      this.created = new domain_ttypes.Shop(args.created);
    }
    if (args.category_changed !== undefined && args.category_changed !== null) {
      this.category_changed = new domain_ttypes.CategoryRef(args.category_changed);
    }
    if (args.details_changed !== undefined && args.details_changed !== null) {
      this.details_changed = new domain_ttypes.ShopDetails(args.details_changed);
    }
    if (args.contract_changed !== undefined && args.contract_changed !== null) {
      this.contract_changed = new ttypes.ShopContractChanged(args.contract_changed);
    }
    if (args.payout_tool_changed !== undefined && args.payout_tool_changed !== null) {
      this.payout_tool_changed = args.payout_tool_changed;
    }
    if (args.location_changed !== undefined && args.location_changed !== null) {
      this.location_changed = new domain_ttypes.ShopLocation(args.location_changed);
    }
    if (args.account_created !== undefined && args.account_created !== null) {
      this.account_created = new domain_ttypes.ShopAccount(args.account_created);
    }
    if (args.payout_schedule_changed !== undefined && args.payout_schedule_changed !== null) {
      this.payout_schedule_changed = new ttypes.ScheduleChanged(args.payout_schedule_changed);
    }
    if (args.proxy_changed !== undefined && args.proxy_changed !== null) {
      this.proxy_changed = new ttypes.ShopProxyChanged(args.proxy_changed);
    }
  }
};
ShopEffect.prototype = {};
ShopEffect.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.created = new domain_ttypes.Shop();
        this.created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.category_changed = new domain_ttypes.CategoryRef();
        this.category_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.details_changed = new domain_ttypes.ShopDetails();
        this.details_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.contract_changed = new ttypes.ShopContractChanged();
        this.contract_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.payout_tool_changed = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.location_changed = new domain_ttypes.ShopLocation();
        this.location_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.account_created = new domain_ttypes.ShopAccount();
        this.account_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_schedule_changed = new ttypes.ScheduleChanged();
        this.payout_schedule_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxy_changed = new ttypes.ShopProxyChanged();
        this.proxy_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopEffect.prototype.write = function(output) {
  output.writeStructBegin('ShopEffect');
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.STRUCT, 1);
    this.created.write(output);
    output.writeFieldEnd();
  }
  if (this.category_changed !== null && this.category_changed !== undefined) {
    output.writeFieldBegin('category_changed', Thrift.Type.STRUCT, 2);
    this.category_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.details_changed !== null && this.details_changed !== undefined) {
    output.writeFieldBegin('details_changed', Thrift.Type.STRUCT, 3);
    this.details_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.contract_changed !== null && this.contract_changed !== undefined) {
    output.writeFieldBegin('contract_changed', Thrift.Type.STRUCT, 4);
    this.contract_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_tool_changed !== null && this.payout_tool_changed !== undefined) {
    output.writeFieldBegin('payout_tool_changed', Thrift.Type.STRING, 5);
    output.writeString(this.payout_tool_changed);
    output.writeFieldEnd();
  }
  if (this.location_changed !== null && this.location_changed !== undefined) {
    output.writeFieldBegin('location_changed', Thrift.Type.STRUCT, 7);
    this.location_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.account_created !== null && this.account_created !== undefined) {
    output.writeFieldBegin('account_created', Thrift.Type.STRUCT, 8);
    this.account_created.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_schedule_changed !== null && this.payout_schedule_changed !== undefined) {
    output.writeFieldBegin('payout_schedule_changed', Thrift.Type.STRUCT, 9);
    this.payout_schedule_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.proxy_changed !== null && this.proxy_changed !== undefined) {
    output.writeFieldBegin('proxy_changed', Thrift.Type.STRUCT, 6);
    this.proxy_changed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopContractChanged = module.exports.ShopContractChanged = function(args) {
  this.contract_id = null;
  this.payout_tool_id = null;
  if (args) {
    if (args.contract_id !== undefined && args.contract_id !== null) {
      this.contract_id = args.contract_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contract_id is unset!');
    }
    if (args.payout_tool_id !== undefined && args.payout_tool_id !== null) {
      this.payout_tool_id = args.payout_tool_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field payout_tool_id is unset!');
    }
  }
};
ShopContractChanged.prototype = {};
ShopContractChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contract_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.payout_tool_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopContractChanged.prototype.write = function(output) {
  output.writeStructBegin('ShopContractChanged');
  if (this.contract_id !== null && this.contract_id !== undefined) {
    output.writeFieldBegin('contract_id', Thrift.Type.STRING, 1);
    output.writeString(this.contract_id);
    output.writeFieldEnd();
  }
  if (this.payout_tool_id !== null && this.payout_tool_id !== undefined) {
    output.writeFieldBegin('payout_tool_id', Thrift.Type.STRING, 2);
    output.writeString(this.payout_tool_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScheduleChanged = module.exports.ScheduleChanged = function(args) {
  this.schedule = null;
  if (args) {
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = new domain_ttypes.BusinessScheduleRef(args.schedule);
    }
  }
};
ScheduleChanged.prototype = {};
ScheduleChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedule = new domain_ttypes.BusinessScheduleRef();
        this.schedule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScheduleChanged.prototype.write = function(output) {
  output.writeStructBegin('ScheduleChanged');
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRUCT, 1);
    this.schedule.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopProxyChanged = module.exports.ShopProxyChanged = function(args) {
  this.proxy = null;
  if (args) {
    if (args.proxy !== undefined && args.proxy !== null) {
      this.proxy = new domain_ttypes.Proxy(args.proxy);
    }
  }
};
ShopProxyChanged.prototype = {};
ShopProxyChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxy = new domain_ttypes.Proxy();
        this.proxy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopProxyChanged.prototype.write = function(output) {
  output.writeStructBegin('ShopProxyChanged');
  if (this.proxy !== null && this.proxy !== undefined) {
    output.writeFieldBegin('proxy', Thrift.Type.STRUCT, 1);
    this.proxy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccountState = module.exports.AccountState = function(args) {
  this.account_id = null;
  this.own_amount = null;
  this.available_amount = null;
  this.currency = null;
  if (args) {
    if (args.account_id !== undefined && args.account_id !== null) {
      this.account_id = args.account_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field account_id is unset!');
    }
    if (args.own_amount !== undefined && args.own_amount !== null) {
      this.own_amount = args.own_amount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field own_amount is unset!');
    }
    if (args.available_amount !== undefined && args.available_amount !== null) {
      this.available_amount = args.available_amount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field available_amount is unset!');
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = new domain_ttypes.Currency(args.currency);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currency is unset!');
    }
  }
};
AccountState.prototype = {};
AccountState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.account_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.own_amount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.available_amount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.currency = new domain_ttypes.Currency();
        this.currency.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountState.prototype.write = function(output) {
  output.writeStructBegin('AccountState');
  if (this.account_id !== null && this.account_id !== undefined) {
    output.writeFieldBegin('account_id', Thrift.Type.I64, 1);
    output.writeI64(this.account_id);
    output.writeFieldEnd();
  }
  if (this.own_amount !== null && this.own_amount !== undefined) {
    output.writeFieldBegin('own_amount', Thrift.Type.I64, 2);
    output.writeI64(this.own_amount);
    output.writeFieldEnd();
  }
  if (this.available_amount !== null && this.available_amount !== undefined) {
    output.writeFieldBegin('available_amount', Thrift.Type.I64, 3);
    output.writeI64(this.available_amount);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRUCT, 4);
    this.currency.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyChange = module.exports.PartyChange = function(args) {
  this.party_created = null;
  this.party_blocking = null;
  this.party_suspension = null;
  this.shop_blocking = null;
  this.shop_suspension = null;
  this.claim_created = null;
  this.claim_status_changed = null;
  this.claim_updated = null;
  this.party_meta_set = null;
  this.party_meta_removed = null;
  this.revision_changed = null;
  if (args) {
    if (args.party_created !== undefined && args.party_created !== null) {
      this.party_created = new ttypes.PartyCreated(args.party_created);
    }
    if (args.party_blocking !== undefined && args.party_blocking !== null) {
      this.party_blocking = new domain_ttypes.Blocking(args.party_blocking);
    }
    if (args.party_suspension !== undefined && args.party_suspension !== null) {
      this.party_suspension = new domain_ttypes.Suspension(args.party_suspension);
    }
    if (args.shop_blocking !== undefined && args.shop_blocking !== null) {
      this.shop_blocking = new ttypes.ShopBlocking(args.shop_blocking);
    }
    if (args.shop_suspension !== undefined && args.shop_suspension !== null) {
      this.shop_suspension = new ttypes.ShopSuspension(args.shop_suspension);
    }
    if (args.claim_created !== undefined && args.claim_created !== null) {
      this.claim_created = new ttypes.Claim(args.claim_created);
    }
    if (args.claim_status_changed !== undefined && args.claim_status_changed !== null) {
      this.claim_status_changed = new ttypes.ClaimStatusChanged(args.claim_status_changed);
    }
    if (args.claim_updated !== undefined && args.claim_updated !== null) {
      this.claim_updated = new ttypes.ClaimUpdated(args.claim_updated);
    }
    if (args.party_meta_set !== undefined && args.party_meta_set !== null) {
      this.party_meta_set = new ttypes.PartyMetaSet(args.party_meta_set);
    }
    if (args.party_meta_removed !== undefined && args.party_meta_removed !== null) {
      this.party_meta_removed = args.party_meta_removed;
    }
    if (args.revision_changed !== undefined && args.revision_changed !== null) {
      this.revision_changed = new ttypes.PartyRevisionChanged(args.revision_changed);
    }
  }
};
PartyChange.prototype = {};
PartyChange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.party_created = new ttypes.PartyCreated();
        this.party_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.party_blocking = new domain_ttypes.Blocking();
        this.party_blocking.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.party_suspension = new domain_ttypes.Suspension();
        this.party_suspension.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.shop_blocking = new ttypes.ShopBlocking();
        this.shop_blocking.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.shop_suspension = new ttypes.ShopSuspension();
        this.shop_suspension.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.claim_created = new ttypes.Claim();
        this.claim_created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.claim_status_changed = new ttypes.ClaimStatusChanged();
        this.claim_status_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.claim_updated = new ttypes.ClaimUpdated();
        this.claim_updated.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.party_meta_set = new ttypes.PartyMetaSet();
        this.party_meta_set.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.party_meta_removed = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.revision_changed = new ttypes.PartyRevisionChanged();
        this.revision_changed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyChange.prototype.write = function(output) {
  output.writeStructBegin('PartyChange');
  if (this.party_created !== null && this.party_created !== undefined) {
    output.writeFieldBegin('party_created', Thrift.Type.STRUCT, 1);
    this.party_created.write(output);
    output.writeFieldEnd();
  }
  if (this.party_blocking !== null && this.party_blocking !== undefined) {
    output.writeFieldBegin('party_blocking', Thrift.Type.STRUCT, 4);
    this.party_blocking.write(output);
    output.writeFieldEnd();
  }
  if (this.party_suspension !== null && this.party_suspension !== undefined) {
    output.writeFieldBegin('party_suspension', Thrift.Type.STRUCT, 5);
    this.party_suspension.write(output);
    output.writeFieldEnd();
  }
  if (this.shop_blocking !== null && this.shop_blocking !== undefined) {
    output.writeFieldBegin('shop_blocking', Thrift.Type.STRUCT, 6);
    this.shop_blocking.write(output);
    output.writeFieldEnd();
  }
  if (this.shop_suspension !== null && this.shop_suspension !== undefined) {
    output.writeFieldBegin('shop_suspension', Thrift.Type.STRUCT, 7);
    this.shop_suspension.write(output);
    output.writeFieldEnd();
  }
  if (this.claim_created !== null && this.claim_created !== undefined) {
    output.writeFieldBegin('claim_created', Thrift.Type.STRUCT, 2);
    this.claim_created.write(output);
    output.writeFieldEnd();
  }
  if (this.claim_status_changed !== null && this.claim_status_changed !== undefined) {
    output.writeFieldBegin('claim_status_changed', Thrift.Type.STRUCT, 3);
    this.claim_status_changed.write(output);
    output.writeFieldEnd();
  }
  if (this.claim_updated !== null && this.claim_updated !== undefined) {
    output.writeFieldBegin('claim_updated', Thrift.Type.STRUCT, 8);
    this.claim_updated.write(output);
    output.writeFieldEnd();
  }
  if (this.party_meta_set !== null && this.party_meta_set !== undefined) {
    output.writeFieldBegin('party_meta_set', Thrift.Type.STRUCT, 9);
    this.party_meta_set.write(output);
    output.writeFieldEnd();
  }
  if (this.party_meta_removed !== null && this.party_meta_removed !== undefined) {
    output.writeFieldBegin('party_meta_removed', Thrift.Type.STRING, 10);
    output.writeString(this.party_meta_removed);
    output.writeFieldEnd();
  }
  if (this.revision_changed !== null && this.revision_changed !== undefined) {
    output.writeFieldBegin('revision_changed', Thrift.Type.STRUCT, 11);
    this.revision_changed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyCreated = module.exports.PartyCreated = function(args) {
  this.id = null;
  this.contact_info = null;
  this.created_at = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.contact_info !== undefined && args.contact_info !== null) {
      this.contact_info = new domain_ttypes.PartyContactInfo(args.contact_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contact_info is unset!');
    }
    if (args.created_at !== undefined && args.created_at !== null) {
      this.created_at = args.created_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field created_at is unset!');
    }
  }
};
PartyCreated.prototype = {};
PartyCreated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact_info = new domain_ttypes.PartyContactInfo();
        this.contact_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.created_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyCreated.prototype.write = function(output) {
  output.writeStructBegin('PartyCreated');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.contact_info !== null && this.contact_info !== undefined) {
    output.writeFieldBegin('contact_info', Thrift.Type.STRUCT, 7);
    this.contact_info.write(output);
    output.writeFieldEnd();
  }
  if (this.created_at !== null && this.created_at !== undefined) {
    output.writeFieldBegin('created_at', Thrift.Type.STRING, 8);
    output.writeString(this.created_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopBlocking = module.exports.ShopBlocking = function(args) {
  this.shop_id = null;
  this.blocking = null;
  if (args) {
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.blocking !== undefined && args.blocking !== null) {
      this.blocking = new domain_ttypes.Blocking(args.blocking);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field blocking is unset!');
    }
  }
};
ShopBlocking.prototype = {};
ShopBlocking.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.blocking = new domain_ttypes.Blocking();
        this.blocking.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopBlocking.prototype.write = function(output) {
  output.writeStructBegin('ShopBlocking');
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 1);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.blocking !== null && this.blocking !== undefined) {
    output.writeFieldBegin('blocking', Thrift.Type.STRUCT, 2);
    this.blocking.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopSuspension = module.exports.ShopSuspension = function(args) {
  this.shop_id = null;
  this.suspension = null;
  if (args) {
    if (args.shop_id !== undefined && args.shop_id !== null) {
      this.shop_id = args.shop_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shop_id is unset!');
    }
    if (args.suspension !== undefined && args.suspension !== null) {
      this.suspension = new domain_ttypes.Suspension(args.suspension);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field suspension is unset!');
    }
  }
};
ShopSuspension.prototype = {};
ShopSuspension.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.shop_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.suspension = new domain_ttypes.Suspension();
        this.suspension.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopSuspension.prototype.write = function(output) {
  output.writeStructBegin('ShopSuspension');
  if (this.shop_id !== null && this.shop_id !== undefined) {
    output.writeFieldBegin('shop_id', Thrift.Type.STRING, 1);
    output.writeString(this.shop_id);
    output.writeFieldEnd();
  }
  if (this.suspension !== null && this.suspension !== undefined) {
    output.writeFieldBegin('suspension', Thrift.Type.STRUCT, 2);
    this.suspension.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClaimStatusChanged = module.exports.ClaimStatusChanged = function(args) {
  this.id = null;
  this.status = null;
  this.revision = null;
  this.changed_at = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.ClaimStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field revision is unset!');
    }
    if (args.changed_at !== undefined && args.changed_at !== null) {
      this.changed_at = args.changed_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field changed_at is unset!');
    }
  }
};
ClaimStatusChanged.prototype = {};
ClaimStatusChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.ClaimStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.revision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.changed_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClaimStatusChanged.prototype.write = function(output) {
  output.writeStructBegin('ClaimStatusChanged');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I32, 3);
    output.writeI32(this.revision);
    output.writeFieldEnd();
  }
  if (this.changed_at !== null && this.changed_at !== undefined) {
    output.writeFieldBegin('changed_at', Thrift.Type.STRING, 4);
    output.writeString(this.changed_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClaimUpdated = module.exports.ClaimUpdated = function(args) {
  this.id = null;
  this.changeset = null;
  this.revision = null;
  this.updated_at = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.changeset !== undefined && args.changeset !== null) {
      this.changeset = Thrift.copyList(args.changeset, [ttypes.PartyModification]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field changeset is unset!');
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field revision is unset!');
    }
    if (args.updated_at !== undefined && args.updated_at !== null) {
      this.updated_at = args.updated_at;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field updated_at is unset!');
    }
  }
};
ClaimUpdated.prototype = {};
ClaimUpdated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.changeset = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.PartyModification();
          elem110.read(input);
          this.changeset.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.revision = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.updated_at = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClaimUpdated.prototype.write = function(output) {
  output.writeStructBegin('ClaimUpdated');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.changeset !== null && this.changeset !== undefined) {
    output.writeFieldBegin('changeset', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.changeset.length);
    for (var iter111 in this.changeset)
    {
      if (this.changeset.hasOwnProperty(iter111))
      {
        iter111 = this.changeset[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I32, 3);
    output.writeI32(this.revision);
    output.writeFieldEnd();
  }
  if (this.updated_at !== null && this.updated_at !== undefined) {
    output.writeFieldBegin('updated_at', Thrift.Type.STRING, 4);
    output.writeString(this.updated_at);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyMetaSet = module.exports.PartyMetaSet = function(args) {
  this.ns = null;
  this.data = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ns is unset!');
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = new msgpack_ttypes.Value(args.data);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
PartyMetaSet.prototype = {};
PartyMetaSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new msgpack_ttypes.Value();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyMetaSet.prototype.write = function(output) {
  output.writeStructBegin('PartyMetaSet');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyRevisionChanged = module.exports.PartyRevisionChanged = function(args) {
  this.timestamp = null;
  this.revision = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field revision is unset!');
    }
  }
};
PartyRevisionChanged.prototype = {};
PartyRevisionChanged.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyRevisionChanged.prototype.write = function(output) {
  output.writeStructBegin('PartyRevisionChanged');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyRevisionParam = module.exports.PartyRevisionParam = function(args) {
  this.timestamp = null;
  this.revision = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
PartyRevisionParam.prototype = {};
PartyRevisionParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyRevisionParam.prototype.write = function(output) {
  output.writeStructBegin('PartyRevisionParam');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PayoutParams = module.exports.PayoutParams = function(args) {
  this.id = null;
  this.amount = null;
  this.timestamp = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = new domain_ttypes.Cash(args.amount);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field amount is unset!');
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
  }
};
PayoutParams.prototype = {};
PayoutParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.amount = new domain_ttypes.Cash();
        this.amount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PayoutParams.prototype.write = function(output) {
  output.writeStructBegin('PayoutParams');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRUCT, 2);
    this.amount.write(output);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyExists = module.exports.PartyExists = function(args) {
  Thrift.TException.call(this, "PartyExists")
  this.name = "PartyExists"
};
Thrift.inherits(PartyExists, Thrift.TException);
PartyExists.prototype.name = 'PartyExists';
PartyExists.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyExists.prototype.write = function(output) {
  output.writeStructBegin('PartyExists');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractNotFound = module.exports.ContractNotFound = function(args) {
  Thrift.TException.call(this, "ContractNotFound")
  this.name = "ContractNotFound"
};
Thrift.inherits(ContractNotFound, Thrift.TException);
ContractNotFound.prototype.name = 'ContractNotFound';
ContractNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractNotFound.prototype.write = function(output) {
  output.writeStructBegin('ContractNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClaimNotFound = module.exports.ClaimNotFound = function(args) {
  Thrift.TException.call(this, "ClaimNotFound")
  this.name = "ClaimNotFound"
};
Thrift.inherits(ClaimNotFound, Thrift.TException);
ClaimNotFound.prototype.name = 'ClaimNotFound';
ClaimNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClaimNotFound.prototype.write = function(output) {
  output.writeStructBegin('ClaimNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidClaimRevision = module.exports.InvalidClaimRevision = function(args) {
  Thrift.TException.call(this, "InvalidClaimRevision")
  this.name = "InvalidClaimRevision"
};
Thrift.inherits(InvalidClaimRevision, Thrift.TException);
InvalidClaimRevision.prototype.name = 'InvalidClaimRevision';
InvalidClaimRevision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidClaimRevision.prototype.write = function(output) {
  output.writeStructBegin('InvalidClaimRevision');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidClaimStatus = module.exports.InvalidClaimStatus = function(args) {
  Thrift.TException.call(this, "InvalidClaimStatus")
  this.name = "InvalidClaimStatus"
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.ClaimStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
Thrift.inherits(InvalidClaimStatus, Thrift.TException);
InvalidClaimStatus.prototype.name = 'InvalidClaimStatus';
InvalidClaimStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.ClaimStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidClaimStatus.prototype.write = function(output) {
  output.writeStructBegin('InvalidClaimStatus');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChangesetConflict = module.exports.ChangesetConflict = function(args) {
  Thrift.TException.call(this, "ChangesetConflict")
  this.name = "ChangesetConflict"
  this.conflicted_id = null;
  if (args) {
    if (args.conflicted_id !== undefined && args.conflicted_id !== null) {
      this.conflicted_id = args.conflicted_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field conflicted_id is unset!');
    }
  }
};
Thrift.inherits(ChangesetConflict, Thrift.TException);
ChangesetConflict.prototype.name = 'ChangesetConflict';
ChangesetConflict.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.conflicted_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangesetConflict.prototype.write = function(output) {
  output.writeStructBegin('ChangesetConflict');
  if (this.conflicted_id !== null && this.conflicted_id !== undefined) {
    output.writeFieldBegin('conflicted_id', Thrift.Type.I64, 1);
    output.writeI64(this.conflicted_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidChangeset = module.exports.InvalidChangeset = function(args) {
  Thrift.TException.call(this, "InvalidChangeset")
  this.name = "InvalidChangeset"
  this.reason = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = new ttypes.InvalidChangesetReason(args.reason);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
Thrift.inherits(InvalidChangeset, Thrift.TException);
InvalidChangeset.prototype.name = 'InvalidChangeset';
InvalidChangeset.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.reason = new ttypes.InvalidChangesetReason();
        this.reason.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidChangeset.prototype.write = function(output) {
  output.writeStructBegin('InvalidChangeset');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRUCT, 1);
    this.reason.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidChangesetReason = module.exports.InvalidChangesetReason = function(args) {
  this.invalid_contract = null;
  this.invalid_shop = null;
  if (args) {
    if (args.invalid_contract !== undefined && args.invalid_contract !== null) {
      this.invalid_contract = new ttypes.InvalidContract(args.invalid_contract);
    }
    if (args.invalid_shop !== undefined && args.invalid_shop !== null) {
      this.invalid_shop = new ttypes.InvalidShop(args.invalid_shop);
    }
  }
};
InvalidChangesetReason.prototype = {};
InvalidChangesetReason.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_contract = new ttypes.InvalidContract();
        this.invalid_contract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_shop = new ttypes.InvalidShop();
        this.invalid_shop.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidChangesetReason.prototype.write = function(output) {
  output.writeStructBegin('InvalidChangesetReason');
  if (this.invalid_contract !== null && this.invalid_contract !== undefined) {
    output.writeFieldBegin('invalid_contract', Thrift.Type.STRUCT, 1);
    this.invalid_contract.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_shop !== null && this.invalid_shop !== undefined) {
    output.writeFieldBegin('invalid_shop', Thrift.Type.STRUCT, 2);
    this.invalid_shop.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidContract = module.exports.InvalidContract = function(args) {
  this.id = null;
  this.reason = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = new ttypes.InvalidContractReason(args.reason);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
InvalidContract.prototype = {};
InvalidContract.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reason = new ttypes.InvalidContractReason();
        this.reason.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidContract.prototype.write = function(output) {
  output.writeStructBegin('InvalidContract');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRUCT, 2);
    this.reason.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidShop = module.exports.InvalidShop = function(args) {
  this.id = null;
  this.reason = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = new ttypes.InvalidShopReason(args.reason);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
InvalidShop.prototype = {};
InvalidShop.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reason = new ttypes.InvalidShopReason();
        this.reason.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidShop.prototype.write = function(output) {
  output.writeStructBegin('InvalidShop');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRUCT, 2);
    this.reason.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidContractReason = module.exports.InvalidContractReason = function(args) {
  this.not_exists = null;
  this.already_exists = null;
  this.invalid_status = null;
  this.contract_adjustment_already_exists = null;
  this.payout_tool_not_exists = null;
  this.payout_tool_already_exists = null;
  this.invalid_object_reference = null;
  if (args) {
    if (args.not_exists !== undefined && args.not_exists !== null) {
      this.not_exists = args.not_exists;
    }
    if (args.already_exists !== undefined && args.already_exists !== null) {
      this.already_exists = args.already_exists;
    }
    if (args.invalid_status !== undefined && args.invalid_status !== null) {
      this.invalid_status = new domain_ttypes.ContractStatus(args.invalid_status);
    }
    if (args.contract_adjustment_already_exists !== undefined && args.contract_adjustment_already_exists !== null) {
      this.contract_adjustment_already_exists = args.contract_adjustment_already_exists;
    }
    if (args.payout_tool_not_exists !== undefined && args.payout_tool_not_exists !== null) {
      this.payout_tool_not_exists = args.payout_tool_not_exists;
    }
    if (args.payout_tool_already_exists !== undefined && args.payout_tool_already_exists !== null) {
      this.payout_tool_already_exists = args.payout_tool_already_exists;
    }
    if (args.invalid_object_reference !== undefined && args.invalid_object_reference !== null) {
      this.invalid_object_reference = new ttypes.InvalidObjectReference(args.invalid_object_reference);
    }
  }
};
InvalidContractReason.prototype = {};
InvalidContractReason.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.not_exists = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.already_exists = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_status = new domain_ttypes.ContractStatus();
        this.invalid_status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.contract_adjustment_already_exists = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.payout_tool_not_exists = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.payout_tool_already_exists = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_object_reference = new ttypes.InvalidObjectReference();
        this.invalid_object_reference.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidContractReason.prototype.write = function(output) {
  output.writeStructBegin('InvalidContractReason');
  if (this.not_exists !== null && this.not_exists !== undefined) {
    output.writeFieldBegin('not_exists', Thrift.Type.STRING, 1);
    output.writeString(this.not_exists);
    output.writeFieldEnd();
  }
  if (this.already_exists !== null && this.already_exists !== undefined) {
    output.writeFieldBegin('already_exists', Thrift.Type.STRING, 2);
    output.writeString(this.already_exists);
    output.writeFieldEnd();
  }
  if (this.invalid_status !== null && this.invalid_status !== undefined) {
    output.writeFieldBegin('invalid_status', Thrift.Type.STRUCT, 3);
    this.invalid_status.write(output);
    output.writeFieldEnd();
  }
  if (this.contract_adjustment_already_exists !== null && this.contract_adjustment_already_exists !== undefined) {
    output.writeFieldBegin('contract_adjustment_already_exists', Thrift.Type.STRING, 4);
    output.writeString(this.contract_adjustment_already_exists);
    output.writeFieldEnd();
  }
  if (this.payout_tool_not_exists !== null && this.payout_tool_not_exists !== undefined) {
    output.writeFieldBegin('payout_tool_not_exists', Thrift.Type.STRING, 5);
    output.writeString(this.payout_tool_not_exists);
    output.writeFieldEnd();
  }
  if (this.payout_tool_already_exists !== null && this.payout_tool_already_exists !== undefined) {
    output.writeFieldBegin('payout_tool_already_exists', Thrift.Type.STRING, 6);
    output.writeString(this.payout_tool_already_exists);
    output.writeFieldEnd();
  }
  if (this.invalid_object_reference !== null && this.invalid_object_reference !== undefined) {
    output.writeFieldBegin('invalid_object_reference', Thrift.Type.STRUCT, 7);
    this.invalid_object_reference.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidShopReason = module.exports.InvalidShopReason = function(args) {
  this.not_exists = null;
  this.already_exists = null;
  this.no_account = null;
  this.invalid_status = null;
  this.contract_terms_violated = null;
  this.payout_tool_invalid = null;
  this.invalid_object_reference = null;
  if (args) {
    if (args.not_exists !== undefined && args.not_exists !== null) {
      this.not_exists = args.not_exists;
    }
    if (args.already_exists !== undefined && args.already_exists !== null) {
      this.already_exists = args.already_exists;
    }
    if (args.no_account !== undefined && args.no_account !== null) {
      this.no_account = args.no_account;
    }
    if (args.invalid_status !== undefined && args.invalid_status !== null) {
      this.invalid_status = new ttypes.InvalidStatus(args.invalid_status);
    }
    if (args.contract_terms_violated !== undefined && args.contract_terms_violated !== null) {
      this.contract_terms_violated = new ttypes.ContractTermsViolated(args.contract_terms_violated);
    }
    if (args.payout_tool_invalid !== undefined && args.payout_tool_invalid !== null) {
      this.payout_tool_invalid = new ttypes.ShopPayoutToolInvalid(args.payout_tool_invalid);
    }
    if (args.invalid_object_reference !== undefined && args.invalid_object_reference !== null) {
      this.invalid_object_reference = new ttypes.InvalidObjectReference(args.invalid_object_reference);
    }
  }
};
InvalidShopReason.prototype = {};
InvalidShopReason.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.not_exists = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.already_exists = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.no_account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_status = new ttypes.InvalidStatus();
        this.invalid_status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.contract_terms_violated = new ttypes.ContractTermsViolated();
        this.contract_terms_violated.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.payout_tool_invalid = new ttypes.ShopPayoutToolInvalid();
        this.payout_tool_invalid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalid_object_reference = new ttypes.InvalidObjectReference();
        this.invalid_object_reference.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidShopReason.prototype.write = function(output) {
  output.writeStructBegin('InvalidShopReason');
  if (this.not_exists !== null && this.not_exists !== undefined) {
    output.writeFieldBegin('not_exists', Thrift.Type.STRING, 1);
    output.writeString(this.not_exists);
    output.writeFieldEnd();
  }
  if (this.already_exists !== null && this.already_exists !== undefined) {
    output.writeFieldBegin('already_exists', Thrift.Type.STRING, 2);
    output.writeString(this.already_exists);
    output.writeFieldEnd();
  }
  if (this.no_account !== null && this.no_account !== undefined) {
    output.writeFieldBegin('no_account', Thrift.Type.STRING, 3);
    output.writeString(this.no_account);
    output.writeFieldEnd();
  }
  if (this.invalid_status !== null && this.invalid_status !== undefined) {
    output.writeFieldBegin('invalid_status', Thrift.Type.STRUCT, 4);
    this.invalid_status.write(output);
    output.writeFieldEnd();
  }
  if (this.contract_terms_violated !== null && this.contract_terms_violated !== undefined) {
    output.writeFieldBegin('contract_terms_violated', Thrift.Type.STRUCT, 5);
    this.contract_terms_violated.write(output);
    output.writeFieldEnd();
  }
  if (this.payout_tool_invalid !== null && this.payout_tool_invalid !== undefined) {
    output.writeFieldBegin('payout_tool_invalid', Thrift.Type.STRUCT, 6);
    this.payout_tool_invalid.write(output);
    output.writeFieldEnd();
  }
  if (this.invalid_object_reference !== null && this.invalid_object_reference !== undefined) {
    output.writeFieldBegin('invalid_object_reference', Thrift.Type.STRUCT, 7);
    this.invalid_object_reference.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractTermsViolated = module.exports.ContractTermsViolated = function(args) {
  this.contract_id = null;
  this.terms = null;
  if (args) {
    if (args.contract_id !== undefined && args.contract_id !== null) {
      this.contract_id = args.contract_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contract_id is unset!');
    }
    if (args.terms !== undefined && args.terms !== null) {
      this.terms = new domain_ttypes.TermSet(args.terms);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field terms is unset!');
    }
  }
};
ContractTermsViolated.prototype = {};
ContractTermsViolated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contract_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.terms = new domain_ttypes.TermSet();
        this.terms.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractTermsViolated.prototype.write = function(output) {
  output.writeStructBegin('ContractTermsViolated');
  if (this.contract_id !== null && this.contract_id !== undefined) {
    output.writeFieldBegin('contract_id', Thrift.Type.STRING, 1);
    output.writeString(this.contract_id);
    output.writeFieldEnd();
  }
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.STRUCT, 2);
    this.terms.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopPayoutToolInvalid = module.exports.ShopPayoutToolInvalid = function(args) {
  this.payout_tool_id = null;
  if (args) {
    if (args.payout_tool_id !== undefined && args.payout_tool_id !== null) {
      this.payout_tool_id = args.payout_tool_id;
    }
  }
};
ShopPayoutToolInvalid.prototype = {};
ShopPayoutToolInvalid.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.payout_tool_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopPayoutToolInvalid.prototype.write = function(output) {
  output.writeStructBegin('ShopPayoutToolInvalid');
  if (this.payout_tool_id !== null && this.payout_tool_id !== undefined) {
    output.writeFieldBegin('payout_tool_id', Thrift.Type.STRING, 1);
    output.writeString(this.payout_tool_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidObjectReference = module.exports.InvalidObjectReference = function(args) {
  this.ref = null;
  if (args) {
    if (args.ref !== undefined && args.ref !== null) {
      this.ref = new domain_ttypes.Reference(args.ref);
    }
  }
};
InvalidObjectReference.prototype = {};
InvalidObjectReference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ref = new domain_ttypes.Reference();
        this.ref.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidObjectReference.prototype.write = function(output) {
  output.writeStructBegin('InvalidObjectReference');
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRUCT, 1);
    this.ref.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccountNotFound = module.exports.AccountNotFound = function(args) {
  Thrift.TException.call(this, "AccountNotFound")
  this.name = "AccountNotFound"
};
Thrift.inherits(AccountNotFound, Thrift.TException);
AccountNotFound.prototype.name = 'AccountNotFound';
AccountNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountNotFound.prototype.write = function(output) {
  output.writeStructBegin('AccountNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopAccountNotFound = module.exports.ShopAccountNotFound = function(args) {
  Thrift.TException.call(this, "ShopAccountNotFound")
  this.name = "ShopAccountNotFound"
};
Thrift.inherits(ShopAccountNotFound, Thrift.TException);
ShopAccountNotFound.prototype.name = 'ShopAccountNotFound';
ShopAccountNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopAccountNotFound.prototype.write = function(output) {
  output.writeStructBegin('ShopAccountNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PartyMetaNamespaceNotFound = module.exports.PartyMetaNamespaceNotFound = function(args) {
  Thrift.TException.call(this, "PartyMetaNamespaceNotFound")
  this.name = "PartyMetaNamespaceNotFound"
};
Thrift.inherits(PartyMetaNamespaceNotFound, Thrift.TException);
PartyMetaNamespaceNotFound.prototype.name = 'PartyMetaNamespaceNotFound';
PartyMetaNamespaceNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PartyMetaNamespaceNotFound.prototype.write = function(output) {
  output.writeStructBegin('PartyMetaNamespaceNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentInstitutionNotFound = module.exports.PaymentInstitutionNotFound = function(args) {
  Thrift.TException.call(this, "PaymentInstitutionNotFound")
  this.name = "PaymentInstitutionNotFound"
};
Thrift.inherits(PaymentInstitutionNotFound, Thrift.TException);
PaymentInstitutionNotFound.prototype.name = 'PaymentInstitutionNotFound';
PaymentInstitutionNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentInstitutionNotFound.prototype.write = function(output) {
  output.writeStructBegin('PaymentInstitutionNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractTemplateNotFound = module.exports.ContractTemplateNotFound = function(args) {
  Thrift.TException.call(this, "ContractTemplateNotFound")
  this.name = "ContractTemplateNotFound"
};
Thrift.inherits(ContractTemplateNotFound, Thrift.TException);
ContractTemplateNotFound.prototype.name = 'ContractTemplateNotFound';
ContractTemplateNotFound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractTemplateNotFound.prototype.write = function(output) {
  output.writeStructBegin('ContractTemplateNotFound');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

